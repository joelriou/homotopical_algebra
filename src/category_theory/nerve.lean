import algebraic_topology.simplicial_set
import category_theory.opposites
import category_theory.arrow_class

open category_theory
open category_theory.category
open opposite
open_locale simplicial

universes v u

namespace category_theory

namespace arrow

@[simps]
def composition {D : Type*} [category D] (w‚ÇÅ w‚ÇÇ : arrow D) (e : w‚ÇÅ.right = w‚ÇÇ.left) : arrow D :=
{ left := w‚ÇÅ.left,
  right := w‚ÇÇ.right,
  hom := w‚ÇÅ.hom ‚â´ eq_to_hom e ‚â´ w‚ÇÇ.hom }

@[simp]
lemma map_arrow_comp {D E : Type*} [category D] [category E] (F : D ‚•§ E) {X Y Z : D} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
  F.map_arrow.obj (arrow.mk (f ‚â´ g)) = composition (F.map_arrow.obj (arrow.mk f)) (F.map_arrow.obj (arrow.mk g)) rfl :=
begin
  ext,
  { simp only [functor.map_arrow_obj_hom, arrow.mk_hom, functor.map_comp, eq_to_hom_refl, composition_hom, id_comp, comp_id], },
  { refl, },
  { refl, },
end

@[simp]
lemma map_arrow_of_mk {D E : Type*} [category D] [category E] (F : D ‚•§ E) {X Y : D} (f : X ‚ü∂ Y) :
  F.map_arrow.obj (arrow.mk f) = arrow.mk (F.map f) := by refl

end arrow


def composable_morphisms (n : ‚Ñï) (D : Type*) [category D] := fin (n+1) ‚•§ D

namespace composable_morphisms

def mk_0 {D : Type*} [category D] (X : D) : composable_morphisms 0 D :=
{ obj := Œª i, X,
  map := Œª i j f, ùüô X }

lemma fin.eq_one_of_geq_one {i : fin 2} (hi : 1 ‚â§ i) : i = 1 := le_antisymm i.is_le hi

lemma fin.eq_one_of_neq_zero {i : fin 2} (hi : i ‚â† 0) : i = 1 :=
begin
  apply fin.eq_one_of_geq_one,
  by_contradiction,
  apply hi,
  ext,
  simpa only [fin.le_iff_coe_le_coe, fin.coe_one, not_le, nat.lt_one_iff] using h,
end

@[simps]
def mk_1 {D : Type*} [category D] {X‚ÇÄ X‚ÇÅ : D} (f : X‚ÇÄ ‚ü∂ X‚ÇÅ) : composable_morphisms 1 D :=
{ obj := Œª i, if i = 0 then X‚ÇÄ else X‚ÇÅ,
  map := Œª i j g, begin
    split_ifs with hi hj hj,
    { exact ùüô X‚ÇÄ, },
    { exact f, },
    { exfalso,
      apply hi,
      ext,
      simpa only [hj, fin.le_iff_coe_le_coe, fin.coe_zero, nonpos_iff_eq_zero] using le_of_hom g, },
    { exact ùüô X‚ÇÅ, },
  end,
  map_id' := Œª X, begin
    split_ifs,
    { subst h, refl, },
    { have h' := fin.eq_one_of_neq_zero h, subst h', refl, },
  end,
  map_comp' := Œª i j k ij jk, begin
    split_ifs with hi,
    { subst hi,
      by_cases hj : j = 0,
      { subst hj,
        have hij : ùüô _ = ij  := hom_of_le_le_of_hom _,
        subst hij,
        erw id_comp,
        refl, },
      { have hj' := fin.eq_one_of_neq_zero hj,
        subst hj',
        have hk' := fin.eq_one_of_geq_one (le_of_hom jk),
        subst hk',
        exact (comp_id _).symm, }, },
    { have hi' := fin.eq_one_of_neq_zero hi,
      subst hi',
      have hj' := fin.eq_one_of_geq_one (le_of_hom ij),
      subst hj',
      have hk' := fin.eq_one_of_geq_one (le_of_hom jk),
      subst hk',
      have hij : ùüô _ = ij := hom_of_le_le_of_hom _,
      have hjk : ùüô _ = jk := hom_of_le_le_of_hom _,
      substs hij hjk,
      exact (id_comp (ùüô _)).symm, }
  end, }

@[simp]
def left {n : ‚Ñï} {D : Type*} [category D] (F : composable_morphisms n D) : D := F.obj 0
@[simp]
def right {n : ‚Ñï} {D : Type*} [category D] (F : composable_morphisms n D) : D := F.obj (fin.last _)

@[simp]
lemma mk_1_left {D : Type*} [category D] {X‚ÇÄ X‚ÇÅ : D} (f : X‚ÇÄ ‚ü∂ X‚ÇÅ) : (mk_1 f).left = X‚ÇÄ := by refl
@[simp]
lemma mk_1_right {D : Type*} [category D] {X‚ÇÄ X‚ÇÅ : D} (f : X‚ÇÄ ‚ü∂ X‚ÇÅ) : (mk_1 f).right = X‚ÇÅ := by refl

@[simp]
def composition {n : ‚Ñï} {D : Type*} [category D] (F : composable_morphisms n D) : arrow D :=
arrow.mk (F.map (hom_of_le (fin.last _).zero_le))
@[simp]
lemma mk_1_composition {D : Type*} [category D] {X‚ÇÄ X‚ÇÅ : D} (f : X‚ÇÄ ‚ü∂ X‚ÇÅ) : (mk_1 f).composition = arrow.mk f := by refl

@[simp]
def ith_arrow {n : ‚Ñï} {D : Type*} [category D] (F : composable_morphisms n D) (i : fin n) : arrow D :=
arrow.mk (F.map (hom_of_le (show fin.cast_succ i ‚â§ i.succ,
by simp only [fin.le_iff_coe_le_coe, fin.coe_cast_succ, fin.coe_succ, le_add_iff_nonneg_right, zero_le_one])))

namespace join

def obj {n‚ÇÅ n‚ÇÇ : ‚Ñï} {D : Type*} [category D] (F‚ÇÅ : composable_morphisms n‚ÇÅ D) (F‚ÇÇ : composable_morphisms n‚ÇÇ D)
  (e : F‚ÇÅ.right = F‚ÇÇ.left) (i : fin (n‚ÇÅ+n‚ÇÇ+1)) : D :=
begin
  by_cases hi : (i : ‚Ñï) ‚â§ n‚ÇÅ,
  { exact F‚ÇÅ.obj ‚ü®(i : ‚Ñï), nat.lt_succ_iff.mpr hi‚ü©, },
  { refine F‚ÇÇ.obj ‚ü®(i : ‚Ñï)-n‚ÇÅ, _‚ü©,
    cases nat.le.dest (le_of_not_ge hi) with k hk,
    simpa only [‚Üê hk, add_tsub_cancel_left, add_assoc, add_lt_add_iff_left n‚ÇÅ] using i.is_lt, },
end

@[simp]
def Œπ‚ÇÅ {n‚ÇÅ n‚ÇÇ : ‚Ñï} (i : fin (n‚ÇÅ+1)) : fin (n‚ÇÅ+n‚ÇÇ+1) := fin.cast_le (by { rw [add_assoc, add_comm n‚ÇÇ, ‚Üê add_assoc], exact le_self_add, }) i
@[simp]
def Œπ‚ÇÇ {n‚ÇÅ n‚ÇÇ : ‚Ñï} (i : fin (n‚ÇÇ+1)) : fin (n‚ÇÅ+n‚ÇÇ+1) := ‚ü®n‚ÇÅ+i, by { rw add_assoc, exact add_lt_add_left (i.is_lt) n‚ÇÅ, }‚ü©

def obj‚ÇÅ {n‚ÇÅ n‚ÇÇ : ‚Ñï} {D : Type*} [category D] (F‚ÇÅ : composable_morphisms n‚ÇÅ D) (F‚ÇÇ : composable_morphisms n‚ÇÇ D)
  (e : F‚ÇÅ.right = F‚ÇÇ.left) (i : fin (n‚ÇÅ+1)) : obj F‚ÇÅ F‚ÇÇ e (Œπ‚ÇÅ i) = F‚ÇÅ.obj i :=
begin
  have hi := i.is_le,
  dsimp [obj],
  split_ifs,
  congr,
  ext,
  simp only [Œπ‚ÇÅ, fin.eta],
end

def œÅ‚ÇÅ {n‚ÇÅ n‚ÇÇ : ‚Ñï} (i : fin (n‚ÇÅ+n‚ÇÇ+1)) (hi : (i : ‚Ñï) ‚â§ n‚ÇÅ) : fin (n‚ÇÅ+1) := ‚ü®(i : ‚Ñï), nat.lt_succ_iff.mpr hi‚ü©
def œÅ‚ÇÇ {n‚ÇÅ n‚ÇÇ : ‚Ñï} (i : fin (n‚ÇÅ+n‚ÇÇ+1)) (hi : ¬¨(i : ‚Ñï) ‚â§ n‚ÇÅ) : fin (n‚ÇÇ+1) := ‚ü®(i : ‚Ñï)-n‚ÇÅ, begin 
  cases nat.le.dest (le_of_not_ge hi) with k hk,
  simpa only [‚Üê hk, add_tsub_cancel_left, add_assoc, add_lt_add_iff_left n‚ÇÅ] using i.is_lt,
end‚ü©

def obj‚ÇÅ' {n‚ÇÅ n‚ÇÇ : ‚Ñï} {D : Type*} [category D] {F‚ÇÅ : composable_morphisms n‚ÇÅ D} {F‚ÇÇ : composable_morphisms n‚ÇÇ D}
  {e : F‚ÇÅ.right = F‚ÇÇ.left} (i : fin (n‚ÇÅ+n‚ÇÇ+1)) (hi : (i : ‚Ñï) ‚â§ n‚ÇÅ) : obj F‚ÇÅ F‚ÇÇ e i = F‚ÇÅ.obj (œÅ‚ÇÅ i hi) :=
begin
  rw ‚Üê obj‚ÇÅ F‚ÇÅ F‚ÇÇ e,
  congr,
  simp only [Œπ‚ÇÅ, œÅ‚ÇÅ, fin.cast_le_mk, fin.eta],
end

def obj‚ÇÇ {n‚ÇÅ n‚ÇÇ : ‚Ñï} {D : Type*} [category D] (F‚ÇÅ : composable_morphisms n‚ÇÅ D) (F‚ÇÇ : composable_morphisms n‚ÇÇ D)
  (e : F‚ÇÅ.right = F‚ÇÇ.left) (i : fin (n‚ÇÇ+1)) : obj F‚ÇÅ F‚ÇÇ e (Œπ‚ÇÇ i) = F‚ÇÇ.obj i :=
begin
  dsimp [obj],
  split_ifs with hi,
  { simp only [add_le_iff_nonpos_right, nonpos_iff_eq_zero] at hi,
    have hi' : i = 0 := by { ext, exact hi, },
    subst hi',
    exact e, },
  { congr,
    ext,
    simp only [add_tsub_cancel_left, fin.eta], },
end

def obj‚ÇÇ' {n‚ÇÅ n‚ÇÇ : ‚Ñï} {D : Type*} [category D] {F‚ÇÅ : composable_morphisms n‚ÇÅ D} {F‚ÇÇ : composable_morphisms n‚ÇÇ D}
  {e : F‚ÇÅ.right = F‚ÇÇ.left} (i : fin (n‚ÇÅ+n‚ÇÇ+1)) (hi : ¬¨(i : ‚Ñï) ‚â§ n‚ÇÅ) : obj F‚ÇÅ F‚ÇÇ e i = F‚ÇÇ.obj (œÅ‚ÇÇ i hi) :=
begin
  rw ‚Üê obj‚ÇÇ F‚ÇÅ F‚ÇÇ e,
  congr,
  ext,
  simp only [Œπ‚ÇÇ, œÅ‚ÇÇ, add_tsub_cancel_left, add_lt_add_iff_left, fin.coe_mk, add_comm n‚ÇÅ, nat.sub_add_cancel (le_of_not_ge hi)],
end

def map {n‚ÇÅ n‚ÇÇ : ‚Ñï} {D : Type*} [category D] (F‚ÇÅ : composable_morphisms n‚ÇÅ D) (F‚ÇÇ : composable_morphisms n‚ÇÇ D)
  (e : F‚ÇÅ.right = F‚ÇÇ.left) (i j : fin (n‚ÇÅ+n‚ÇÇ+1)) (hij : i ‚â§ j) : obj F‚ÇÅ F‚ÇÇ e i ‚ü∂ obj F‚ÇÅ F‚ÇÇ e j :=
begin
  by_cases hj : (j : ‚Ñï) ‚â§ n‚ÇÅ,
  { have hi : (i : ‚Ñï) ‚â§ n‚ÇÅ := ((fin.coe_fin_le.mpr hij).trans hj),
    refine eq_to_hom (obj‚ÇÅ' i hi) ‚â´ F‚ÇÅ.map (hom_of_le _) ‚â´ eq_to_hom (obj‚ÇÅ' j hj).symm,
    simpa only [subtype.mk_le_mk, fin.coe_fin_le] using hij, },
  by_cases hi : (i : ‚Ñï) ‚â§ n‚ÇÅ,
  { exact eq_to_hom (obj‚ÇÅ' i hi) ‚â´ F‚ÇÅ.map (hom_of_le (fin.le_last _)) ‚â´ eq_to_hom e ‚â´ F‚ÇÇ.map (hom_of_le (fin.zero_le _)) ‚â´ eq_to_hom (obj‚ÇÇ' j hj).symm, },
  { refine eq_to_hom (obj‚ÇÇ' i hi) ‚â´ F‚ÇÇ.map (hom_of_le _) ‚â´ eq_to_hom (obj‚ÇÇ' j hj).symm,
    simp only [œÅ‚ÇÇ, subtype.mk_le_mk, tsub_le_iff_right],
    rw nat.sub_add_cancel (le_of_not_ge hj),
    simpa only [fin.coe_fin_le] using hij, },
end

lemma map‚ÇÅ‚ÇÅ' {n‚ÇÅ n‚ÇÇ : ‚Ñï} {D : Type*} [category D] (F‚ÇÅ : composable_morphisms n‚ÇÅ D) (F‚ÇÇ : composable_morphisms n‚ÇÇ D)
  (e : F‚ÇÅ.right = F‚ÇÇ.left) (i j : fin (n‚ÇÅ+n‚ÇÇ+1)) (hi : (i : ‚Ñï) ‚â§ n‚ÇÅ) (hj : (j : ‚Ñï) ‚â§ n‚ÇÅ) (hij : i ‚â§ j) : map F‚ÇÅ F‚ÇÇ e i j hij =
eq_to_hom (obj‚ÇÅ' i hi) ‚â´ F‚ÇÅ.map (hom_of_le (by exact hij)) ‚â´ eq_to_hom (obj‚ÇÅ' j hj).symm :=
begin
  dsimp only [map],
  split_ifs,
  tidy,
end

lemma hŒπ‚ÇÅ {n‚ÇÅ : ‚Ñï} (i : fin (n‚ÇÅ+1)) (n‚ÇÇ : ‚Ñï) : ((Œπ‚ÇÅ i : fin (n‚ÇÅ+n‚ÇÇ+1)) : ‚Ñï) ‚â§ n‚ÇÅ := i.is_le
lemma hŒπ‚ÇÇ {n‚ÇÇ : ‚Ñï} (i : fin (n‚ÇÇ+1)) (hi : i ‚â† 0) (n‚ÇÅ : ‚Ñï) : ¬¨((Œπ‚ÇÇ i : fin (n‚ÇÅ+n‚ÇÇ+1)) : ‚Ñï) ‚â§ n‚ÇÅ :=
begin
  simp only [Œπ‚ÇÇ, fin.coe_mk, add_le_iff_nonpos_right, nonpos_iff_eq_zero],
  intro h,
  apply hi,
  ext,
  exact h,
end

lemma œÅ‚ÇÅŒπ‚ÇÅ {n‚ÇÅ : ‚Ñï} (i : fin (n‚ÇÅ+1)) (n‚ÇÇ : ‚Ñï) : i = œÅ‚ÇÅ (Œπ‚ÇÅ i : fin (n‚ÇÅ+n‚ÇÇ+1)) (hŒπ‚ÇÅ i n‚ÇÇ) :=
by { ext, refl, }
lemma œÅ‚ÇÇŒπ‚ÇÇ {n‚ÇÇ : ‚Ñï} (i : fin (n‚ÇÇ+1)) (hi : i ‚â† 0) (n‚ÇÅ : ‚Ñï) : i = œÅ‚ÇÇ (Œπ‚ÇÇ i : fin (n‚ÇÅ+n‚ÇÇ+1)) (hŒπ‚ÇÇ i hi n‚ÇÅ) :=
begin
  ext,
  simp only [œÅ‚ÇÇ, Œπ‚ÇÇ, fin.coe_mk, add_tsub_cancel_left],
end

lemma map‚ÇÅ‚ÇÅ {n‚ÇÅ n‚ÇÇ : ‚Ñï} {D : Type*} [category D] (F‚ÇÅ : composable_morphisms n‚ÇÅ D) (F‚ÇÇ : composable_morphisms n‚ÇÇ D)
  (e : F‚ÇÅ.right = F‚ÇÇ.left) (i j : fin (n‚ÇÅ+1)) (hij : (Œπ‚ÇÅ i : fin (n‚ÇÅ+n‚ÇÇ+1)) ‚â§ Œπ‚ÇÅ j) : map F‚ÇÅ F‚ÇÇ e (Œπ‚ÇÅ i) (Œπ‚ÇÅ j) hij =
eq_to_hom (obj‚ÇÅ F‚ÇÅ F‚ÇÇ e i) ‚â´ F‚ÇÅ.map (hom_of_le hij) ‚â´ eq_to_hom (obj‚ÇÅ F‚ÇÅ F‚ÇÇ e j).symm :=
begin
  have eqi := œÅ‚ÇÅŒπ‚ÇÅ i n‚ÇÅ,
  have eqj := œÅ‚ÇÅŒπ‚ÇÅ j n‚ÇÅ,
  convert map‚ÇÅ‚ÇÅ' F‚ÇÅ F‚ÇÇ e (Œπ‚ÇÅ i) (Œπ‚ÇÅ j) (hŒπ‚ÇÅ i n‚ÇÇ) (hŒπ‚ÇÅ j n‚ÇÇ) hij,
end

lemma map‚ÇÅ‚ÇÇ' {n‚ÇÅ n‚ÇÇ : ‚Ñï} {D : Type*} [category D] (F‚ÇÅ : composable_morphisms n‚ÇÅ D) (F‚ÇÇ : composable_morphisms n‚ÇÇ D)
  (e : F‚ÇÅ.right = F‚ÇÇ.left) (i j : fin (n‚ÇÅ+n‚ÇÇ+1)) (hi : (i : ‚Ñï) ‚â§ n‚ÇÅ) (hj : ¬¨(j : ‚Ñï) ‚â§ n‚ÇÅ) (hij : i ‚â§ j) : map F‚ÇÅ F‚ÇÇ e i j hij =
eq_to_hom (obj‚ÇÅ' i hi) ‚â´ F‚ÇÅ.map (hom_of_le (fin.le_last _)) ‚â´ eq_to_hom e ‚â´
  F‚ÇÇ.map (hom_of_le (fin.zero_le _)) ‚â´ eq_to_hom (obj‚ÇÇ' j hj).symm :=
begin
  dsimp only [map],
  split_ifs,
  tidy,
end

lemma map‚ÇÇ‚ÇÇ' {n‚ÇÅ n‚ÇÇ : ‚Ñï} {D : Type*} [category D] (F‚ÇÅ : composable_morphisms n‚ÇÅ D) (F‚ÇÇ : composable_morphisms n‚ÇÇ D)
  (e : F‚ÇÅ.right = F‚ÇÇ.left) (i j : fin (n‚ÇÅ+n‚ÇÇ+1)) (hi : ¬¨(i : ‚Ñï) ‚â§ n‚ÇÅ) (hj : ¬¨(j : ‚Ñï) ‚â§ n‚ÇÅ) (hij : i ‚â§ j) : map F‚ÇÅ F‚ÇÇ e i j hij =
eq_to_hom (obj‚ÇÇ' i hi) ‚â´ F‚ÇÇ.map (hom_of_le begin
  dsimp [œÅ‚ÇÇ],
  simpa only [subtype.mk_le_mk, tsub_le_iff_right, nat.sub_add_cancel (le_of_not_ge hj)] using fin.coe_fin_le.mpr hij,
end) ‚â´ eq_to_hom (obj‚ÇÇ' j hj).symm :=
begin
  dsimp only [map],
  split_ifs,
  tidy,
end

lemma monotone_Œπ‚ÇÅ {n‚ÇÅ n‚ÇÇ : ‚Ñï} : monotone (Œπ‚ÇÅ : fin (n‚ÇÅ+1) ‚Üí fin (n‚ÇÅ+n‚ÇÇ+1)) := Œª x y h, h
lemma monotone_Œπ‚ÇÇ {n‚ÇÅ n‚ÇÇ : ‚Ñï} : monotone (Œπ‚ÇÇ : fin (n‚ÇÇ+1) ‚Üí fin (n‚ÇÅ+n‚ÇÇ+1)) := Œª x y h,
begin
  rw fin.le_iff_coe_le_coe at h ‚ä¢,
  cases nat.le.dest h with k hk,
  apply nat.le.intro,
  swap,
  { exact k, },
  { simp only [Œπ‚ÇÇ, fin.coe_mk, ‚Üê hk, add_assoc], },
end

lemma map‚ÇÇ‚ÇÇ {n‚ÇÅ n‚ÇÇ : ‚Ñï} {D : Type*} [category D] (F‚ÇÅ : composable_morphisms n‚ÇÅ D) (F‚ÇÇ : composable_morphisms n‚ÇÇ D)
  (e : F‚ÇÅ.right = F‚ÇÇ.left) (i j : fin (n‚ÇÇ+1)) (hij : i ‚â§ j) : map F‚ÇÅ F‚ÇÇ e (Œπ‚ÇÇ i) (Œπ‚ÇÇ j) (monotone_Œπ‚ÇÇ hij) =
eq_to_hom (obj‚ÇÇ F‚ÇÅ F‚ÇÇ e i) ‚â´ F‚ÇÇ.map (hom_of_le hij) ‚â´ eq_to_hom (obj‚ÇÇ F‚ÇÅ F‚ÇÇ e j).symm :=
begin
  have H : ‚àÄ (i : fin (n‚ÇÇ+1)), i ‚â† 0 ‚Üí ¬¨(((Œπ‚ÇÇ i : fin (n‚ÇÅ+n‚ÇÇ+1)) : ‚Ñï) ‚â§ n‚ÇÅ),
  { intros i hi,
    by_contradiction,
    simp only [Œπ‚ÇÇ, fin.coe_mk, add_le_iff_nonpos_right, nonpos_iff_eq_zero] at h,
    apply hi,
    ext,
    exact h, },
  by_cases hi : i ‚â† 0,
  { have hj : j ‚â† 0,
    { by_contradiction,
      apply hi,
      rw h at hij,
      exact le_antisymm hij (fin.zero_le i), },
    have eqi := œÅ‚ÇÇŒπ‚ÇÇ i hi n‚ÇÅ,
    have eqj := œÅ‚ÇÇŒπ‚ÇÇ j hj n‚ÇÅ,
    convert map‚ÇÇ‚ÇÇ' F‚ÇÅ F‚ÇÇ e (Œπ‚ÇÇ i) (Œπ‚ÇÇ j) (H i hi) (H j hj) (monotone_Œπ‚ÇÇ hij), },
  { by_cases hj : j ‚â† 0,
    { simp only [not_not] at hi,
      subst hi,
      erw join.map‚ÇÅ‚ÇÇ' F‚ÇÅ F‚ÇÇ e (Œπ‚ÇÇ 0) (Œπ‚ÇÇ j) rfl.le (H j hj) (monotone_Œπ‚ÇÇ hij),
      erw [F‚ÇÅ.map_id, id_comp],
      slice_lhs 1 2 { erw [eq_to_hom_trans], },
      rw assoc,
      have eqj := (œÅ‚ÇÇŒπ‚ÇÇ j hj n‚ÇÅ).symm,
      congr', },
    { simp only [not_not] at hi hj,
      substs hi hj,
      erw join.map‚ÇÅ‚ÇÅ' F‚ÇÅ F‚ÇÇ e (Œπ‚ÇÇ 0) (Œπ‚ÇÇ 0) rfl.le rfl.le  (monotone_Œπ‚ÇÇ hij),
      erw [F‚ÇÅ.map_id, F‚ÇÇ.map_id],
      simp only [id_comp, eq_to_hom_trans], }, },
end

end join

@[simps]
def join {n‚ÇÅ n‚ÇÇ : ‚Ñï} {D : Type*} [category D] (F‚ÇÅ : composable_morphisms n‚ÇÅ D) (F‚ÇÇ : composable_morphisms n‚ÇÇ D)
  (e : F‚ÇÅ.right = F‚ÇÇ.left) :
  composable_morphisms (n‚ÇÅ+n‚ÇÇ) D :=
{ obj := join.obj F‚ÇÅ F‚ÇÇ e,
  map := Œª i j ij, join.map F‚ÇÅ F‚ÇÇ e i j (le_of_hom ij),
  map_id' := Œª i, begin
    by_cases hi : (i : ‚Ñï) ‚â§ n‚ÇÅ,
    { erw [join.map‚ÇÅ‚ÇÅ' F‚ÇÅ F‚ÇÇ e i i hi hi rfl.le, F‚ÇÅ.map_id, id_comp, eq_to_hom_trans, eq_to_hom_refl], },
    { erw [join.map‚ÇÇ‚ÇÇ' F‚ÇÅ F‚ÇÇ e i i hi hi rfl.le, F‚ÇÇ.map_id, id_comp, eq_to_hom_trans, eq_to_hom_refl], },
  end,
  map_comp' := Œª i j k ij jk, begin
    by_cases hk : (k : ‚Ñï) ‚â§ n‚ÇÅ,
    { have hj : (j : ‚Ñï) ‚â§ n‚ÇÅ := le_trans (fin.le_iff_coe_le_coe.mp (le_of_hom jk)) hk,
      have hi : (i : ‚Ñï) ‚â§ n‚ÇÅ := le_trans (fin.le_iff_coe_le_coe.mp (le_of_hom ij)) hj,
      erw join.map‚ÇÅ‚ÇÅ' F‚ÇÅ F‚ÇÇ e i j hi hj (le_of_hom ij),
      erw join.map‚ÇÅ‚ÇÅ' F‚ÇÅ F‚ÇÇ e j k hj hk (le_of_hom jk),
      erw join.map‚ÇÅ‚ÇÅ' F‚ÇÅ F‚ÇÇ e i k hi hk (le_of_hom (ij ‚â´ jk)),
      slice_rhs 3 4 { rw [eq_to_hom_trans, eq_to_hom_refl], },
      erw id_comp,
      slice_rhs 2 3 { rw ‚Üê F‚ÇÅ.map_comp, },
      refl, },
    { by_cases hi : (i : ‚Ñï) ‚â§ n‚ÇÅ,
      { by_cases hj : (j : ‚Ñï) ‚â§ n‚ÇÅ,
        { erw join.map‚ÇÅ‚ÇÅ' F‚ÇÅ F‚ÇÇ e i j hi hj (le_of_hom ij),
          erw join.map‚ÇÅ‚ÇÇ' F‚ÇÅ F‚ÇÇ e j k hj hk (le_of_hom jk),
          erw join.map‚ÇÅ‚ÇÇ' F‚ÇÅ F‚ÇÇ e i k hi hk (le_of_hom (ij ‚â´ jk)),
          slice_rhs 3 4 { rw [eq_to_hom_trans, eq_to_hom_refl], },
          erw id_comp,
          slice_rhs 2 3 { rw ‚Üê F‚ÇÅ.map_comp, },
          simpa only [assoc], },
        { erw join.map‚ÇÅ‚ÇÇ' F‚ÇÅ F‚ÇÇ e i j hi hj (le_of_hom ij),
          erw join.map‚ÇÇ‚ÇÇ' F‚ÇÅ F‚ÇÇ e j k hj hk (le_of_hom jk),
          erw join.map‚ÇÅ‚ÇÇ' F‚ÇÅ F‚ÇÇ e i k hi hk (le_of_hom (ij ‚â´ jk)),
          slice_rhs 5 6 { rw [eq_to_hom_trans, eq_to_hom_refl], },
          erw id_comp,
          slice_rhs 4 5 { rw ‚Üê F‚ÇÇ.map_comp, },
          refl, }, },
      { have hj : ¬¨(j : ‚Ñï) ‚â§ n‚ÇÅ,
        { simp only [not_le] at ‚ä¢ hi,
          exact lt_of_lt_of_le hi (le_of_hom ij), },
        erw join.map‚ÇÇ‚ÇÇ' F‚ÇÅ F‚ÇÇ e i j hi hj (le_of_hom ij),
        erw join.map‚ÇÇ‚ÇÇ' F‚ÇÅ F‚ÇÇ e j k hj hk (le_of_hom jk),
        erw join.map‚ÇÇ‚ÇÇ' F‚ÇÅ F‚ÇÇ e i k hi hk (le_of_hom (ij ‚â´ jk)),
        slice_rhs 3 4 { rw [eq_to_hom_trans, eq_to_hom_refl], },
        erw id_comp,
        slice_rhs 2 3 { rw ‚Üê F‚ÇÇ.map_comp, },
        refl, }, },
  end }

def left_part {n‚ÇÅ n‚ÇÇ : ‚Ñï} {D : Type*} [category D] (F : composable_morphisms (n‚ÇÅ+n‚ÇÇ) D) : composable_morphisms n‚ÇÅ D :=
monotone.functor (join.monotone_Œπ‚ÇÅ) ‚ãô F

def right_part {n‚ÇÅ n‚ÇÇ : ‚Ñï} {D : Type*} [category D] (F : composable_morphisms (n‚ÇÅ+n‚ÇÇ) D) : composable_morphisms n‚ÇÇ D :=
monotone.functor (join.monotone_Œπ‚ÇÇ) ‚ãô F

lemma left_part_of_join {n‚ÇÅ n‚ÇÇ : ‚Ñï} {D : Type*} [category D] (F‚ÇÅ : composable_morphisms n‚ÇÅ D) (F‚ÇÇ : composable_morphisms n‚ÇÇ D)
  (e : F‚ÇÅ.right = F‚ÇÇ.left) : (join F‚ÇÅ F‚ÇÇ e).left_part = F‚ÇÅ :=
begin
  apply functor.ext,
  { intros i j ij,
    convert join.map‚ÇÅ‚ÇÅ F‚ÇÅ F‚ÇÇ e i j (le_of_hom ij), },
end

lemma right_part_of_join {n‚ÇÅ n‚ÇÇ : ‚Ñï} {D : Type*} [category D] (F‚ÇÅ : composable_morphisms n‚ÇÅ D) (F‚ÇÇ : composable_morphisms n‚ÇÇ D)
  (e : F‚ÇÅ.right = F‚ÇÇ.left) : (join F‚ÇÅ F‚ÇÇ e).right_part = F‚ÇÇ :=
begin
  apply functor.ext,
  { intros i j ij,
    convert join.map‚ÇÇ‚ÇÇ F‚ÇÅ F‚ÇÇ e i j (le_of_hom ij), },
end

lemma composition_is_comp_of_left_and_right_parts {n‚ÇÅ n‚ÇÇ : ‚Ñï} {D : Type*} [category D] (F : composable_morphisms (n‚ÇÅ+n‚ÇÇ) D) :
  F.composition = arrow.composition F.left_part.composition F.right_part.composition rfl :=
begin
  let a : fin (n‚ÇÅ+n‚ÇÇ+1) := 0,
  let b : fin (n‚ÇÅ+n‚ÇÇ+1) := ‚ü®n‚ÇÅ, nat.lt_succ_iff.mpr le_self_add‚ü©,
  let c : fin (n‚ÇÅ+n‚ÇÇ+1) := fin.last _,
  have ab : a ‚â§ b := nat.zero_le _,
  have bc : b ‚â§ c := fin.le_last _,
  ext,
  { simp only [eq_to_hom_refl, arrow.composition_hom, id_comp, comp_id],
    exact F.map_comp (hom_of_le ab) (hom_of_le bc), },
  { refl, },
  { refl, },
end

lemma composition_of_join {n‚ÇÅ n‚ÇÇ : ‚Ñï} {D : Type*} [category D] (F‚ÇÅ : composable_morphisms n‚ÇÅ D) (F‚ÇÇ : composable_morphisms n‚ÇÇ D)
  (e : F‚ÇÅ.right = F‚ÇÇ.left) : (join F‚ÇÅ F‚ÇÇ e).composition = arrow.composition F‚ÇÅ.composition F‚ÇÇ.composition e :=
begin
  convert composition_is_comp_of_left_and_right_parts _,
  { symmetry, apply left_part_of_join, },
  { symmetry, apply right_part_of_join, },
end

lemma i‚ÇÅth_arrow {n‚ÇÅ n‚ÇÇ : ‚Ñï} {D : Type*} [category D] (F : composable_morphisms (n‚ÇÅ+n‚ÇÇ) D) (i : fin n‚ÇÅ):
  F.ith_arrow (fin.cast_le le_self_add i) = F.left_part.ith_arrow i :=
begin
  dsimp only [left_part, ith_arrow, functor.comp, monotone.functor],
  simp only [‚Üê arrow.map_arrow_of_mk],
  congr';
  { ext,
    simp only [join.Œπ‚ÇÅ, fin.cast_le_succ], },
end

lemma i‚ÇÅth_arrow_of_join {n‚ÇÅ n‚ÇÇ : ‚Ñï} {D : Type*} [category D] (F‚ÇÅ : composable_morphisms n‚ÇÅ D) (F‚ÇÇ : composable_morphisms n‚ÇÇ D)
  (e : F‚ÇÅ.right = F‚ÇÇ.left) (i : fin n‚ÇÅ) : (join F‚ÇÅ F‚ÇÇ e).ith_arrow (fin.cast_le le_self_add i) = F‚ÇÅ.ith_arrow i :=
begin
  convert i‚ÇÅth_arrow (join F‚ÇÅ F‚ÇÇ e) i,
  { symmetry, apply left_part_of_join, },
end

lemma i‚ÇÇth_arrow {n‚ÇÅ n‚ÇÇ : ‚Ñï} {D : Type*} [category D] (F : composable_morphisms (n‚ÇÅ+n‚ÇÇ) D) (i : fin n‚ÇÇ):
  F.ith_arrow ‚ü®n‚ÇÅ+(i : ‚Ñï), by { simpa only [add_lt_add_iff_left] using i.is_lt, }‚ü© = F.right_part.ith_arrow i :=
begin
  dsimp only [right_part, ith_arrow, functor.comp, monotone.functor],
  simp only [‚Üê arrow.map_arrow_of_mk],
  congr';
  { ext,
    simp only [join.Œπ‚ÇÇ, fin.coe_mk, fin.coe_succ, add_assoc], },
end

lemma i‚ÇÇth_arrow_of_join {n‚ÇÅ n‚ÇÇ : ‚Ñï} {D : Type*} [category D] (F‚ÇÅ : composable_morphisms n‚ÇÅ D) (F‚ÇÇ : composable_morphisms n‚ÇÇ D)
  (e : F‚ÇÅ.right = F‚ÇÇ.left) (i : fin n‚ÇÇ) :
  (join F‚ÇÅ F‚ÇÇ e).ith_arrow ‚ü®n‚ÇÅ+(i : ‚Ñï), by { simpa only [add_lt_add_iff_left] using i.is_lt, }‚ü© = F‚ÇÇ.ith_arrow i :=
begin
  convert i‚ÇÇth_arrow (join F‚ÇÅ F‚ÇÇ e) i,
  { symmetry, apply right_part_of_join, },
end

def last_arrow_of_join {n‚ÇÅ : ‚Ñï} {D : Type*} [category D] (F : composable_morphisms n‚ÇÅ D) {Y Z : D} (f : Y ‚ü∂ Z) (e : F.right = Y) :
  (F.join (mk_1 f) e).ith_arrow (fin.last _) = arrow.mk f :=
begin
  convert i‚ÇÇth_arrow_of_join F (mk_1 f) e 0,
end

end composable_morphisms

def NonemptyFinLinOrd_to_Preorder : NonemptyFinLinOrd ‚•§ Preorder :=
{ obj := Œª X, ‚ü®X.Œ±‚ü©,
  map := Œª X Y f, f,
  map_id' := Œª X, rfl,
  map_comp' := Œª X Y Z f g, rfl, }

def to_Cat : simplex_category ‚•§ Cat := simplex_category.skeletal_functor ‚ãô NonemptyFinLinOrd_to_Preorder ‚ãô Preorder_to_Cat

@[simps]
def nerve (C : Type u) [category.{v} C] : sSet := 
{ obj := Œª Œî, (to_Cat.obj Œî.unop) ‚•§ C,
  map := Œª Œî‚ÇÅ Œî‚ÇÇ f, ((whiskering_left _ _ _).obj (to_Cat.map f.unop)).obj,
  map_id' := Œª Œî, begin
    erw to_Cat.map_id,
    ext A,
    apply category_theory.functor.ext,
    { intros X Y f,
      erw [id_comp, comp_id],
      refl, },
    { intro X,
      refl, },
  end,
  map_comp' := Œª Œî‚ÇÅ Œî‚ÇÇ Œî‚ÇÉ f g, rfl }

instance (C : Type*) [category C] (Œî : simplex_category·µí·µñ) : category ((nerve C).obj Œî) := (infer_instance : category ((to_Cat.obj Œî.unop) ‚•§ C))
  
namespace nerve

@[simps]
def functor : Cat ‚•§ sSet :=
{ obj := Œª C, nerve C,
  map := Œª C C' F,
  { app := Œª Œî, ((whiskering_right _ _ _).obj F).obj,
    naturality' := Œª Œî‚ÇÅ Œî‚ÇÇ f, by { ext G, refl, }, },
  map_id' := Œª C, begin
    ext Œî F,
    apply category_theory.functor.ext,
    { intros X Y f,
      erw [id_comp, comp_id],
      refl, },
    { intro X,
      refl, },
  end,
  map_comp' := Œª C C' C'' F F', rfl, }

end nerve

@[derive category]
def composable_morphisms_new (n : ‚Ñï) (C : Type u) [category.{v} C] := (nerve C).obj (op [n])

namespace composable_morphisms_new

variables {C : Type u} [category.{v} C] {n : ‚Ñï} (M : composable_morphisms_new n C)

def ith_object (i : fin (n+1)) : C := M.obj (ulift.up i)

def left : C := M.ith_object 0
def right : C := M.ith_object (fin.last _)

def map_of_le {i j : fin (n+1)} (hij : i ‚â§ j) : M.ith_object i ‚ü∂ M.ith_object j :=
M.map (hom_of_le hij)
def ith_map (i : fin n) : M.ith_object (i.cast_succ) ‚ü∂ M.ith_object i.succ := M.map_of_le
begin 
  rw fin.le_iff_coe_le_coe,
  simp only [fin.coe_cast_succ, fin.coe_succ, le_add_iff_nonneg_right, zero_le'],
end
def comp : M.left ‚ü∂ M.right := M.map_of_le (fin.le_last _)

def arrow_of_le {i j : fin (n+1)} (hij : i ‚â§ j) : arrow C := arrow.mk (M.map_of_le hij)
def ith_arrow (i : fin n) : arrow C := arrow.mk (M.ith_map i)
def arrow : arrow C := arrow.mk M.comp

end composable_morphisms_new

end category_theory
