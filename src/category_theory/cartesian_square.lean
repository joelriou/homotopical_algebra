/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import category_theory.limits.shapes.pullbacks
import category_theory.limits.shapes.finite_products
import category_theory.comma_op

noncomputable theory

open category_theory
open category_theory.category
open category_theory.limits

namespace category_theory

variables (C : Type*) [category C]

@[derive category]
def square := arrow (arrow C)

variable {C}

namespace arrow

@[ext]
lemma ext (f‚ÇÅ f‚ÇÇ : arrow C) (h‚ÇÅ : f‚ÇÅ.left = f‚ÇÇ.left) (h‚ÇÇ : f‚ÇÅ.right = f‚ÇÇ.right)
  (h‚ÇÉ : f‚ÇÅ.hom = eq_to_hom h‚ÇÅ ‚â´ f‚ÇÇ.hom ‚â´ eq_to_hom h‚ÇÇ.symm) : f‚ÇÅ = f‚ÇÇ :=
begin
  cases f‚ÇÅ,
  cases f‚ÇÇ,
  dsimp at h‚ÇÅ h‚ÇÇ h‚ÇÉ,
  substs h‚ÇÅ h‚ÇÇ h‚ÇÉ,
  erw [comp_id, id_comp],
end

lemma congr_hom {f‚ÇÅ f‚ÇÇ : arrow C} (h : f‚ÇÅ = f‚ÇÇ) :
  f‚ÇÅ.hom = eq_to_hom (by rw h) ‚â´ f‚ÇÇ.hom ‚â´ eq_to_hom (by rw h) :=
by { subst h, erw [id_comp, comp_id], }

lemma congr_left {f‚ÇÅ f‚ÇÇ : arrow C} (h : f‚ÇÅ = f‚ÇÇ) : f‚ÇÅ.left = f‚ÇÇ.left := by rw h
lemma congr_right {f‚ÇÅ f‚ÇÇ : arrow C} (h : f‚ÇÅ = f‚ÇÇ) : f‚ÇÅ.right = f‚ÇÇ.right := by rw h

def mk_iso {f g : arrow C} (e‚ÇÅ : f.left ‚âÖ g.left) (e‚ÇÇ : f.right ‚âÖ g.right)
  (fac : e‚ÇÅ.hom ‚â´ g.hom = f.hom ‚â´ e‚ÇÇ.hom) :
  f ‚âÖ g :=
{ hom :=
  { left := e‚ÇÅ.hom,
    right := e‚ÇÇ.hom,
    w' := fac, },
  inv :=
  { left := e‚ÇÅ.inv,
    right := e‚ÇÇ.inv,
    w' := begin
      dsimp,
      erw [‚Üê comp_id f.hom, ‚Üê e‚ÇÇ.hom_inv_id],
      slice_lhs 2 3 { rw ‚Üê fac, },
      slice_lhs 1 2 { rw e‚ÇÅ.inv_hom_id, },
      rw id_comp,
    end, },
  hom_inv_id' := begin
    ext,
    exacts [e‚ÇÅ.hom_inv_id, e‚ÇÇ.hom_inv_id],
  end,
  inv_hom_id' := begin
    ext,
    exacts [e‚ÇÅ.inv_hom_id, e‚ÇÇ.inv_hom_id],
  end, }

namespace hom

lemma congr_left {f‚ÇÅ f‚ÇÇ : arrow C} {œÜ‚ÇÅ œÜ‚ÇÇ : f‚ÇÅ ‚ü∂ f‚ÇÇ} (h : œÜ‚ÇÅ = œÜ‚ÇÇ) : œÜ‚ÇÅ.left = œÜ‚ÇÇ.left := by rw h
lemma congr_right {f‚ÇÅ f‚ÇÇ : arrow C} {œÜ‚ÇÅ œÜ‚ÇÇ : f‚ÇÅ ‚ü∂ f‚ÇÇ} (h : œÜ‚ÇÅ = œÜ‚ÇÇ) : œÜ‚ÇÅ.right = œÜ‚ÇÇ.right := by rw h

end hom

@[simps]
def coproduct_cofan {J : Type*} (f : J ‚Üí arrow C) [has_coproduct (Œª j, (f j).left)]
  [has_coproduct (Œª j, (f j).right)] : cofan f :=
{ X :=
  { left := ‚àê (Œª j, (f j).left),
    right := ‚àê (Œª j, (f j).right),
    hom := limits.sigma.map (Œª j, (f j).hom) },
  Œπ :=
  { app := Œª j,
    { left := limits.sigma.Œπ ((Œª j, (f j).left)) j,
      right := limits.sigma.Œπ ((Œª j, (f j).right)) j, } } }

@[simps]
def binary_coproduct_cofan (f‚ÇÅ f‚ÇÇ : arrow C) [has_binary_coproduct f‚ÇÅ.left f‚ÇÇ.left]
  [has_binary_coproduct f‚ÇÅ.right f‚ÇÇ.right] : binary_cofan f‚ÇÅ f‚ÇÇ :=
{ X :=
  { left := coprod f‚ÇÅ.left f‚ÇÇ.left,
    right := coprod f‚ÇÅ.right f‚ÇÇ.right,
    hom := coprod.map f‚ÇÅ.hom f‚ÇÇ.hom },
  Œπ :=
  { app := Œª j, begin
    cases j,
    { exact { left := coprod.inl, right := coprod.inl, }, },
    { exact { left := coprod.inr, right := coprod.inr, }, },
  end, } }

end arrow

namespace square

@[ext]
lemma ext (Sq‚ÇÅ Sq‚ÇÇ : square C) (h‚ÇÅ : Sq‚ÇÅ.left = Sq‚ÇÇ.left) (h‚ÇÇ : Sq‚ÇÅ.right = Sq‚ÇÇ.right)
  (h‚ÇÉ : Sq‚ÇÅ.hom = eq_to_hom h‚ÇÅ ‚â´ Sq‚ÇÇ.hom ‚â´ eq_to_hom h‚ÇÇ.symm) : Sq‚ÇÅ = Sq‚ÇÇ :=
begin
  cases Sq‚ÇÅ,
  cases Sq‚ÇÇ,
  dsimp at h‚ÇÅ h‚ÇÇ h‚ÇÉ,
  substs h‚ÇÅ h‚ÇÇ,
  congr,
  erw [h‚ÇÉ, id_comp, comp_id],
end

@[simps]
def mk {f g : arrow C} (sq : f ‚ü∂ g) : square C := arrow.mk sq

lemma mk_eq (Sq : square C) : square.mk Sq.hom = Sq :=
by { cases Sq, dsimp [arrow.mk], refl, }

@[simps]
def mk' (f g : arrow C) (sq : f ‚ü∂ g) : square C := square.mk sq

@[simps]
def mk'' {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : C} (l : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (r : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (t : X‚ÇÅ ‚ü∂ X‚ÇÇ) (b : Y‚ÇÅ ‚ü∂ Y‚ÇÇ)
  (fac : t ‚â´ r = l ‚â´ b) : square C := mk' (arrow.mk l) (arrow.mk r) (arrow.hom_mk fac)

@[simps]
def top (Sq : square C) : arrow C := arrow.mk Sq.hom.left

@[simps]
def bottom (Sq : square C) : arrow C := arrow.mk Sq.hom.right

@[simps]
def hom_vert (Sq : square C) : Sq.top ‚ü∂ Sq.bottom :=
{ left := Sq.left.hom,
  right := Sq.right.hom,
  w' := Sq.hom.w'.symm }

@[simps]
def flip (Sq : square C) : square C :=
{ left := Sq.top,
  right := Sq.bottom,
  hom := Sq.hom_vert }

lemma flip_flip (Sq : square C) : Sq.flip.flip = Sq := by tidy

@[simps]
def horizontal_comp (Sq‚ÇÅ Sq‚ÇÇ : square C) (e : Sq‚ÇÅ.right ‚âÖ Sq‚ÇÇ.left) : square C :=
square.mk' Sq‚ÇÅ.left Sq‚ÇÇ.right (Sq‚ÇÅ.hom ‚â´ e.hom ‚â´ Sq‚ÇÇ.hom)

@[simps]
def vertical_comp (Sq‚ÇÅ Sq‚ÇÇ : square C) (e : Sq‚ÇÅ.bottom ‚âÖ Sq‚ÇÇ.top) : square C :=
(square.mk' Sq‚ÇÅ.top Sq‚ÇÇ.bottom (Sq‚ÇÅ.hom_vert ‚â´ e.hom ‚â´ Sq‚ÇÇ.hom_vert)).flip

lemma vertical_comp_eq (Sq‚ÇÅ Sq‚ÇÇ : square C) (e : Sq‚ÇÅ.bottom ‚âÖ Sq‚ÇÇ.top) :
vertical_comp Sq‚ÇÅ Sq‚ÇÇ e = (horizontal_comp Sq‚ÇÅ.flip Sq‚ÇÇ.flip e).flip := by refl

@[simps]
def cone (Sq : square C) : pullback_cone Sq.right.hom Sq.bottom.hom :=
pullback_cone.mk Sq.top.hom Sq.left.hom Sq.hom.w'

@[simps]
def cocone (Sq : square C) : pushout_cocone Sq.top.hom Sq.left.hom :=
pushout_cocone.mk Sq.right.hom Sq.bottom.hom Sq.hom.w'

@[simp]
def is_cartesian (Sq : square C) := is_limit (Sq.cone)

@[simp]
def is_cocartesian (Sq : square C) := is_colimit (Sq.cocone)

def is_cocartesian_of_eq (Sq‚ÇÅ Sq‚ÇÇ : square C) (h‚ÇÄ : Sq‚ÇÅ = Sq‚ÇÇ) (h‚ÇÅ : Sq‚ÇÅ.is_cocartesian) :
  Sq‚ÇÇ.is_cocartesian :=
by { subst h‚ÇÄ, exact h‚ÇÅ, }

end square

@[simps]
def pushout_square {A‚ÇÄ A‚ÇÅ A‚ÇÇ : C} (f‚ÇÅ : A‚ÇÄ ‚ü∂ A‚ÇÅ) (f‚ÇÇ : A‚ÇÄ ‚ü∂ A‚ÇÇ) [has_pushout f‚ÇÅ f‚ÇÇ] : square C :=
square.mk' (arrow.mk f‚ÇÇ) (arrow.mk (pushout.inl : A‚ÇÅ ‚ü∂ pushout f‚ÇÅ f‚ÇÇ))
{ left := f‚ÇÅ,
  right := pushout.inr,
  w' := pushout.condition, }

@[simps]
def pushout_square' {A‚ÇÄ A‚ÇÅ A‚ÇÇ : C} (f‚ÇÅ : A‚ÇÄ ‚ü∂ A‚ÇÅ) (f‚ÇÇ : A‚ÇÄ ‚ü∂ A‚ÇÇ) [has_pushout f‚ÇÅ f‚ÇÇ] : square C :=
square.mk' (arrow.mk f‚ÇÅ) (arrow.mk (pushout.inr : A‚ÇÇ ‚ü∂ pushout f‚ÇÅ f‚ÇÇ))
{ left := f‚ÇÇ,
  right := pushout.inl,
  w' := pushout.condition.symm, }

lemma flip_pushout_square {A‚ÇÄ A‚ÇÅ A‚ÇÇ : C} (f‚ÇÅ : A‚ÇÄ ‚ü∂ A‚ÇÅ) (f‚ÇÇ : A‚ÇÄ ‚ü∂ A‚ÇÇ) [has_pushout f‚ÇÅ f‚ÇÇ] :
  pushout_square' f‚ÇÅ f‚ÇÇ = (pushout_square f‚ÇÅ f‚ÇÇ).flip := by refl

@[simps]
def coprod_square (A‚ÇÅ A‚ÇÇ : C) [has_initial C] [has_binary_coproduct A‚ÇÅ A‚ÇÇ] : square C :=
square.mk' (arrow.mk (initial.to A‚ÇÇ)) (arrow.mk (coprod.inl : A‚ÇÅ ‚ü∂ coprod A‚ÇÅ A‚ÇÇ ))
{ left := initial.to A‚ÇÅ,
  right := coprod.inr,
  w' := by { dsimp, apply subsingleton.elim, }, }

@[ext]
lemma cocone.ext {J C : Type*} [category J] [category C] {F : J ‚•§ C} (c‚ÇÅ c‚ÇÇ : cocone F)
  (hX : c‚ÇÅ.X = c‚ÇÇ.X) (hŒπ : c‚ÇÅ.Œπ = c‚ÇÇ.Œπ ‚â´ eq_to_hom (by rw hX)) : c‚ÇÅ = c‚ÇÇ :=
begin
  cases c‚ÇÅ,
  cases c‚ÇÇ,
  dsimp at hX,
  subst hX,
  congr,
  { convert hŒπ,
    erw comp_id, },
end

def pushout_square_is_cocartesian {A‚ÇÄ A‚ÇÅ A‚ÇÇ : C} (f‚ÇÅ : A‚ÇÄ ‚ü∂ A‚ÇÅ) (f‚ÇÇ : A‚ÇÄ ‚ü∂ A‚ÇÇ) [has_pushout f‚ÇÅ f‚ÇÇ] :
  (pushout_square f‚ÇÅ f‚ÇÇ).is_cocartesian :=
begin
  dsimp [square.is_cocartesian],
  convert limits.colimit.is_colimit (span f‚ÇÅ f‚ÇÇ),
  ext x,
  { cases x,
    { have h := (colimit.cocone (span f‚ÇÅ f‚ÇÇ)).Œπ.naturality walking_span.hom.fst,
      exact h, },
    { cases x; { erw comp_id, refl, }, }, },
  { refl, }
end

def coprod_square_is_cocartesian (A‚ÇÅ A‚ÇÇ : C) [has_initial C] [has_binary_coproduct A‚ÇÅ A‚ÇÇ] :
  (coprod_square A‚ÇÅ A‚ÇÇ).is_cocartesian :=
begin
  dsimp [square.is_cocartesian],
  refine pushout_cocone.is_colimit_aux _
    (Œª s, coprod.desc (s.Œπ.app walking_span.left) (s.Œπ.app walking_span.right)) _ _ _,
  { intro s, erw [coprod.inl_desc], },
  { intro s, erw [coprod.inr_desc], },
  { intros s m hm,
    dsimp [square.cocone],
    ext,
    { erw [coprod.inl_desc, ‚Üê hm, square.cocone_Œπ_app, coprod_square_right_hom], },
    { erw [coprod.inr_desc, ‚Üê hm, square.cocone_Œπ_app, coprod_square_hom_right], }, },
end

def coprod_inl_with_identity_is_cocartesian (f : arrow C) (A : C) [hl : has_binary_coproduct f.left A]
  [hr : has_binary_coproduct f.right A] :
  (square.mk (@arrow.binary_coproduct_cofan _ _ f (arrow.mk (ùüô A)) hl hr).inl).is_cocartesian :=
begin
  dsimp [square.is_cocartesian],
  refine limits.pushout_cocone.is_colimit_aux _
    (Œª s, coprod.desc (s.Œπ.app walking_span.right) (coprod.inr ‚â´ s.Œπ.app walking_span.left)) _ _ _,
  { intro s,
    dsimp [square.mk, square.cocone],
    ext,
    { simp only [coprod.map_desc, coprod.inl_desc],
      erw [s.Œπ.naturality walking_span.hom.snd],
      erw ‚Üê s.Œπ.naturality walking_span.hom.fst,
      refl, },
    { simp only [coprod.map_desc, id_comp, coprod.inr_desc], }, },
  { intro s,
    dsimp [square.mk, square.cocone, arrow.binary_coproduct_cofan],
    simp, },
  { intros s m hm,
    ext,
    { simpa only [‚Üê hm walking_span.right, coprod.inl_desc], },
    { erw [coprod.inr_desc, ‚Üê hm walking_span.left, coprod.inr_map_assoc, id_comp], }, },
end

namespace square

namespace is_cocartesian

@[protected]
def flip {Sq : square C} (hSq : Sq.is_cocartesian) : Sq.flip.is_cocartesian :=
pushout_cocone.flip_is_colimit hSq

@[protected]
def unflip {Sq : square C} (hSq : Sq.flip.is_cocartesian) : Sq.is_cocartesian :=
by { rw ‚Üê Sq.flip_flip,
exact is_cocartesian.flip hSq, }

@[protected]
def has_pushout {Sq : square C} (hSq : Sq.is_cocartesian) : has_pushout Sq.top.hom Sq.left.hom :=
‚ü®nonempty.intro
  { cocone := Sq.cocone,
  is_colimit := hSq, }‚ü©

@[simps]
def couniversal_lift {Sq : square C} (hSq : Sq.is_cocartesian) (Sq' : square C)
  (h‚ÇÅ : Sq.top = Sq'.top) (h‚ÇÇ : Sq.left = Sq'.left) : Sq ‚ü∂ Sq' :=
begin
  let œÜ‚ÇÅ : Sq.left ‚ü∂ Sq'.left :=
  { left := eq_to_hom (arrow.congr_left h‚ÇÇ),
    right := eq_to_hom (arrow.congr_right h‚ÇÇ),
    w' := by simp only [arrow.congr_hom h‚ÇÇ, eq_to_hom_map, assoc,
      eq_to_hom_trans, eq_to_hom_refl, comp_id], },
  have eq : Sq.top.hom ‚â´ eq_to_hom (by exact arrow.congr_right h‚ÇÅ) ‚â´ Sq'.right.hom =
    Sq.left.hom ‚â´ eq_to_hom (by exact arrow.congr_right h‚ÇÇ) ‚â´ Sq'.bottom.hom,
  { erw [arrow.congr_hom h‚ÇÅ, arrow.congr_hom h‚ÇÇ],
    simpa only [top_hom, assoc, eq_to_hom_trans_assoc, eq_to_hom_refl,
      id_comp, arrow.w, bottom_hom], },
  let œÜ‚ÇÇ : Sq.right ‚ü∂ Sq'.right :=
  { left := eq_to_hom (arrow.congr_right h‚ÇÅ),
    right := hSq.desc (pushout_cocone.mk _ _ eq),
    w' := (hSq.fac (pushout_cocone.mk _ _ eq) (walking_span.left)).symm, },
  exact
  { left := œÜ‚ÇÅ,
    right := œÜ‚ÇÇ,
    w' := begin
      ext,
      { have h := arrow.congr_hom h‚ÇÅ,
        dsimp at ‚ä¢ h,
        simp only [h, assoc, eq_to_hom_trans, eq_to_hom_refl, comp_id], },
      { exact (hSq.fac (pushout_cocone.mk _ _ eq) (walking_span.right)).symm, },
    end },
end

lemma couniversal_uniq {Sq : square C} (hSq : Sq.is_cocartesian) (Sq' : square C)
  (h‚ÇÅ : Sq.top = Sq'.top) (h‚ÇÇ : Sq.left = Sq'.left) (œÜ : Sq ‚ü∂ Sq')
  (h‚ÇÉ : œÜ.left.left = eq_to_hom (arrow.congr_left h‚ÇÇ))
  (h‚ÇÑ : œÜ.left.right = eq_to_hom (arrow.congr_right h‚ÇÇ))
  (h‚ÇÖ : œÜ.right.left = eq_to_hom (arrow.congr_right h‚ÇÅ)) :
  œÜ = hSq.couniversal_lift Sq' h‚ÇÅ h‚ÇÇ :=
begin
  ext,
  { simp only [h‚ÇÉ, couniversal_lift_left_left], },
  { simp only [h‚ÇÑ, couniversal_lift_left_right], },
  { simp only [h‚ÇÖ, couniversal_lift_right_left], },
  { apply hSq.uniq (pushout_cocone.mk _ _ _) œÜ.right.right,
    rintro (_|_|_),
    { simp only [cocone_Œπ_app, assoc, pushout_cocone.mk_Œπ_app_zero, top_hom],
      have h := arrow.hom.congr_right œÜ.w,
      dsimp at h,
      erw [‚Üê h, h‚ÇÑ],
      have h' := arrow.congr_hom h‚ÇÅ,
      have h'' := arrow.congr_hom h‚ÇÇ,
      dsimp at h' h'',
      simp only [h', h'', assoc, eq_to_hom_trans_assoc, eq_to_hom_refl, id_comp, arrow.w], },
    { simp only [cocone_Œπ_app, pushout_cocone.mk_Œπ_app_left],
      erw [‚Üê œÜ.right.w, h‚ÇÖ],
      refl, },
    { simp only [cocone_Œπ_app, pushout_cocone.mk_Œπ_app_right, bottom_hom],
      have h := arrow.hom.congr_right œÜ.w,
      dsimp at h,
      erw [‚Üê h, h‚ÇÑ],
      refl, } },
end

lemma endo_is_id {Sq : square C} (hSq : Sq.is_cocartesian) (œÜ : Sq ‚ü∂ Sq)
  (h‚ÇÅ : œÜ.left.left = ùüô _)
  (h‚ÇÑ : œÜ.left.right = ùüô _)
  (h‚ÇÖ : œÜ.right.left = ùüô _) :
  œÜ = ùüô _ :=
begin
  rw [hSq.couniversal_uniq Sq rfl rfl œÜ, hSq.couniversal_uniq Sq rfl rfl (ùüô _)],
  all_goals { rw eq_to_hom_refl, try { refl, }, try { assumption }, },
end

def iso_pushout_square {Sq : square C} (hSq : Sq.is_cocartesian) :
  Sq ‚âÖ @pushout_square _ _ _ _ _ Sq.top.hom Sq.left.hom (hSq.has_pushout) :=
begin
  haveI := hSq.has_pushout,
  let Sq' := pushout_square Sq.top.hom Sq.left.hom,
  let hSq' : Sq'.is_cocartesian := pushout_square_is_cocartesian _ _,
  exact
  { hom := hSq.couniversal_lift Sq' (by tidy) (by tidy),
    inv := hSq'.couniversal_lift Sq (by tidy) (by tidy),
    hom_inv_id' := begin
      apply hSq.endo_is_id,
      all_goals { dsimp, simpa only [comp_id], },
    end,
    inv_hom_id' := begin
      apply hSq'.endo_is_id,
      all_goals { dsimp, simp only [comp_id], },
    end, }
end

end is_cocartesian

namespace is_cartesian

def has_pullback {Sq : square C} (hSq : Sq.is_cartesian) : has_pullback Sq.right.hom Sq.bottom.hom :=
‚ü®nonempty.intro
  { cone := Sq.cone,
    is_limit := hSq, }‚ü©

end is_cartesian

end square

def pushout_square'_is_cocartesian {A‚ÇÄ A‚ÇÅ A‚ÇÇ : C} (f‚ÇÅ : A‚ÇÄ ‚ü∂ A‚ÇÅ) (f‚ÇÇ : A‚ÇÄ ‚ü∂ A‚ÇÇ) [has_pushout f‚ÇÅ f‚ÇÇ] :
  (pushout_square' f‚ÇÅ f‚ÇÇ).is_cocartesian :=
begin
  rw flip_pushout_square,
  apply square.is_cocartesian.flip,
  apply pushout_square_is_cocartesian,
end

def horizontal_comp_is_cocartesian (i‚ÇÅ i‚ÇÇ i‚ÇÉ : arrow C) (sq‚ÇÅ‚ÇÇ : i‚ÇÅ ‚ü∂ i‚ÇÇ) (sq‚ÇÇ‚ÇÉ : i‚ÇÇ ‚ü∂ i‚ÇÉ)
  (h‚ÇÅ‚ÇÇ : (square.mk sq‚ÇÅ‚ÇÇ).is_cocartesian) (h‚ÇÇ‚ÇÉ : (square.mk sq‚ÇÇ‚ÇÉ).is_cocartesian) :
  (square.mk (sq‚ÇÅ‚ÇÇ ‚â´ sq‚ÇÇ‚ÇÉ)).is_cocartesian :=
begin
  rcases i‚ÇÅ with ‚ü®X‚ÇÅ, Y‚ÇÅ, i‚ÇÅ‚ü©,
  rcases i‚ÇÇ with ‚ü®X‚ÇÇ, Y‚ÇÇ, i‚ÇÇ‚ü©,
  rcases i‚ÇÉ with ‚ü®X‚ÇÉ, Y‚ÇÉ, i‚ÇÉ‚ü©,
  rcases sq‚ÇÅ‚ÇÇ with ‚ü®f‚ÇÅ, g‚ÇÅ, w‚ÇÅ‚ÇÇ‚ü©,
  rcases sq‚ÇÇ‚ÇÉ with ‚ü®f‚ÇÇ, g‚ÇÇ, w‚ÇÇ‚ÇÉ‚ü©,
  apply square.is_cocartesian.unflip,
  exact big_square_is_pushout f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÉ w‚ÇÅ‚ÇÇ.symm w‚ÇÇ‚ÇÉ.symm h‚ÇÇ‚ÇÉ.flip h‚ÇÅ‚ÇÇ.flip,
end

namespace square

def is_cocartesian_of_horizontal_is_iso (Sq : square C) (hSq : is_iso Sq.hom) : Sq.is_cocartesian :=
begin
  letI := hSq,
  let e := as_iso Sq.hom,
  let e‚ÇÅ := (comma.fst _ _).map_iso e,
  let e‚ÇÇ := (comma.snd _ _).map_iso e,
  dsimp at *,
  refine pushout_cocone.is_colimit_aux _ (Œª s, e‚ÇÇ.inv ‚â´ s.Œπ.app walking_span.right) _ _ _,
  { intro s,
    dsimp [cocone],
    have h‚ÇÅ := s.Œπ.naturality walking_span.hom.fst,
    have h‚ÇÇ := s.Œπ.naturality walking_span.hom.snd,
    erw comp_id at h‚ÇÅ h‚ÇÇ,
    have he := e.inv.w',
    dsimp at he h‚ÇÅ h‚ÇÇ,
    erw [‚Üê assoc, ‚Üê he, assoc, h‚ÇÇ, ‚Üê h‚ÇÅ],
    simp only [arrow.inv_left, is_iso.inv_hom_id_assoc], },
  { intro s,
    dsimp [cocone],
    simp only [arrow.inv_right, is_iso.hom_inv_id_assoc], },
  { intros s m hm,
    rw ‚Üê hm walking_span.right,
    dsimp [cocone],
    simp only [arrow.inv_right, is_iso.inv_hom_id_assoc], },
end

def is_cocartesian_of_vertical_is_iso (Sq : square C) (h : is_iso Sq.flip.hom) : Sq.is_cocartesian :=
(is_cocartesian_of_horizontal_is_iso Sq.flip h).unflip

def is_cocartesian_of_horizontal_comp (Sq‚ÇÅ Sq‚ÇÇ : square C) (e : Sq‚ÇÅ.right ‚âÖ Sq‚ÇÇ.left)
  (h‚ÇÅ : Sq‚ÇÅ.is_cocartesian) (h‚ÇÇ : Sq‚ÇÇ.is_cocartesian) : 
  (Sq‚ÇÅ.horizontal_comp Sq‚ÇÇ e).is_cocartesian :=
begin
  apply horizontal_comp_is_cocartesian _ _ _ Sq‚ÇÅ.hom _ h‚ÇÅ,
  refine horizontal_comp_is_cocartesian _ _ _ e.hom Sq‚ÇÇ.hom _ h‚ÇÇ,
  exact is_cocartesian_of_horizontal_is_iso _ (is_iso.of_iso e),
end

def is_cocartesian_of_vertical_comp (Sq‚ÇÅ Sq‚ÇÇ : square C) (e : Sq‚ÇÅ.bottom ‚âÖ Sq‚ÇÇ.top)
  (h‚ÇÅ : Sq‚ÇÅ.is_cocartesian) (h‚ÇÇ : Sq‚ÇÇ.is_cocartesian) : 
  (Sq‚ÇÅ.vertical_comp Sq‚ÇÇ e).is_cocartesian :=
begin
  rw square.vertical_comp_eq,
  apply square.is_cocartesian.flip,
  exact is_cocartesian_of_horizontal_comp Sq‚ÇÅ.flip Sq‚ÇÇ.flip e h‚ÇÅ.flip h‚ÇÇ.flip,
end

def is_cocartesian_of_iso (Sq‚ÇÅ Sq‚ÇÇ : square C) (e : Sq‚ÇÅ ‚âÖ Sq‚ÇÇ) (h : Sq‚ÇÅ.is_cocartesian) :
  Sq‚ÇÇ.is_cocartesian :=
begin
  let e‚ÇÅ := (comma.fst _ _).map_iso e.symm,
  let e‚ÇÇ := (comma.snd _ _).map_iso e,
  have h‚ÇÅ‚ÇÉ := is_cocartesian_of_horizontal_comp _ Sq‚ÇÅ (by refl)
    (is_cocartesian_of_horizontal_is_iso (square.mk e‚ÇÅ.hom) (is_iso.of_iso e‚ÇÅ)) h,
  have h‚ÇÅ‚ÇÑ := is_cocartesian_of_horizontal_comp _ (square.mk e‚ÇÇ.hom) (by refl)
    h‚ÇÅ‚ÇÉ (is_cocartesian_of_horizontal_is_iso _ (is_iso.of_iso e‚ÇÇ)),
  refine is_cocartesian_of_eq _ _ _ h‚ÇÅ‚ÇÑ,
  ext1; try { refl, },
  { have h‚ÇÅ := e.hom.w,
    have h‚ÇÇ := e‚ÇÅ.hom_inv_id,
    dsimp [horizontal_comp] at h‚ÇÅ h‚ÇÇ ‚ä¢,
    erw [id_comp, id_comp, assoc, comp_id, id_comp, ‚Üê h‚ÇÅ, ‚Üê assoc, h‚ÇÇ, id_comp], },
end

def right_square_is_cocartesian' (i‚ÇÅ i‚ÇÇ i‚ÇÉ : arrow C) (sq‚ÇÅ‚ÇÇ : i‚ÇÅ ‚ü∂ i‚ÇÇ) (sq‚ÇÇ‚ÇÉ : i‚ÇÇ ‚ü∂ i‚ÇÉ)
  (h‚ÇÅ‚ÇÇ : (square.mk sq‚ÇÅ‚ÇÇ).is_cocartesian) (h‚ÇÅ‚ÇÉ : (square.mk (sq‚ÇÅ‚ÇÇ ‚â´ sq‚ÇÇ‚ÇÉ)).is_cocartesian) :
  (square.mk sq‚ÇÇ‚ÇÉ).is_cocartesian :=
begin
  rcases i‚ÇÅ with ‚ü®X‚ÇÅ, Y‚ÇÅ, i‚ÇÅ‚ü©,
  rcases i‚ÇÇ with ‚ü®X‚ÇÇ, Y‚ÇÇ, i‚ÇÇ‚ü©,
  rcases i‚ÇÉ with ‚ü®X‚ÇÉ, Y‚ÇÉ, i‚ÇÉ‚ü©,
  rcases sq‚ÇÅ‚ÇÇ with ‚ü®f‚ÇÅ, g‚ÇÅ, w‚ÇÅ‚ÇÇ‚ü©,
  rcases sq‚ÇÇ‚ÇÉ with ‚ü®f‚ÇÇ, g‚ÇÇ, w‚ÇÇ‚ÇÉ‚ü©,
  apply square.is_cocartesian.unflip,
  exact right_square_is_pushout f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÉ w‚ÇÅ‚ÇÇ.symm w‚ÇÇ‚ÇÉ.symm h‚ÇÅ‚ÇÇ.flip h‚ÇÅ‚ÇÉ.flip,
end

def right_square_is_cocartesian (Sq‚ÇÇ Sq‚ÇÅ : square C) (e : Sq‚ÇÅ.right ‚âÖ Sq‚ÇÇ.left)
  (h‚ÇÅ : Sq‚ÇÅ.is_cocartesian) (h‚ÇÅ‚ÇÇ : (Sq‚ÇÅ.horizontal_comp Sq‚ÇÇ e).is_cocartesian) :
  Sq‚ÇÇ.is_cocartesian :=
begin
  convert right_square_is_cocartesian' _ _ _ (Sq‚ÇÅ.hom ‚â´ e.hom) Sq‚ÇÇ.hom _ _,
  { rw Sq‚ÇÇ.mk_eq, },
  { refine horizontal_comp_is_cocartesian _ _ _ Sq‚ÇÅ.hom e.hom _ _,
    { rw Sq‚ÇÅ.mk_eq,
      exact h‚ÇÅ, },
    { apply is_cocartesian_of_horizontal_is_iso,
      exact is_iso.of_iso e, }, },
  { have eq : mk ((Sq‚ÇÅ.hom ‚â´ e.hom) ‚â´ Sq‚ÇÇ.hom) = Sq‚ÇÅ.horizontal_comp Sq‚ÇÇ e := by tidy,
    convert h‚ÇÅ‚ÇÇ, },
end

def is_cocartesian_of_top_comp (Sq‚ÇÇ Sq‚ÇÅ : square C) (e : Sq‚ÇÅ.bottom ‚âÖ Sq‚ÇÇ.top)
  (h‚ÇÅ : Sq‚ÇÅ.is_cocartesian) (h‚ÇÅ‚ÇÇ : (Sq‚ÇÅ.vertical_comp Sq‚ÇÇ e).is_cocartesian) :
  Sq‚ÇÇ.is_cocartesian :=
(right_square_is_cocartesian Sq‚ÇÇ.flip Sq‚ÇÅ.flip e h‚ÇÅ.flip h‚ÇÅ‚ÇÇ.flip).unflip

end square

end category_theory

