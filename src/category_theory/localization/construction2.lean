/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import category_theory.quotient
import category_theory.path_category
import category_theory.category.Quiv
import category_theory.equivalence
import category_theory.nerve

noncomputable theory

open category_theory
open category_theory.category

namespace category_theory

namespace quotient

lemma functor_map_surj {C : Type*} [category C] (r : hom_rel C) (s t : C) :
  function.surjective (Œª (f : s ‚ü∂ t), (functor r).map f) :=
begin
  intro f,
  cases surjective_quot_mk _ f with g hg,
  use [g, hg],
end

end quotient

namespace functor

lemma congr_inv_of_congr_hom {D‚ÇÅ D‚ÇÇ : Type*} [category D‚ÇÅ] [category D‚ÇÇ] (F G : D‚ÇÅ ‚•§ D‚ÇÇ)
  {X Y : D‚ÇÅ} (e : X ‚âÖ Y) (hX : F.obj X = G.obj X) (hY : F.obj Y = G.obj Y)
  (h‚ÇÇ : F.map e.hom = eq_to_hom (by rw hX) ‚â´ G.map e.hom ‚â´ eq_to_hom (by rw hY)) :
F.map e.inv = eq_to_hom (by rw hY) ‚â´ G.map e.inv ‚â´ eq_to_hom (by rw hX) :=
by simp only [‚Üê is_iso.iso.inv_hom e, functor.map_inv, h‚ÇÇ, is_iso.inv_comp, inv_eq_to_hom, category.assoc]

lemma congr_map {D D' : Type*} [category D] [category D'] (F : D ‚•§ D')
{X Y : D} {f g : X ‚ü∂ Y} (h : f = g) : F.map f = F.map g :=
by { subst h, }

end functor

universes v v' v'' u u' u''

variables {C : Type u} [category.{v} C]
variables {D : Type u'} [category.{v'} D]
variables {E : Type u''} [category.{v''} E]

namespace arrow

def is_inverted_by (f : arrow C) (F : C ‚•§ D) : Prop := is_iso (F.map f.hom)

def is_inverted_by_of_comp (f : arrow C) (F : C ‚•§ D) (G : D ‚•§ E) (hf : f.is_inverted_by F) : f.is_inverted_by (F ‚ãô G) :=
begin
  haveI : is_iso (F.map f.hom) := hf,
  exact (infer_instance : is_iso (G.map (F.map f.hom))),
end

end arrow

namespace arrow_class

def is_inverted_by (W : arrow_class C) (F : C ‚•§ D) : Prop :=
‚àÄ (f : W), f.1.is_inverted_by F

def is_inverted_by_of_comp (W : arrow_class C) (F : C ‚•§ D) (G : D ‚•§ E) (hW : W.is_inverted_by F) : W.is_inverted_by (F ‚ãô G) :=
by { intro w, exact w.1.is_inverted_by_of_comp F G (hW w), }

structure loc_quiver (W : arrow_class C) := (obj : C)

variable (W : arrow_class C)

instance : quiver (loc_quiver W) :=
{ hom := Œª A B, (A.obj ‚ü∂ B.obj) ‚äï { f : B.obj ‚ü∂ A.obj // arrow.mk f ‚àà W} }

namespace localization

def Œπ (X : C) : paths (loc_quiver W) := ‚ü®X‚ü©

@[simp]
def œà‚ÇÅ' {X Y : paths (loc_quiver W)} (f : X.obj ‚ü∂ Y.obj) : X ‚ü∂ Y := paths.of.map (sum.inl f)
@[simp]
def œà‚ÇÅ {X Y : C} (f : X ‚ü∂ Y) : Œπ W X ‚ü∂ Œπ W Y := paths.of.map (sum.inl f)
@[simp]
def œà‚ÇÇ' {X Y : paths (loc_quiver W)} (w : X.obj ‚ü∂ Y.obj) (hw : arrow.mk w ‚àà W) : Y ‚ü∂ X := paths.of.map (sum.inr ‚ü®w, hw‚ü©)
@[simp]
def œà‚ÇÇ {X Y : C} (w : X ‚ü∂ Y) (hw : arrow.mk w ‚àà W) : Œπ W Y ‚ü∂ Œπ W X := œà‚ÇÇ' W w hw

inductive relations ‚¶ÉX Y : (paths (loc_quiver W))‚¶Ñ : (X ‚ü∂ Y) ‚Üí (X ‚ü∂ Y) ‚Üí Prop
| id (œÜ : X ‚ü∂ Y) : relations (œà‚ÇÅ' W (ùüô X.obj) ‚â´ œÜ) œÜ
| comp {Z : paths (loc_quiver W)} (f : X.obj ‚ü∂ Z.obj) (g : Z.obj ‚ü∂ Y.obj) : relations (œà‚ÇÅ' W (f ‚â´ g)) (œà‚ÇÅ' W f ‚â´ œà‚ÇÅ' W g)
| Winv‚ÇÅ {Z : paths (loc_quiver W)} (w : X.obj ‚ü∂ Z.obj) (hw : arrow.mk w ‚àà W) (œÜ : X ‚ü∂ Y) : relations (œà‚ÇÅ' W w ‚â´ œà‚ÇÇ' W w hw ‚â´ œÜ) œÜ
| Winv‚ÇÇ {Z : paths (loc_quiver W)} (w : Z.obj ‚ü∂ Y.obj) (hw : arrow.mk w ‚àà W) (œÜ : X ‚ü∂ Y) : relations (œÜ ‚â´ œà‚ÇÇ' W w hw ‚â´ œà‚ÇÅ' W w) œÜ

end localization

@[derive category]
def localization := category_theory.quotient (localization.relations W)

open localization

namespace localization

variable (W)

def Q : C ‚•§ W.localization :=
{ obj := Œª X, (quotient.functor _).obj (paths.of.obj ‚ü®X‚ü©),
  map := Œª X Y f, (quotient.functor _).map (œà‚ÇÅ W f),
  map_id' := Œª X, by convert quotient.sound _ (@relations.id _ _ W (paths.of.obj ‚ü®X‚ü©) _ (ùüô _)),
  map_comp' := Œª X Z Y f g, quotient.sound _
    (@relations.comp _ _ W (paths.of.obj ‚ü®X‚ü©) (paths.of.obj ‚ü®Y‚ü©) (paths.of.obj ‚ü®Z‚ü©) f g), }

variable {W}

def Wiso {X Y : C} (w : X ‚ü∂ Y) (hw : arrow.mk w ‚àà W) : iso ((Q W).obj X) ((Q W).obj Y) :=
{ hom := (Q W).map w,
  inv := (quotient.functor _).map (paths.of.map (sum.inr ‚ü®w, hw‚ü©)),
  hom_inv_id' := quotient.sound _ (@relations.Winv‚ÇÅ _ _ W
    (paths.of.obj ‚ü®X‚ü©) _ (paths.of.obj ‚ü®Y‚ü©) w hw (ùüô _)),
  inv_hom_id' := quotient.sound _ (@relations.Winv‚ÇÇ _ _ W
    (paths.of.obj ‚ü®Y‚ü©) (paths.of.obj ‚ü®Y‚ü©) (paths.of.obj ‚ü®X‚ü©) w hw (ùüô _)), }

def Wiso' (w : W) : iso ((Q W).obj w.1.left) ((Q W).obj w.1.right) :=
Wiso w.1.hom (by { rw arrow.mk_eq w.1, exact w.2, })


--lemma Wiso_inv_eq {X Y : C} (w : X ‚ü∂ Y) (hw : arrow.mk w ‚àà W) : (quotient.functor (relations W)).map (œà‚ÇÇ w) = (Wiso w).inv := by refl

@[simps]
def lift_to_loc_quiver {D : Type*} [category D] (G : C ‚•§ D) (hG : W.is_inverted_by G) :
  prefunctor (loc_quiver W) D :=
{ obj := by { rintro ‚ü®X‚ü©, exact G.obj X, },
  map := begin
    rintros ‚ü®X‚ü© ‚ü®Y‚ü© (f|‚ü®g, hg‚ü©),
    { exact G.map f, },
    { haveI : is_iso (G.map g) := hG ‚ü®arrow.mk g, hg‚ü©,
      exact inv (G.map g), },
  end }

/-- Fix category_theory.theory.Quiv.lean-/
@[simps]
def lift_to_path_category {D : Type u'} [category.{v'} D] (G : C ‚•§ D) (hG : W.is_inverted_by G) :
  paths (loc_quiver W) ‚•§ D :=
{ obj := Œª X, (lift_to_loc_quiver G hG).obj X,
  map := Œª X Y f, compose_path ((lift_to_loc_quiver G hG).map_path f), }

lemma W_is_inverted_by_Q : W.is_inverted_by (Q W) := Œª w, is_iso.of_iso (Wiso' w)

def lift {D : Type u'} [category.{v'} D] (G : C ‚•§ D) (hG : W.is_inverted_by G) :
  localization W ‚•§ D :=
begin
  apply quotient.lift (relations W) (lift_to_path_category G hG),
  rintro ‚ü®X‚ü© ‚ü®Y‚ü© f‚ÇÅ f‚ÇÇ r,
  rcases r with (_|‚ü®‚ü®Z‚ü©, f, g‚ü©|‚ü®‚ü®Z‚ü©, w, hw‚ü©|‚ü®‚ü®Z‚ü©, w, hw‚ü©),
  tidy,
end
/-
  { dsimp,
    simp only [prefunctor.map_path_comp, prefunctor.map_path_comp', compose_path_comp],
    dsimp,
    simp only [functor.map_id, id_comp], },
  { dsimp,
    simp only [functor.map_comp, id_comp], },
  { dsimp,
    simp only [prefunctor.map_path_comp, prefunctor.map_path_comp', compose_path_comp],
    dsimp,
    simp only [id_comp, is_iso.hom_inv_id_assoc], },
  { dsimp,
    simp only [assoc, is_iso.inv_hom_id, comp_id], }, -/

@[simp]
lemma fac {D : Type u'} [category.{v'} D] (G : C ‚•§ D) (hG : W.is_inverted_by G) :
  Q W ‚ãô lift G hG = G :=
begin
  apply functor.ext,
  { intros X Y f,
    simp only [functor.comp_map, eq_to_hom_refl, comp_id, id_comp],
    dsimp [lift, lift_to_path_category, Q],
    rw id_comp, },
  { intro X,
    refl, }
end

lemma uniq {D : Type*} [category D] (G‚ÇÅ G‚ÇÇ : localization W ‚•§ D) (h : Q W ‚ãô G‚ÇÅ = Q W ‚ãô G‚ÇÇ) : G‚ÇÅ = G‚ÇÇ :=
begin
  suffices h' : (quotient.functor (relations W)) ‚ãô G‚ÇÅ = (quotient.functor (relations W)) ‚ãô G‚ÇÇ,
  { apply functor.ext,
    { rintros ‚ü®‚ü®X‚ü©‚ü© ‚ü®‚ü®Y‚ü©‚ü© ‚ü®f‚ü©,
      convert functor.congr_hom h' f, },
    { rintro ‚ü®‚ü®X‚ü©‚ü©,
      convert functor.congr_obj h X, }, },
  { apply paths.ext_functor,
    { rintro ‚ü®X‚ü© ‚ü®Y‚ü© f,
      cases f,
      { convert functor.congr_hom h f, },
      { rcases f with ‚ü®w, hw‚ü©,
        dsimp at w,
        have hŒ± : (Wiso w hw).hom = (Q W).map w := rfl,
        have h' := functor.congr_hom h w,
        simp only [functor.comp_map, ‚Üê hŒ±] at h',
        refine functor.congr_inv_of_congr_hom G‚ÇÅ G‚ÇÇ _ _ _ h',
        { convert functor.congr_obj h Y, },
        { convert functor.congr_obj h X, }, }, },
    { ext X,
      cases X,
      have eq := functor.congr_obj h X,
      exact eq, }, }
end
#exit

instance (w : W) : is_iso ((Q W).map w.1.hom) := is_iso.of_iso (Wiso w)

variable (W)

def Q_obj_bijection : C ‚âÉ W.localization :=
{ to_fun := (Q W).obj,
  inv_fun := Œª X, X.as.1,
  left_inv := Œª X, begin refl, end,
  right_inv := Œª X, by { cases X, cases X, refl, }, }

variable {W}

end localization

variable (L : C ‚•§ D)

structure is_localization (W : arrow_class C) (L : C ‚•§ D) :=
(inverts_W : W.is_inverted_by L)
(is_equivalence : is_equivalence (localization.lift L inverts_W))

structure is_strict_localization (W : arrow_class C) (L : C ‚•§ D) extends is_localization W L :=
(is_isomorphism : (localization.lift L inverts_W ‚ãô is_equivalence.inverse) = ùü≠ _
  ‚àß (is_equivalence.inverse ‚ãô localization.lift L inverts_W) = ùü≠ _)

structure is_strict_localization_fixed_target
(W : arrow_class C) (F : C ‚•§ D)  (E : Type u'') [category.{v''} E] :=
  (inverts_W : W.is_inverted_by F)
  (lift : Œ† (G : C ‚•§ E) (hG : W.is_inverted_by G), D ‚•§ E)
  (fac : ‚àÄ (G : C ‚•§ E) (hG : W.is_inverted_by G), F ‚ãô lift G hG = G)
  (uniq : ‚àÄ (G‚ÇÅ G‚ÇÇ : D ‚•§ E), F ‚ãô G‚ÇÅ = F ‚ãô G‚ÇÇ ‚Üí G‚ÇÅ = G‚ÇÇ)

namespace localization

def universal_property {E : Type u''} [category.{v''} E] :
  W.is_strict_localization_fixed_target (localization.Q W) E :=
{ inverts_W := W_is_inverted_by_Q,
  lift := lift,
  fac := fac,
  uniq := uniq }

end localization

lemma strict_localization_is_ess_unique_on_obj {W : arrow_class C} {D' : Type*} [category D']
  (F‚ÇÅ : C ‚•§ D) (F‚ÇÇ : C ‚•§ D')
  (L‚ÇÅ : W.is_strict_localization_fixed_target F‚ÇÅ D') (L‚ÇÇ : W.is_strict_localization_fixed_target F‚ÇÇ D)
  (L‚ÇÅ' : W.is_strict_localization_fixed_target F‚ÇÅ D) (L‚ÇÇ' : W.is_strict_localization_fixed_target F‚ÇÇ D') :
  L‚ÇÅ.lift F‚ÇÇ L‚ÇÇ.inverts_W ‚ãô L‚ÇÇ.lift F‚ÇÅ L‚ÇÅ.inverts_W = ùü≠ _ :=
begin
  apply L‚ÇÅ'.uniq,
  rw [‚Üê functor.assoc, L‚ÇÅ.fac F‚ÇÇ L‚ÇÇ.inverts_W, L‚ÇÇ.fac F‚ÇÅ L‚ÇÅ.inverts_W, functor.comp_id],
end

@[simps]
def strict_localization_is_ess_unique {W : arrow_class C} {D' : Type*} [category D']
  (F‚ÇÅ : C ‚•§ D) (F‚ÇÇ : C ‚•§ D')
  (L‚ÇÅ : W.is_strict_localization_fixed_target F‚ÇÅ D') (L‚ÇÇ : W.is_strict_localization_fixed_target F‚ÇÇ D)
  (L‚ÇÅ' : W.is_strict_localization_fixed_target F‚ÇÅ D) (L‚ÇÇ' : W.is_strict_localization_fixed_target F‚ÇÇ D') : D ‚âå D' :=
{ functor := L‚ÇÅ.lift F‚ÇÇ L‚ÇÇ.inverts_W,
  inverse := L‚ÇÇ.lift F‚ÇÅ L‚ÇÅ.inverts_W,
  unit_iso := eq_to_iso 
    (strict_localization_is_ess_unique_on_obj F‚ÇÅ F‚ÇÇ L‚ÇÅ L‚ÇÇ L‚ÇÅ' L‚ÇÇ').symm,
  counit_iso := eq_to_iso 
    (strict_localization_is_ess_unique_on_obj F‚ÇÇ F‚ÇÅ L‚ÇÇ L‚ÇÅ L‚ÇÇ' L‚ÇÅ'),
  functor_unit_iso_comp' := begin
    intro X,
    simpa only [eq_to_iso.hom, eq_to_hom_app, eq_to_hom_map, eq_to_hom_trans, eq_to_hom_refl],
  end }

namespace is_strict_localization

def mk' (W : arrow_class C) (L : C ‚•§ D)
  (h‚ÇÅ : W.is_strict_localization_fixed_target L W.localization)
  (h‚ÇÇ : W.is_strict_localization_fixed_target L D) :
  is_strict_localization W L :=
begin
  let e := (strict_localization_is_ess_unique (localization.Q W) L
      (localization.universal_property W) h‚ÇÅ (localization.universal_property W) h‚ÇÇ),
  have eq‚ÇÅ := strict_localization_is_ess_unique_on_obj (localization.Q W) L
      (localization.universal_property W) h‚ÇÅ (localization.universal_property W) h‚ÇÇ,
  have eq‚ÇÇ := strict_localization_is_ess_unique_on_obj L (localization.Q W)
      h‚ÇÅ (localization.universal_property W) h‚ÇÇ (localization.universal_property W),
  exact 
  { inverts_W := h‚ÇÅ.inverts_W,
    is_equivalence := is_equivalence.of_equivalence e,
    is_isomorphism := ‚ü®eq‚ÇÅ, eq‚ÇÇ‚ü©, }
end

@[simps]
def lift_functor {W : arrow_class C} {L : C ‚•§ D} (hL : is_strict_localization W L) : W.localization ‚•§ D :=
localization.lift L hL.inverts_W

@[simp]
lemma lift_functor_fac {W : arrow_class C} {L : C ‚•§ D} (hL : is_strict_localization W L) :
  localization.Q W ‚ãô hL.lift_functor = L :=
localization.fac _ _

def obj_bijection_lift {W : arrow_class C} {L : C ‚•§ D} (hL : is_strict_localization W L) : W.localization ‚âÉ D :=
{ to_fun := hL.lift_functor.obj,
  inv_fun := hL.is_equivalence.inverse.obj,
  left_inv := functor.congr_obj hL.is_isomorphism.1,
  right_inv := functor.congr_obj hL.is_isomorphism.2, }

def obj_bijection {W : arrow_class C} {L : C ‚•§ D} (hL : is_strict_localization W L) : C ‚âÉ D :=
begin
  calc C ‚âÉ W.localization : localization.Q_obj_bijection W
  ... ‚âÉ D : hL.obj_bijection_lift,
end

def naturality_condition {F G : C ‚•§ D} (app : Œ† (X : C), F.obj X ‚ü∂ G.obj X) : arrow_class C :=
Œª w, F.map w.hom ‚â´ app w.right = app w.left ‚â´ G.map w.hom

def naturality_condition_iff {F G : C ‚•§ D} (app : Œ† (X : C), F.obj X ‚ü∂ G.obj X) {X Y : C} (f : X ‚ü∂ Y) :
  arrow.mk f ‚àà naturality_condition app ‚Üî (F.map f ‚â´ app Y = app X ‚â´ G.map f) := by refl

def naturality_condition_inv {F G : C ‚•§ D} (app : Œ† (X : C), F.obj X ‚ü∂ G.obj X) (X Y : C) (e : X ‚âÖ Y)
(he : arrow.mk e.hom ‚àà naturality_condition app) : arrow.mk e.inv ‚àà naturality_condition app :=
begin
  rw naturality_condition_iff at ‚ä¢ he,
  rw [‚Üê cancel_mono (G.map e.hom), assoc, ‚Üê he, ‚Üê assoc, ‚Üê F.map_comp, assoc, ‚Üê G.map_comp,
    e.inv_hom_id, F.map_id, G.map_id, id_comp, comp_id],
end

def naturality_condition_comp {F G : C ‚•§ D} (app : Œ† (X : C), F.obj X ‚ü∂ G.obj X) (X Y Z : C) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
(hf : arrow.mk f ‚àà naturality_condition app) (hg : arrow.mk g ‚àà naturality_condition app) :
  arrow.mk (f ‚â´ g) ‚àà naturality_condition app :=
begin
  rw naturality_condition_iff at ‚ä¢ hf hg,
  rw [F.map_comp, G.map_comp, assoc, hg, ‚Üê assoc, hf, assoc],
end

end is_strict_localization

end arrow_class

namespace arrow_class

namespace is_strict_localization

def inv {W : arrow_class C} {L : C ‚•§ D} (hL : is_strict_localization W L) (w : W) :
  L.obj w.1.right ‚ü∂ L.obj w.1.left :=
begin
  haveI : is_iso (L.map (w.1.hom)) := hL.inverts_W w,
  exact inv (L.map w.1.hom),
end

@[simp]
def lift_functor_map_Winv {W : arrow_class C} {L : C ‚•§ D} (hL : is_strict_localization W L) (w : W) :
  hL.lift_functor.map (localization.Wiso w).inv = hL.inv w :=
begin
  dsimp only [inv],
  have h := functor.map_inv hL.lift_functor ((localization.Wiso w).hom),
  rw is_iso.iso.inv_hom at h,
  convert h,
  erw [functor.congr_hom hL.lift_functor_fac.symm w.1.hom, comp_id, id_comp],
  refl,
end

lemma description_arrows {W : arrow_class C} {L : C ‚•§ D} (hL : is_strict_localization W L) (f : arrow D) :
  ‚àÉ (n : ‚Ñï) (F : composable_morphisms n D), F.arrow = f ‚àß
  ‚àÄ (i : fin (n)), (‚àÉ g : arrow C, F.ith_arrow i = L.map_arrow.obj g) ‚à® (‚àÉ (w : W), F.ith_arrow i = arrow.mk (hL.inv w)) :=
begin
  suffices : ‚àÄ {X Y : paths W.loc_quiver} (œÜ : X ‚ü∂ Y), 
    ‚àÉ (n : ‚Ñï) (F : composable_morphisms n D), F.arrow = (quotient.functor _ ‚ãô hL.lift_functor).map_arrow.obj (arrow.mk œÜ) ‚àß
    ‚àÄ (i : fin (n)), (‚àÉ g : arrow C, F.ith_arrow i = L.map_arrow.obj g) ‚à® (‚àÉ (w : W), F.ith_arrow i = arrow.mk (hL.inv w)),
  { let f' := hL.is_equivalence.inverse.map f.hom,
    have eq : f = hL.lift_functor.map_arrow.obj (arrow.mk f'),
    { dsimp [f'],
      have h := hL.is_isomorphism.2.symm,
      ext,
      { exact functor.congr_hom h f.hom, }, },
    cases quotient.functor_map_surj _ _ _ f' with œÜ hœÜ,
    rw [eq, ‚Üê hœÜ],
    exact this œÜ, },
  intros X Y œÜ,
  induction œÜ with Y Z œÜ f hœÜ,
  { use [0, composable_morphisms.mk_0 ((quotient.functor _ ‚ãô hL.lift_functor).obj X)],
    split,
    { refl, },
    { intro i,
      exfalso,
      exact nat.not_lt_zero _ i.is_lt, }, },
  { cases X with X,
    cases Y with Y,
    cases Z with Z,
    let X' : paths W.loc_quiver := ‚ü®X‚ü©,
    let Y' : paths W.loc_quiver := ‚ü®Y‚ü©,
    let Z' : paths W.loc_quiver := ‚ü®Z‚ü©,
    let œÜ' : X' ‚ü∂ Y' := œÜ,    
    rcases hœÜ with ‚ü®n, F, h‚ÇÅ, h‚ÇÇ‚ü©,
    cases f with f w,
    work_on_goal 1
    { let h : (_ : W.loc_quiver) ‚ü∂ _ := sum.inl f,
      let F' := F.join (composable_morphisms.mk_1 (L.map f)) (arrow.congr_right h‚ÇÅ), },
    work_on_goal 2
    { let h : (_ : W.loc_quiver) ‚ü∂ _ := sum.inr w,
      let F' := F.join (composable_morphisms.mk_1 (hL.inv ‚ü®arrow.mk w.1, w.2‚ü©)) (arrow.congr_right h‚ÇÅ), },
    all_goals
    { use [n+1, F'],
      split,
      work_on_goal 2 
      { intro i,
        by_cases hi : i = fin.last _, swap,
        { let i' : fin n := ‚ü®(i : ‚Ñï), _‚ü©, swap,
          { by_contradiction,
            apply hi,
            ext,
            exact le_antisymm i.is_le (not_lt.mp h), },
          have eqF : F'.ith_arrow i = F.ith_arrow i' := begin
            convert composable_morphisms.i‚ÇÅth_arrow_of_join _ _ _ i',
            ext,
            refl,
          end,
          erw eqF,
          exact h‚ÇÇ i', }, },
        work_on_goal 2
        { erw [hi, ‚Üê composable_morphisms.last_arrow, composable_morphisms.last_arrow_of_join], }, },
      work_on_goal 2
      { apply or.inl,
        use arrow.mk f,
        ext,
        { erw [id_comp, comp_id], refl, },
        { refl, },
        { refl, }, },
      work_on_goal 3
      { apply or.inr,
        use ‚ü®_, w.2‚ü©, },
      all_goals
      { simp only [‚Üê show œÜ' ‚â´ paths.of.map h = œÜ.cons h, by refl, arrow.map_arrow_comp,
          composable_morphisms.arrow_of_join, h‚ÇÅ],
        congr,
        simp only [composable_morphisms.mk_1_arrow, arrow.map_arrow_of_mk], },
      { simp only [functor.congr_hom hL.lift_functor_fac.symm f,
          arrow.mk_eq_to_hom_comp, arrow.mk_comp_eq_to_hom, functor.comp_map, localization.Q_map_eq, localization.œà‚ÇÅ,
          arrow.mk_hom], },
      { simp only [functor.comp_map],
        dsimp only [h],
        rw [‚Üê hL.lift_functor_map_Winv, ‚Üê localization.Wiso_inv_eq],
        simp only [localization.œà‚ÇÇ, localization.œà‚ÇÇ', arrow.mk_hom, subtype.val_eq_coe, subtype.coe_eta], }, },
end

lemma arrow_class_is_univ {W : arrow_class C} {L : C ‚•§ D} (hL : is_strict_localization W L)
  (A : arrow_class D)
  (hA‚ÇÅ : ‚àÄ (f : arrow C), L.map_arrow.obj f ‚àà A)
  (hA‚ÇÇ : ‚àÄ (w : W), arrow.mk (hL.inv w) ‚àà A)
  (hA‚ÇÉ : ‚àÄ {X Y Z : D} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (hf : arrow.mk f ‚àà A) (hg : arrow.mk g ‚àà A),
    arrow.mk (f ‚â´ g) ‚àà A) :
  A = set.univ :=
begin
  ext f,
  split,
  { intro h,
    exact set.mem_univ _, },
  { intro h,
    rcases hL.description_arrows f with ‚ü®n, F, hF‚ÇÅ, hF‚ÇÇ‚ü©,
    suffices H : ‚àÄ (k : ‚Ñï) (hk : k < n+1),
      arrow.mk (F.map_of_le (show (0 : fin (n+1)) ‚â§ ‚ü®k, hk‚ü©, by exact fin.zero_le _)) ‚àà A,
    { simpa only [‚Üê hF‚ÇÅ] using H n (lt_add_one _), },
    intro k,
    induction k with k hk,
    { intro H,
      erw [F.map_of_le_eq_id, ‚Üê hL.obj_bijection.right_inv (F.ith_object 0)],
      convert hA‚ÇÅ (arrow.mk (ùüô _)),
      erw L.map_id,
      refl, },
    { intro hk',
      let hk'' : k < n+1 := lt_trans (lt_add_one _) hk',
      have ineg‚ÇÅ := fin.zero_le ‚ü®k, hk''‚ü©,
      have ineg‚ÇÇ : (‚ü®k, hk''‚ü© : fin(n+1)) ‚â§ ‚ü®k+1, hk'‚ü© :=
        by simp only [subtype.mk_le_mk, le_add_iff_nonneg_right, zero_le_one],
      rw F.map_of_le_trans ineg‚ÇÅ ineg‚ÇÇ,
      apply hA‚ÇÉ,
      { exact hk hk'', },
      { rcases hF‚ÇÇ ‚ü®k, by simpa only [nat.succ_eq_add_one, add_lt_add_iff_right] using hk'‚ü©
          with (‚ü®g, hg‚ü©|‚ü®w, hw‚ü©),
        { simpa only [‚Üê hg] using hA‚ÇÅ g, },
        { simpa only [‚Üê hw] using hA‚ÇÇ w, }, }, }, }
end

lemma arrow_class_is_univ' {W : arrow_class C} {L : C ‚•§ D} (hL : is_strict_localization W L)
  (A : arrow_class D)
  (hA‚ÇÅ : ‚àÄ {X Y : C} (f : X ‚ü∂ Y), arrow.mk (L.map f) ‚àà A)
  (hA‚ÇÇ : ‚àÄ {X Y : D} (e : X ‚âÖ Y), arrow.mk e.hom ‚àà A ‚Üí arrow.mk e.inv ‚àà A)
  (hA‚ÇÉ : ‚àÄ {X Y Z : D} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (hf : arrow.mk f ‚àà A) (hg : arrow.mk g ‚àà A),
  arrow.mk (f ‚â´ g) ‚àà A) : A = set.univ :=
begin
  apply hL.arrow_class_is_univ,
  { intro f,
    exact hA‚ÇÅ f.hom, },
  { intro w,
    haveI : is_iso (L.map (w.1.hom)) := hL.inverts_W w,
    apply hA‚ÇÇ (as_iso (L.map (w.1.hom))),
    exact hA‚ÇÅ w.1.hom, },
  { intros X Y Z,
    exact hA‚ÇÉ, },
end

namespace nat_trans_extension

def app {W : arrow_class C} {L : C ‚•§ D} (hL : is_strict_localization W L) {F G : D ‚•§ E} (œÑ : L ‚ãô F ‚ü∂ L ‚ãô G) (X : D) :
  F.obj X ‚ü∂ G.obj X :=
begin
  have eq := Œª X, (hL.obj_bijection.right_inv X).symm,
  refine eq_to_hom _ ‚â´ œÑ.app (hL.obj_bijection.inv_fun X) ‚â´ eq_to_hom _,
  { congr, apply eq, },
  { symmetry, congr, apply eq, },
end

lemma app_eq {W : arrow_class C} {L : C ‚•§ D} (hL : is_strict_localization W L) {F G : D ‚•§ E} (œÑ : L ‚ãô F ‚ü∂ L ‚ãô G) (X : C) :
  (app hL œÑ) (L.obj X) = œÑ.app X :=
begin
  dsimp only [app],
  have h := œÑ.naturality (eq_to_hom (hL.obj_bijection.left_inv X)),
  simp only [eq_to_hom_map] at h,
  erw ‚Üê h,
  simp only [eq_to_hom_trans_assoc, eq_to_hom_refl, id_comp],
end

end nat_trans_extension

def nat_trans_extension {W : arrow_class C} {L : C ‚•§ D} (hL : is_strict_localization W L) {F G : D ‚•§ E} (œÑ : L ‚ãô F ‚ü∂ L ‚ãô G) :
  F ‚ü∂ G :=
begin
  have h := arrow_class_is_univ' hL (naturality_condition (nat_trans_extension.app hL œÑ)) _
    (naturality_condition_inv _) (naturality_condition_comp _), rotate,
  { intros X Y f,
    simp only [naturality_condition_iff, nat_trans_extension.app_eq],
    exact œÑ.naturality f, },
  exact
  { app := nat_trans_extension.app hL œÑ,
    naturality' := Œª X Y f, begin
      have hf : arrow.mk f ‚àà naturality_condition (nat_trans_extension.app hL œÑ),
      { rw h,
        apply set.mem_univ, },
      exact hf,
    end, }
end

lemma nat_trans_extension_hcomp {W : arrow_class C} {L : C ‚•§ D} (hL : is_strict_localization W L) {F G : D ‚•§ E} (œÑ : L ‚ãô F ‚ü∂ L ‚ãô G) :
  (ùüô L) ‚ó´ nat_trans_extension hL œÑ = œÑ :=
begin
  ext X,
  simp only [nat_trans.hcomp_app, nat_trans.id_app, functor.map_id, comp_id],
  apply nat_trans_extension.app_eq,
end

end is_strict_localization

end arrow_class

end category_theory
