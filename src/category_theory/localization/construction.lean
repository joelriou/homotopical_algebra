/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import category_theory.arrow_class
import category_theory.quotient
import category_theory.path_category
import category_theory.category.Quiv
import category_theory.equivalence

noncomputable theory

open category_theory
open category_theory.category

namespace category_theory

namespace quotient

lemma functor_map_surj {C : Type*} [category C] (r : hom_rel C) (s t : C) :
  function.surjective (Œª (f : s ‚ü∂ t), (functor r).map f) :=
begin
  intro f,
  cases surjective_quot_mk _ f with g hg,
  use [g, hg],
end

end quotient

namespace functor

--lemma congr_obj {D‚ÇÅ D‚ÇÇ : Type*} [category D‚ÇÅ] [category D‚ÇÇ] {F G : D‚ÇÅ ‚•§ D‚ÇÇ}
--(h : F = G) : ‚àÄ X : D‚ÇÅ, F.obj X = G.obj X :=
--by { intro X, rw h, }

lemma congr_map_conjugate {D‚ÇÅ D‚ÇÇ : Type*} [category D‚ÇÅ] [category D‚ÇÇ] {F G : D‚ÇÅ ‚•§ D‚ÇÇ}
(h : F = G) {X Y : D‚ÇÅ} (f : X ‚ü∂ Y) : F.map f =
eq_to_hom (by rw h) ‚â´ G.map f ‚â´ eq_to_hom (by rw h) :=
by { subst h, erw [id_comp, comp_id], }

lemma conjugate_inv_of_congr_map_conjugate {D‚ÇÅ D‚ÇÇ : Type*} [category D‚ÇÅ] [category D‚ÇÇ] (F G : D‚ÇÅ ‚•§ D‚ÇÇ)
  {X Y : D‚ÇÅ} (e : X ‚âÖ Y) (hX : F.obj X = G.obj X) (hY : F.obj Y = G.obj Y)
  (h‚ÇÇ : F.map e.hom = eq_to_hom (by rw hX) ‚â´ G.map e.hom ‚â´ eq_to_hom (by rw hY)) :
F.map e.inv = eq_to_hom (by rw hY) ‚â´ G.map e.inv ‚â´ eq_to_hom (by rw hX) :=
by simp only [‚Üê is_iso.iso.inv_hom e, functor.map_inv, h‚ÇÇ, is_iso.inv_comp, inv_eq_to_hom, assoc]

lemma congr_map {D D' : Type*} [category D] [category D'] (F : D ‚•§ D')
{X Y : D} {f g : X ‚ü∂ Y} (h : f = g) : F.map f = F.map g :=
by { subst h, }

lemma assoc {C D E F : Type*} [category C] [category D]
  [category E] [category F] (œÜ : C ‚•§ D)
  (œÜ' : D ‚•§ E) (œÜ'' : E ‚•§ F) : (œÜ ‚ãô œÜ') ‚ãô œÜ'' = œÜ ‚ãô (œÜ' ‚ãô œÜ'') :=
by refl

end functor

universes v v' v‚ÇÉ u u' u‚ÇÉ

variables {C : Type u} [category.{v} C]
variables {D : Type u'} [category.{v'} D]
variables {E : Type u‚ÇÉ} [category.{v‚ÇÉ} E]

namespace arrow

def is_inverted_by (f : arrow C) (F : C ‚•§ D) : Prop := is_iso (F.map f.hom)

def is_inverted_by_of_comp (f : arrow C) (F : C ‚•§ D) (G : D ‚•§ E) (hf : f.is_inverted_by F) : f.is_inverted_by (F ‚ãô G) :=
begin
  haveI : is_iso (F.map f.hom) := hf,
  exact (infer_instance : is_iso (G.map (F.map f.hom))),
end

end arrow

namespace arrow_class

def is_inverted_by (W : arrow_class C) (F : C ‚•§ D) : Prop :=
‚àÄ (f : W), f.1.is_inverted_by F

def is_inverted_by_of_comp (W : arrow_class C) (F : C ‚•§ D) (G : D ‚•§ E) (hW : W.is_inverted_by F) : W.is_inverted_by (F ‚ãô G) :=
by { intro w, exact w.1.is_inverted_by_of_comp F G (hW w), }


structure loc_quiver (W : arrow_class C) := (obj : C)

variable (W : arrow_class C)

instance : quiver (loc_quiver W) :=
{ hom := Œª A B, (A.obj ‚ü∂ B.obj) ‚äï { f : B.obj ‚ü∂ A.obj // arrow.mk f ‚àà W} }

@[simps]
def Œπ_loc_quiver (X : C) : paths (loc_quiver W) := paths.of.obj ‚ü®X‚ü©

namespace localization

structure relation := (X Y : paths (loc_quiver W)) (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y)

namespace relation

variable (W)
@[simps]
def mk' {X Y : paths (loc_quiver W)} (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) := relation.mk X Y f‚ÇÅ f‚ÇÇ
variable {W}

lemma congr_X_obj {r‚ÇÅ r‚ÇÇ : relation W} (h : r‚ÇÅ = r‚ÇÇ) : r‚ÇÅ.X.obj = r‚ÇÇ.X.obj := by subst h
lemma congr_Y_obj {r‚ÇÅ r‚ÇÇ : relation W} (h : r‚ÇÅ = r‚ÇÇ) : r‚ÇÅ.Y.obj = r‚ÇÇ.Y.obj := by subst h
lemma congr_f‚ÇÅ_heq {r‚ÇÅ r‚ÇÇ : relation W} (h : r‚ÇÅ = r‚ÇÇ) : r‚ÇÅ.f‚ÇÅ == r‚ÇÇ.f‚ÇÅ := by subst h
lemma congr_f‚ÇÇ_heq {r‚ÇÅ r‚ÇÇ : relation W} (h : r‚ÇÅ = r‚ÇÇ) : r‚ÇÅ.f‚ÇÇ == r‚ÇÇ.f‚ÇÇ := by subst h
lemma congr_f‚ÇÅ {X Y : paths (loc_quiver W)} {f‚ÇÅ f‚ÇÇ f‚ÇÅ' f‚ÇÇ' : X ‚ü∂ Y}
  (h : mk' W f‚ÇÅ f‚ÇÇ = mk' W f‚ÇÅ' f‚ÇÇ') : f‚ÇÅ = f‚ÇÅ' := eq_of_heq (congr_f‚ÇÅ_heq h)
lemma congr_f‚ÇÇ {X Y : paths (loc_quiver W)} {f‚ÇÅ f‚ÇÇ f‚ÇÅ' f‚ÇÇ' : X ‚ü∂ Y}
  (h : mk' W f‚ÇÅ f‚ÇÇ = mk' W f‚ÇÅ' f‚ÇÇ') : f‚ÇÇ = f‚ÇÇ' := eq_of_heq (congr_f‚ÇÇ_heq h)

end relation

def œà‚ÇÅ (f : arrow C) : W.Œπ_loc_quiver f.left ‚ü∂ W.Œπ_loc_quiver f.right := paths.of.map (sum.inl f.hom)

def œà‚ÇÇ' (g : arrow C) (hg : g ‚àà W) : W.Œπ_loc_quiver g.right ‚ü∂ W.Œπ_loc_quiver g.left :=
paths.of.map (sum.inr ‚ü®g.hom, (by { convert hg, rw arrow.mk_eq, })‚ü©)

variable {W}
def œà‚ÇÇ (w : W) : W.Œπ_loc_quiver w.1.right ‚ü∂ W.Œπ_loc_quiver w.1.left := œà‚ÇÇ' W w.1 w.2

variable (W)
@[simps]
def relations‚ÇÄ : C ‚Üí relation W := Œª X, relation.mk' W (œà‚ÇÅ W (arrow.mk (ùüô X))) (ùüô _)

variable (C)
def R‚ÇÅ := { t : arrow C √ó arrow C // t.1.right = t.2.left }
variable {C}

def œÅ‚ÇÅ {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : R‚ÇÅ C := ‚ü®‚ü®arrow.mk f, arrow.mk g‚ü©, rfl‚ü©

@[simps]
def relations‚ÇÅ : R‚ÇÅ C ‚Üí relation W := Œª t,
{ X := W.Œπ_loc_quiver t.1.1.left,
  Y := W.Œπ_loc_quiver t.1.2.right,
  f‚ÇÅ := œà‚ÇÅ W (arrow.mk (t.1.1.hom ‚â´ eq_to_hom t.2 ‚â´ t.1.2.hom)),
  f‚ÇÇ := œà‚ÇÅ W t.1.1 ‚â´ eq_to_hom (by { congr, exact t.2,}) ‚â´ œà‚ÇÅ W t.1.2, }

@[simps]
def relations‚ÇÇ (w : W) : relation W := relation.mk' W (œà‚ÇÅ W w.1 ‚â´ œà‚ÇÇ w) (ùüô _)

@[simps]
def relations‚ÇÉ (w : W) : relation W := relation.mk' W (œà‚ÇÇ w ‚â´ œà‚ÇÅ W w.1) (ùüô _)

variable {W}
def belongs_to {A B : paths (loc_quiver W)} (f g : A ‚ü∂ B)
  {D : Type*} (relations : D ‚Üí relation W) : Prop := ‚àÉ (r : D), relations r = relation.mk' W f g

variable (W)
def relations : hom_rel (paths (loc_quiver W)) :=
Œª X Y f g, belongs_to f g (relations‚ÇÄ W) ‚à® belongs_to f g (relations‚ÇÅ W) ‚à®
  belongs_to f g (relations‚ÇÇ W) ‚à® belongs_to f g (relations‚ÇÉ W)

end localization

@[derive category]
def localization := category_theory.quotient (localization.relations W)

open localization

namespace localization

variable (W)

def Q : C ‚•§ W.localization :=
{ obj := Œª X, (quotient.functor (relations W)).obj (W.Œπ_loc_quiver X),
  map := Œª X Y f, (quotient.functor (relations W)).map (œà‚ÇÅ W f),
  map_id' := Œª X, begin
    apply quotient.sound (localization.relations W),
    exact or.inl ‚ü®X, rfl‚ü©,
  end,
  map_comp' := Œª X Y Z f g, begin
    apply quotient.sound (localization.relations W),
    exact or.inr (or.inl (begin
      use localization.œÅ‚ÇÅ f g, dsimp only [localization.relations‚ÇÅ],
      congr,
      erw id_comp,refl,
    end)),
  end }

variable {W}

def Wiso (w : W) : iso ((Q W).obj w.1.left) ((Q W).obj w.1.right) :=
{ hom := (Q W).map w.1.hom,
  inv := (quotient.functor (relations W)).map (œà‚ÇÇ w),
  hom_inv_id' := begin
    erw ‚Üê (quotient.functor _).map_comp,
    apply quotient.sound,
    refine or.inr (or.inr (or.inl ‚ü®w, rfl‚ü©)),
  end,
  inv_hom_id' := begin
    erw ‚Üê (quotient.functor _).map_comp,
    apply quotient.sound,
    exact or.inr (or.inr (or.inr ‚ü®w, rfl‚ü©)),
  end }

@[simps]
def lift_to_loc_quiver {D : Type*} [category D] (G : C ‚•§ D) (hG : W.is_inverted_by G) :
  prefunctor (loc_quiver W) D :=
{ obj := by { rintro ‚ü®X‚ü©, exact G.obj X, },
  map := begin
    rintros ‚ü®X‚ü© ‚ü®Y‚ü© (f|‚ü®g, hg‚ü©),
    { exact G.map f, },
    { haveI : is_iso (G.map g) := hG ‚ü®arrow.mk g, hg‚ü©,
      exact inv (G.map g), },
  end }

/-- Fix category_theory.theory.Quiv.lean-/
@[simps]
def lift_to_path_category {D : Type u'} [category.{v'} D] (G : C ‚•§ D) (hG : W.is_inverted_by G) :
  paths (loc_quiver W) ‚•§ D :=
{ obj := Œª X, (lift_to_loc_quiver G hG).obj X,
  map := Œª X Y f, compose_path ((lift_to_loc_quiver G hG).map_path f), }

@[simp]
lemma lift_œà‚ÇÅ_eq {D : Type*} [category D] (G : C ‚•§ D) (hG : W.is_inverted_by G)
  (f : arrow C) : (lift_to_path_category G hG).map (œà‚ÇÅ W f) = G.map f.hom :=
begin
  dsimp [lift_to_path_category, œà‚ÇÅ, quiver.hom.to_path],
  simpa only [id_comp],
end

@[simp]
lemma lift_œà‚ÇÇ_eq {D : Type*} [category D] (G : C ‚•§ D) (hG : W.is_inverted_by G)
  (w : W) : (lift_to_path_category G hG).map (œà‚ÇÇ w) = 
  (by { haveI : is_iso (G.map w.1.hom) := hG w, exact inv (G.map w.1.hom), }) :=
begin
  dsimp [lift_to_loc_quiver, lift_to_path_category, œà‚ÇÇ, œà‚ÇÇ', quiver.hom.to_path],
  simpa only [id_comp],
end

lemma W_is_inverted_by_Q : W.is_inverted_by (Q W) := Œª w, is_iso.of_iso (Wiso w)

def lift {D : Type u'} [category.{v'} D] (G : C ‚•§ D) (hG : W.is_inverted_by G) :
  localization W ‚•§ D :=
begin
  apply quotient.lift (relations W) (lift_to_path_category G hG),
  { rintro ‚ü®X‚ü© ‚ü®Y‚ü© f‚ÇÅ f‚ÇÇ r,
    rcases r with (_|_|_|_),
    work_on_goal 1 { rcases r with ‚ü®X', r‚ü©, },
    work_on_goal 2 { rcases r with ‚ü®‚ü®‚ü®‚ü®X',Z,f‚ü©,‚ü®Z',Y',g‚ü©‚ü©, h‚ü©, r‚ü©, },
    work_on_goal 3 { rcases r with ‚ü®w, r‚ü©, },
    work_on_goal 4 { rcases r with ‚ü®w, r‚ü©, },
    all_goals {
      have eqX := relation.congr_X_obj r,
      have eqY := relation.congr_Y_obj r,
      dsimp at eqX eqY,
      substs eqX eqY,
      have eqf‚ÇÅ := relation.congr_f‚ÇÅ r,
      have eqf‚ÇÇ := relation.congr_f‚ÇÇ r,
      substs eqf‚ÇÅ eqf‚ÇÇ, clear r, },
    { erw [lift_œà‚ÇÅ_eq, functor.map_id, functor.map_id],
      refl, },
    { dsimp at h,
      substs h,
      dsimp only [arrow.mk],
      simp only [functor.map_comp, lift_œà‚ÇÅ_eq,
        eq_to_hom_refl, functor.map_id, id_comp], },
    all_goals
    { erw [functor.map_comp, functor.map_id, lift_œà‚ÇÅ_eq, lift_œà‚ÇÇ_eq], },
    { apply is_iso.hom_inv_id, },
    { apply is_iso.inv_hom_id, }, },
end

@[simp]
lemma fac {D : Type u'} [category.{v'} D] (G : C ‚•§ D) (hG : W.is_inverted_by G) :
  Q W ‚ãô lift G hG = G :=
begin
  apply functor.ext,
  { intros X Y f,
    dsimp [lift, lift_to_path_category, lift_to_loc_quiver, Q, œà‚ÇÅ, quiver.hom.to_path,
      Œπ_loc_quiver],
    erw [id_comp, comp_id, id_comp],
    refl, },
  { intro X,
    refl, }
end

lemma uniq {D : Type*} [category D] (G‚ÇÅ G‚ÇÇ : localization W ‚•§ D) (h : Q W ‚ãô G‚ÇÅ = Q W ‚ãô G‚ÇÇ) : G‚ÇÅ = G‚ÇÇ :=
begin
  suffices h' : (quotient.functor (relations W)) ‚ãô G‚ÇÅ = (quotient.functor (relations W)) ‚ãô G‚ÇÇ,
  { apply functor.ext,
    { rintros ‚ü®‚ü®X‚ü©‚ü© ‚ü®‚ü®Y‚ü©‚ü© ‚ü®f‚ü©,
      convert functor.congr_map_conjugate h' f, },
    { rintro ‚ü®‚ü®X‚ü©‚ü©,
      convert functor.congr_obj h X, }, },
  { apply paths.ext_functor,
    { rintro ‚ü®X‚ü© ‚ü®Y‚ü© f,
      cases f,
      { convert functor.congr_map_conjugate h f, },
      { rcases f with ‚ü®g, hg‚ü©,
        dsimp at g hg,
        have hŒ± : (Wiso ‚ü®arrow.mk g, hg‚ü©).hom = (Q W).map g := rfl,
        have h' := functor.congr_map_conjugate h g,
        simp only [functor.comp_map, ‚Üê hŒ±] at h',
        refine functor.conjugate_inv_of_congr_map_conjugate G‚ÇÅ G‚ÇÇ _ _ _ h',
        { convert functor.congr_obj h Y, },
        { convert functor.congr_obj h X, }, }, },
    { ext X,
      cases X,
      have eq := functor.congr_obj h X,
      dsimp at ‚ä¢ eq,
      convert eq, }, },
end

instance (w : W) : is_iso ((Q W).map w.1.hom) := is_iso.of_iso (Wiso w)

variable (W)

def Q_obj_bijection : C ‚âÉ W.localization :=
{ to_fun := (Q W).obj,
  inv_fun := Œª X, X.as.1,
  left_inv := Œª X, begin refl, end,
  right_inv := Œª X, by { cases X, cases X, refl, }, }

variable {W}

end localization

variable (L : C ‚•§ D)

structure is_localization (W : arrow_class C) (L : C ‚•§ D) :=
(inverts_W : W.is_inverted_by L)
(is_equivalence : is_equivalence (localization.lift L inverts_W))

structure is_strict_localization (W : arrow_class C) (L : C ‚•§ D) extends is_localization W L :=
(is_isomorphism : (localization.lift L inverts_W ‚ãô is_equivalence.inverse) = ùü≠ _
  ‚àß (is_equivalence.inverse ‚ãô localization.lift L inverts_W) = ùü≠ _)

structure is_strict_localization_fixed_target
(W : arrow_class C) (F : C ‚•§ D)  (E : Type u‚ÇÉ) [category.{v‚ÇÉ} E] :=
  (inverts_W : W.is_inverted_by F)
  (lift : Œ† (G : C ‚•§ E) (hG : W.is_inverted_by G), D ‚•§ E)
  (fac : ‚àÄ (G : C ‚•§ E) (hG : W.is_inverted_by G), F ‚ãô lift G hG = G)
  (uniq : ‚àÄ (G‚ÇÅ G‚ÇÇ : D ‚•§ E), F ‚ãô G‚ÇÅ = F ‚ãô G‚ÇÇ ‚Üí G‚ÇÅ = G‚ÇÇ)

namespace localization

def universal_property {E : Type u‚ÇÉ} [category.{v‚ÇÉ} E] :
  W.is_strict_localization_fixed_target (localization.Q W) E :=
{ inverts_W := W_is_inverted_by_Q,
  lift := lift,
  fac := fac,
  uniq := uniq }

end localization

lemma strict_localization_is_ess_unique_on_obj {W : arrow_class C} {D' : Type*} [category D']
  (F‚ÇÅ : C ‚•§ D) (F‚ÇÇ : C ‚•§ D')
  (L‚ÇÅ : W.is_strict_localization_fixed_target F‚ÇÅ D') (L‚ÇÇ : W.is_strict_localization_fixed_target F‚ÇÇ D)
  (L‚ÇÅ' : W.is_strict_localization_fixed_target F‚ÇÅ D) (L‚ÇÇ' : W.is_strict_localization_fixed_target F‚ÇÇ D') :
  L‚ÇÅ.lift F‚ÇÇ L‚ÇÇ.inverts_W ‚ãô L‚ÇÇ.lift F‚ÇÅ L‚ÇÅ.inverts_W = ùü≠ _ :=
begin
  apply L‚ÇÅ'.uniq,
  rw [‚Üê functor.assoc, L‚ÇÅ.fac F‚ÇÇ L‚ÇÇ.inverts_W, L‚ÇÇ.fac F‚ÇÅ L‚ÇÅ.inverts_W, functor.comp_id],
end

@[simps]
def strict_localization_is_ess_unique {W : arrow_class C} {D' : Type*} [category D']
  (F‚ÇÅ : C ‚•§ D) (F‚ÇÇ : C ‚•§ D')
  (L‚ÇÅ : W.is_strict_localization_fixed_target F‚ÇÅ D') (L‚ÇÇ : W.is_strict_localization_fixed_target F‚ÇÇ D)
  (L‚ÇÅ' : W.is_strict_localization_fixed_target F‚ÇÅ D) (L‚ÇÇ' : W.is_strict_localization_fixed_target F‚ÇÇ D') : D ‚âå D' :=
{ functor := L‚ÇÅ.lift F‚ÇÇ L‚ÇÇ.inverts_W,
  inverse := L‚ÇÇ.lift F‚ÇÅ L‚ÇÅ.inverts_W,
  unit_iso := eq_to_iso 
    (strict_localization_is_ess_unique_on_obj F‚ÇÅ F‚ÇÇ L‚ÇÅ L‚ÇÇ L‚ÇÅ' L‚ÇÇ').symm,
  counit_iso := eq_to_iso 
    (strict_localization_is_ess_unique_on_obj F‚ÇÇ F‚ÇÅ L‚ÇÇ L‚ÇÅ L‚ÇÇ' L‚ÇÅ'),
  functor_unit_iso_comp' := begin
    intro X,
    simpa only [eq_to_iso.hom, eq_to_hom_app, eq_to_hom_map, eq_to_hom_trans, eq_to_hom_refl],
  end }

namespace is_strict_localization

def mk' (W : arrow_class C) (L : C ‚•§ D)
  (h‚ÇÅ : W.is_strict_localization_fixed_target L W.localization)
  (h‚ÇÇ : W.is_strict_localization_fixed_target L D) :
  is_strict_localization W L :=
begin
  let e := (strict_localization_is_ess_unique (localization.Q W) L
      (localization.universal_property W) h‚ÇÅ (localization.universal_property W) h‚ÇÇ),
  have eq‚ÇÅ := strict_localization_is_ess_unique_on_obj (localization.Q W) L
      (localization.universal_property W) h‚ÇÅ (localization.universal_property W) h‚ÇÇ,
  have eq‚ÇÇ := strict_localization_is_ess_unique_on_obj L (localization.Q W)
      h‚ÇÅ (localization.universal_property W) h‚ÇÇ (localization.universal_property W),
  exact 
  { inverts_W := h‚ÇÅ.inverts_W,
    is_equivalence := is_equivalence.of_equivalence e,
    is_isomorphism := ‚ü®eq‚ÇÅ, eq‚ÇÇ‚ü©, }
end

@[simps]
def lift_functor {W : arrow_class C} {L : C ‚•§ D} (hL : is_strict_localization W L) : W.localization ‚•§ D :=
localization.lift L hL.inverts_W

lemma arrow.mk_comp_eq_to_hom {X Y Z : D} (f : X ‚ü∂ Y) (h : Y = Z) : arrow.mk (f ‚â´ eq_to_hom h) = arrow.mk f :=
by { subst h, erw comp_id, }
lemma arrow.mk_eq_to_hom_comp {X Y Z : D} (f : Y ‚ü∂ Z) (h : X = Y) : arrow.mk (eq_to_hom h ‚â´ f) = arrow.mk f :=
by { subst h, erw id_comp, }

lemma arrow_class_is_top {W : arrow_class C} {L : C ‚•§ D} (hL : is_strict_localization W L)
  (A : arrow_class D)
  (hA‚ÇÅ : ‚àÄ {X Y : C} (f : X ‚ü∂ Y), arrow.mk (L.map f) ‚àà A)
  (hA‚ÇÇ : ‚àÄ {X Y : D} (e : X ‚âÖ Y), arrow.mk e.hom ‚àà A ‚Üí arrow.mk e.inv ‚àà A)
  (hA‚ÇÉ : ‚àÄ {X Y Z : D} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (hf : arrow.mk f ‚àà A) (hg : arrow.mk g ‚àà A),
  arrow.mk (f ‚â´ g) ‚àà A) : A = set.univ :=
begin
  haveI hF‚ÇÅ: is_equivalence hL.lift_functor := hL.is_equivalence,
  suffices : ‚àÄ {X Y : W.localization} (f : X ‚ü∂ Y), arrow.mk (hL.lift_functor.map f) ‚àà A,
  { ext f,
    split,
    { intro h, apply set.mem_univ, },
    { intro hf,
      have h := this (hL.is_equivalence.inverse.map f.hom),
      erw [‚Üê functor.comp_map, functor.congr_map_conjugate hL.is_isomorphism.2 f.hom, functor.id_map] at h,
      convert h,
      ext,
      { simp only [arrow.mk_hom, assoc, eq_to_hom_trans, eq_to_hom_refl, comp_id, eq_to_hom_trans_assoc, id_comp], },
      { simpa only [arrow.mk_comp_eq_to_hom, arrow.mk_eq_to_hom_comp], },
      { simpa only [arrow.mk_comp_eq_to_hom, arrow.mk_eq_to_hom_comp], }, }, },
  suffices : ‚àÄ {X Y : C} (g : (localization.Q W).obj X ‚ü∂ (localization.Q W).obj Y), arrow.mk (hL.lift_functor.map g) ‚àà A,
  { intros X Y g,
    let X' := (localization.Q_obj_bijection W).inv_fun X,
    let Y' := (localization.Q_obj_bijection W).inv_fun Y,
    let g' : (localization.Q W).obj X' ‚ü∂ (localization.Q W).obj Y' := eq_to_hom _ ‚â´ g ‚â´ eq_to_hom _, rotate,
    { exact (localization.Q_obj_bijection W).right_inv X, },
    { exact ((localization.Q_obj_bijection W).right_inv Y).symm, },
    simpa only [functor.map_comp, eq_to_hom_map, arrow.mk_eq_to_hom_comp, arrow.mk_comp_eq_to_hom] using this g', },
  suffices : ‚àÄ {X Y : paths W.loc_quiver} (œÜ : X ‚ü∂ Y), arrow.mk (hL.lift_functor.map ((quotient.functor (relations W)).map œÜ)) ‚àà A,
  { intros X Y g,
    cases quotient.functor_map_surj _ _ _ g with œÜ hœÜ,
    rw ‚Üê hœÜ,
    exact this œÜ, },
  intros X Y œÜ,
  induction œÜ with Z‚ÇÅ Z‚ÇÇ Œ≥ f hŒ≥,
  { simp,
    cases X,
    simpa only [L.map_id] using hA‚ÇÅ (ùüô X), },
  { refine hA‚ÇÉ _ _ hŒ≥ _,
    cases Z‚ÇÅ,
    cases Z‚ÇÇ,
    cases f,
    { exact hA‚ÇÅ f, },
    { rcases f with ‚ü®f, hf‚ü©,
      haveI : is_iso (L.map f) := hL.inverts_W ‚ü®arrow.mk f, hf‚ü©,
      apply hA‚ÇÇ (as_iso (L.map f)),
      apply hA‚ÇÅ, }, },
end

def obj_bijection_lift {W : arrow_class C} {L : C ‚•§ D} (hL : is_strict_localization W L) : W.localization ‚âÉ D :=
{ to_fun := hL.lift_functor.obj,
  inv_fun := hL.is_equivalence.inverse.obj,
  left_inv := functor.congr_obj hL.is_isomorphism.1,
  right_inv := functor.congr_obj hL.is_isomorphism.2, }

def obj_bijection {W : arrow_class C} {L : C ‚•§ D} (hL : is_strict_localization W L) : C ‚âÉ D :=
begin
  calc C ‚âÉ W.localization : localization.Q_obj_bijection W
  ... ‚âÉ D : hL.obj_bijection_lift,
end

def naturality_condition {F G : C ‚•§ D} (app : Œ† (X : C), F.obj X ‚ü∂ G.obj X) : arrow_class C :=
Œª w, F.map w.hom ‚â´ app w.right = app w.left ‚â´ G.map w.hom

def naturality_condition_iff {F G : C ‚•§ D} (app : Œ† (X : C), F.obj X ‚ü∂ G.obj X) {X Y : C} (f : X ‚ü∂ Y) :
  arrow.mk f ‚àà naturality_condition app ‚Üî (F.map f ‚â´ app Y = app X ‚â´ G.map f) := by refl

def naturality_condition_inv {F G : C ‚•§ D} (app : Œ† (X : C), F.obj X ‚ü∂ G.obj X) (X Y : C) (e : X ‚âÖ Y)
(he : arrow.mk e.hom ‚àà naturality_condition app) : arrow.mk e.inv ‚àà naturality_condition app :=
begin
  rw naturality_condition_iff at ‚ä¢ he,
  rw [‚Üê cancel_mono (G.map e.hom), assoc, ‚Üê he, ‚Üê assoc, ‚Üê F.map_comp, assoc, ‚Üê G.map_comp,
    e.inv_hom_id, F.map_id, G.map_id, id_comp, comp_id],
end

def naturality_condition_comp {F G : C ‚•§ D} (app : Œ† (X : C), F.obj X ‚ü∂ G.obj X) (X Y Z : C) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
(hf : arrow.mk f ‚àà naturality_condition app) (hg : arrow.mk g ‚àà naturality_condition app) :
  arrow.mk (f ‚â´ g) ‚àà naturality_condition app :=
begin
  rw naturality_condition_iff at ‚ä¢ hf hg,
  rw [F.map_comp, G.map_comp, assoc, hg, ‚Üê assoc, hf, assoc],
end

namespace nat_trans_extension

def app {W : arrow_class C} {L : C ‚•§ D} (hL : is_strict_localization W L) {F G : D ‚•§ E} (œÑ : L ‚ãô F ‚ü∂ L ‚ãô G) (X : D) :
  F.obj X ‚ü∂ G.obj X :=
begin
  have eq := Œª X, (hL.obj_bijection.right_inv X).symm,
  refine eq_to_hom _ ‚â´ œÑ.app (hL.obj_bijection.inv_fun X) ‚â´ eq_to_hom _,
  { congr, apply eq, },
  { symmetry, congr, apply eq, },
end

lemma app_eq {W : arrow_class C} {L : C ‚•§ D} (hL : is_strict_localization W L) {F G : D ‚•§ E} (œÑ : L ‚ãô F ‚ü∂ L ‚ãô G) (X : C) :
  (app hL œÑ) (L.obj X) = œÑ.app X :=
begin
  dsimp only [app],
  have h := œÑ.naturality (eq_to_hom (hL.obj_bijection.left_inv X)),
  simp only [eq_to_hom_map] at h,
  erw ‚Üê h,
  simp only [eq_to_hom_trans_assoc, eq_to_hom_refl, id_comp],
end

end nat_trans_extension

def nat_trans_extension {W : arrow_class C} {L : C ‚•§ D} (hL : is_strict_localization W L) {F G : D ‚•§ E} (œÑ : L ‚ãô F ‚ü∂ L ‚ãô G) :
  F ‚ü∂ G :=
begin
  have h := arrow_class_is_top hL (naturality_condition (nat_trans_extension.app hL œÑ)) _
    (naturality_condition_inv _) (naturality_condition_comp _), rotate,
  { intros X Y f,
    simp only [naturality_condition_iff, nat_trans_extension.app_eq],
    exact œÑ.naturality f, },
  exact
  { app := nat_trans_extension.app hL œÑ,
    naturality' := Œª X Y f, begin
      have hf : arrow.mk f ‚àà naturality_condition (nat_trans_extension.app hL œÑ),
      { rw h,
        apply set.mem_univ, },
      exact hf,
    end, }
end

lemma nat_trans_extension_hcomp {W : arrow_class C} {L : C ‚•§ D} (hL : is_strict_localization W L) {F G : D ‚•§ E} (œÑ : L ‚ãô F ‚ü∂ L ‚ãô G) :
  (ùüô L) ‚ó´ nat_trans_extension hL œÑ = œÑ :=
begin
  ext X,
  simp only [nat_trans.hcomp_app, nat_trans.id_app, functor.map_id, comp_id],
  apply nat_trans_extension.app_eq,
end

end is_strict_localization

end arrow_class

def composable_morphisms (n : ‚Ñï) (D : Type*) [category D] := fin (n+1) ‚•§ D

namespace composable_morphisms

def composition {n : ‚Ñï} {D : Type*} [category D] (F : composable_morphisms n D) : arrow D :=
F.map (hom_of_le (fin.last _).zero_le)

def ith_arrow {n : ‚Ñï} {D : Type*} [category D] (F : composable_morphisms n D) (i : fin n) : arrow D :=
F.map (hom_of_le (show fin.cast_succ i ‚â§ i.succ,
by simp only [fin.le_iff_coe_le_coe, fin.coe_cast_succ, fin.coe_succ, le_add_iff_nonneg_right, zero_le_one]))

end composable_morphisms

namespace arrow_class

namespace is_strict_localization

@[simps]
def inv {W : arrow_class C} {L : C ‚•§ D} (hL : is_strict_localization W L) (w : W) : arrow D :=
begin
  haveI : is_iso (L.map (w.1.hom)) := hL.inverts_W w,
  exact inv (L.map (w.1.hom)),
end

lemma description_arrows {W : arrow_class C} {L : C ‚•§ D} (hL : is_strict_localization W L) (f : arrow D) :
  ‚àÉ (n : ‚Ñï) (F : composable_morphisms n D), F.composition = f ‚àß
  ‚àÄ (i : fin (n)), (‚àÉ g : arrow C, F.ith_arrow i = L.map_arrow.obj g) ‚à® (‚àÉ (w : W), F.ith_arrow i = hL.inv w) :=
begin
  sorry
end

end is_strict_localization

end arrow_class

end category_theory
