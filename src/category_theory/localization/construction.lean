/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import category_theory.arrow_class
import category_theory.quotient
import category_theory.path_category
import category_theory.category.Quiv
import category_theory.equivalence

noncomputable theory

open category_theory
open category_theory.category

namespace category_theory

universes v v' u u'

variables {C : Type u} [category.{v} C]
variables {D : Type u'} [category.{v'} D]

namespace arrow

def is_inverted_by (f : arrow C) (F : C ‚•§ D) : Prop := is_iso (F.map f.hom)

end arrow

namespace arrow_class

def is_inverted_by (W : arrow_class C) (F : C ‚•§ D) : Prop :=
‚àÄ (f : W), f.1.is_inverted_by F

structure loc_quiver (W : arrow_class C) := (obj : C)

variable (W : arrow_class C)

instance : quiver (loc_quiver W) :=
{ hom := Œª A B, (A.obj ‚ü∂ B.obj) ‚äï { f : B.obj ‚ü∂ A.obj // arrow.mk f ‚àà W} }

@[simps]
def Œπ_loc_quiver (X : C) : paths (loc_quiver W) := paths.of.obj ‚ü®X‚ü©

namespace localization

structure relation := (X Y : paths (loc_quiver W)) (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y)

namespace relation

variable (W)
@[simps]
def mk' {X Y : paths (loc_quiver W)} (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) := relation.mk X Y f‚ÇÅ f‚ÇÇ
variable {W}

lemma congr_X_obj {r‚ÇÅ r‚ÇÇ : relation W} (h : r‚ÇÅ = r‚ÇÇ) : r‚ÇÅ.X.obj = r‚ÇÇ.X.obj := by subst h
lemma congr_Y_obj {r‚ÇÅ r‚ÇÇ : relation W} (h : r‚ÇÅ = r‚ÇÇ) : r‚ÇÅ.Y.obj = r‚ÇÇ.Y.obj := by subst h
lemma congr_f‚ÇÅ_heq {r‚ÇÅ r‚ÇÇ : relation W} (h : r‚ÇÅ = r‚ÇÇ) : r‚ÇÅ.f‚ÇÅ == r‚ÇÇ.f‚ÇÅ := by subst h
lemma congr_f‚ÇÇ_heq {r‚ÇÅ r‚ÇÇ : relation W} (h : r‚ÇÅ = r‚ÇÇ) : r‚ÇÅ.f‚ÇÇ == r‚ÇÇ.f‚ÇÇ := by subst h
lemma congr_f‚ÇÅ {X Y : paths (loc_quiver W)} {f‚ÇÅ f‚ÇÇ f‚ÇÅ' f‚ÇÇ' : X ‚ü∂ Y}
  (h : mk' W f‚ÇÅ f‚ÇÇ = mk' W f‚ÇÅ' f‚ÇÇ') : f‚ÇÅ = f‚ÇÅ' := eq_of_heq (congr_f‚ÇÅ_heq h)
lemma congr_f‚ÇÇ {X Y : paths (loc_quiver W)} {f‚ÇÅ f‚ÇÇ f‚ÇÅ' f‚ÇÇ' : X ‚ü∂ Y}
  (h : mk' W f‚ÇÅ f‚ÇÇ = mk' W f‚ÇÅ' f‚ÇÇ') : f‚ÇÇ = f‚ÇÇ' := eq_of_heq (congr_f‚ÇÇ_heq h)

end relation

def œà‚ÇÅ (f : arrow C) : W.Œπ_loc_quiver f.left ‚ü∂ W.Œπ_loc_quiver f.right := paths.of.map (sum.inl f.hom)

def œà‚ÇÇ' (g : arrow C) (hg : g ‚àà W) : W.Œπ_loc_quiver g.right ‚ü∂ W.Œπ_loc_quiver g.left :=
paths.of.map (sum.inr ‚ü®g.hom, (by { convert hg, rw arrow.mk_eq, })‚ü©)

variable {W}
def œà‚ÇÇ (w : W) : W.Œπ_loc_quiver w.1.right ‚ü∂ W.Œπ_loc_quiver w.1.left := œà‚ÇÇ' W w.1 w.2

variable (W)
@[simps]
def relations‚ÇÄ : C ‚Üí relation W := Œª X, relation.mk' W (œà‚ÇÅ W (arrow.mk (ùüô X))) (ùüô _)

variable (C)
def R‚ÇÅ := { t : arrow C √ó arrow C // t.1.right = t.2.left }
variable {C}

def œÅ‚ÇÅ {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : R‚ÇÅ C := ‚ü®‚ü®arrow.mk f, arrow.mk g‚ü©, rfl‚ü©

@[simps]
def relations‚ÇÅ : R‚ÇÅ C ‚Üí relation W := Œª t,
{ X := W.Œπ_loc_quiver t.1.1.left,
  Y := W.Œπ_loc_quiver t.1.2.right,
  f‚ÇÅ := œà‚ÇÅ W (arrow.mk (t.1.1.hom ‚â´ eq_to_hom t.2 ‚â´ t.1.2.hom)),
  f‚ÇÇ := œà‚ÇÅ W t.1.1 ‚â´ eq_to_hom (by { congr, exact t.2,}) ‚â´ œà‚ÇÅ W t.1.2, }

@[simps]
def relations‚ÇÇ (w : W) : relation W := relation.mk' W (œà‚ÇÅ W w.1 ‚â´ œà‚ÇÇ w) (ùüô _)

@[simps]
def relations‚ÇÉ (w : W) : relation W := relation.mk' W (œà‚ÇÇ w ‚â´ œà‚ÇÅ W w.1) (ùüô _)

variable {W}
def belongs_to {A B : paths (loc_quiver W)} (f g : A ‚ü∂ B)
  {D : Type*} (relations : D ‚Üí relation W) : Prop := ‚àÉ (r : D), relations r = relation.mk' W f g

variable (W)
def relations : hom_rel (paths (loc_quiver W)) :=
Œª X Y f g, belongs_to f g (relations‚ÇÄ W) ‚à® belongs_to f g (relations‚ÇÅ W) ‚à®
  belongs_to f g (relations‚ÇÇ W) ‚à® belongs_to f g (relations‚ÇÉ W)

end localization

@[derive category]
def localization := category_theory.quotient (localization.relations W)

open localization


namespace localization

variable (W)

def Q : C ‚•§ W.localization :=
{ obj := Œª X, (quotient.functor (relations W)).obj (W.Œπ_loc_quiver X),
  map := Œª X Y f, (quotient.functor (relations W)).map (œà‚ÇÅ W f),
  map_id' := Œª X, begin
    apply quotient.sound (localization.relations W),
    exact or.inl ‚ü®X, rfl‚ü©,
  end,
  map_comp' := Œª X Y Z f g, begin
    apply quotient.sound (localization.relations W),
    exact or.inr (or.inl (begin
      use localization.œÅ‚ÇÅ f g, dsimp only [localization.relations‚ÇÅ],
      congr,
      erw id_comp,refl,
    end)),
  end }

variable {W}

def Wiso (w : W) : iso ((Q W).obj w.1.left) ((Q W).obj w.1.right) :=
{ hom := (Q W).map w.1.hom,
  inv := (quotient.functor (relations W)).map (œà‚ÇÇ w),
  hom_inv_id' := begin
    erw ‚Üê (quotient.functor _).map_comp,
    apply quotient.sound,
    refine or.inr (or.inr (or.inl ‚ü®w, rfl‚ü©)),
  end,
  inv_hom_id' := begin
    erw ‚Üê (quotient.functor _).map_comp,
    apply quotient.sound,
    exact or.inr (or.inr (or.inr ‚ü®w, rfl‚ü©)),
  end }

/-- to be moved somewhere else -/
lemma congr_obj {D‚ÇÅ D‚ÇÇ : Type*} [category D‚ÇÅ] [category D‚ÇÇ] {F G : D‚ÇÅ ‚•§ D‚ÇÇ}
(h : F = G) : ‚àÄ X : D‚ÇÅ, F.obj X = G.obj X :=
by { intro X, rw h, }

lemma congr_map_conjugate {D‚ÇÅ D‚ÇÇ : Type*} [category D‚ÇÅ] [category D‚ÇÇ] {F G : D‚ÇÅ ‚•§ D‚ÇÇ}
(h : F = G) {X Y : D‚ÇÅ} (f : X ‚ü∂ Y) : F.map f =
eq_to_hom (by rw h) ‚â´ G.map f ‚â´ eq_to_hom (by rw h) :=
by { subst h, erw [id_comp, comp_id], }

lemma conjugate_inv_of_congr_map_conjugate {D‚ÇÅ D‚ÇÇ : Type*} [category D‚ÇÅ] [category D‚ÇÇ] (F G : D‚ÇÅ ‚•§ D‚ÇÇ)
  {X Y : D‚ÇÅ} (e : X ‚âÖ Y) (hX : F.obj X = G.obj X) (hY : F.obj Y = G.obj Y)
  (h‚ÇÇ : F.map e.hom = eq_to_hom (by rw hX) ‚â´ G.map e.hom ‚â´ eq_to_hom (by rw hY)) :
F.map e.inv = eq_to_hom (by rw hY) ‚â´ G.map e.inv ‚â´ eq_to_hom (by rw hX) :=
by simp only [‚Üê is_iso.iso.inv_hom e, functor.map_inv, h‚ÇÇ, is_iso.inv_comp, inv_eq_to_hom, assoc]

lemma congr_map {D D' : Type*} [category D] [category D'] (F : D ‚•§ D')
{X Y : D} {f g : X ‚ü∂ Y} (h : f = g) : F.map f = F.map g :=
by { subst h, }

/- end of block -/

@[simps]
def lift_to_loc_quiver {D : Type*} [category D] (G : C ‚•§ D) (hG : W.is_inverted_by G) :
  prefunctor (loc_quiver W) D :=
{ obj := by { rintro ‚ü®X‚ü©, exact G.obj X, },
  map := begin
    rintros ‚ü®X‚ü© ‚ü®Y‚ü© (f|‚ü®g, hg‚ü©),
    { exact G.map f, },
    { haveI : is_iso (G.map g) := hG ‚ü®arrow.mk g, hg‚ü©,
      exact inv (G.map g), },
  end }

/-- Fix category_theory.theory.Quiv.lean-/
@[simps]
def lift_to_path_category {D : Type u'} [category.{v'} D] (G : C ‚•§ D) (hG : W.is_inverted_by G) :
  paths (loc_quiver W) ‚•§ D :=
{ obj := Œª X, (lift_to_loc_quiver G hG).obj X,
  map := Œª X Y f, compose_path ((lift_to_loc_quiver G hG).map_path f), }

@[simp]
lemma lift_œà‚ÇÅ_eq {D : Type*} [category D] (G : C ‚•§ D) (hG : W.is_inverted_by G)
  (f : arrow C) : (lift_to_path_category G hG).map (œà‚ÇÅ W f) = G.map f.hom :=
begin
  dsimp [lift_to_path_category, œà‚ÇÅ, quiver.hom.to_path],
  simpa only [id_comp],
end

@[simp]
lemma lift_œà‚ÇÇ_eq {D : Type*} [category D] (G : C ‚•§ D) (hG : W.is_inverted_by G)
  (w : W) : (lift_to_path_category G hG).map (œà‚ÇÇ w) = 
  (by { haveI : is_iso (G.map w.1.hom) := hG w, exact inv (G.map w.1.hom), }) :=
begin
  dsimp [lift_to_loc_quiver, lift_to_path_category, œà‚ÇÇ, œà‚ÇÇ', quiver.hom.to_path],
  simpa only [id_comp],
end

lemma W_is_inverted_by_Q : W.is_inverted_by (Q W) := Œª w, is_iso.of_iso (Wiso w)

def lift {D : Type u'} [category.{v'} D] (G : C ‚•§ D) (hG : W.is_inverted_by G) :
  localization W ‚•§ D :=
begin
  apply quotient.lift (relations W) (lift_to_path_category G hG),
  { rintro ‚ü®X‚ü© ‚ü®Y‚ü© f‚ÇÅ f‚ÇÇ r,
    rcases r with (_|_|_|_),
    work_on_goal 1 { rcases r with ‚ü®X', r‚ü©, },
    work_on_goal 2 { rcases r with ‚ü®‚ü®‚ü®‚ü®X',Z,f‚ü©,‚ü®Z',Y',g‚ü©‚ü©, h‚ü©, r‚ü©, },
    work_on_goal 3 { rcases r with ‚ü®w, r‚ü©, },
    work_on_goal 4 { rcases r with ‚ü®w, r‚ü©, },
    all_goals {
      have eqX := relation.congr_X_obj r,
      have eqY := relation.congr_Y_obj r,
      dsimp at eqX eqY,
      substs eqX eqY,
      have eqf‚ÇÅ := relation.congr_f‚ÇÅ r,
      have eqf‚ÇÇ := relation.congr_f‚ÇÇ r,
      substs eqf‚ÇÅ eqf‚ÇÇ, clear r, },
    { erw [lift_œà‚ÇÅ_eq, functor.map_id, functor.map_id],
      refl, },
    { dsimp at h,
      substs h,
      dsimp only [arrow.mk],
      simp only [functor.map_comp, lift_œà‚ÇÅ_eq,
        eq_to_hom_refl, functor.map_id, id_comp], },
    all_goals
    { erw [functor.map_comp, functor.map_id, lift_œà‚ÇÅ_eq, lift_œà‚ÇÇ_eq], },
    { apply is_iso.hom_inv_id, },
    { apply is_iso.inv_hom_id, }, },
end

@[simp]
lemma fac {D : Type u'} [category.{v'} D] (G : C ‚•§ D) (hG : W.is_inverted_by G) :
  Q W ‚ãô lift G hG = G :=
begin
  apply functor.ext,
  { intros X Y f,
    dsimp [lift, lift_to_path_category, lift_to_loc_quiver, Q, œà‚ÇÅ, quiver.hom.to_path,
      Œπ_loc_quiver],
    erw [id_comp, comp_id, id_comp],
    refl, },
  { intro X,
    refl, }
end

lemma uniq {D : Type*} [category D] (G‚ÇÅ G‚ÇÇ : localization W ‚•§ D) (h : Q W ‚ãô G‚ÇÅ = Q W ‚ãô G‚ÇÇ) : G‚ÇÅ = G‚ÇÇ :=
begin
  suffices h' : (quotient.functor (relations W)) ‚ãô G‚ÇÅ = (quotient.functor (relations W)) ‚ãô G‚ÇÇ,
  { apply functor.ext,
    { rintros ‚ü®‚ü®X‚ü©‚ü© ‚ü®‚ü®Y‚ü©‚ü© ‚ü®f‚ü©,
      convert congr_map_conjugate h' f, },
    { rintro ‚ü®‚ü®X‚ü©‚ü©,
      convert congr_obj h X, }, },
  { apply paths.ext_functor,
    { rintro ‚ü®X‚ü© ‚ü®Y‚ü© f,
      cases f,
      { convert congr_map_conjugate h f, },
      { rcases f with ‚ü®g, hg‚ü©,
        dsimp at g hg,
        have hŒ± : (Wiso ‚ü®arrow.mk g, hg‚ü©).hom = (Q W).map g := rfl,
        have h' := congr_map_conjugate h g,
        simp only [functor.comp_map, ‚Üê hŒ±] at h',
        refine conjugate_inv_of_congr_map_conjugate G‚ÇÅ G‚ÇÇ _ _ _ h',
        { convert congr_obj h Y, },
        { convert congr_obj h X, }, }, },
    { ext X,
      cases X,
      have eq := congr_obj h X,
      dsimp at ‚ä¢ eq,
      convert eq, }, },
end

instance (w : W) : is_iso ((Q W).map w.1.hom) := is_iso.of_iso (Wiso w)

end localization

variable (L : C ‚•§ D)

structure is_localization (W : arrow_class C) (L : C ‚•§ D) :=
(inverts_W : W.is_inverted_by L)
(is_equivalence : is_equivalence (localization.lift L inverts_W))

structure is_strict_localization (W : arrow_class C) (L : C ‚•§ D) extends is_localization W L :=
(is_isomorphism : (localization.lift L inverts_W ‚ãô is_equivalence.inverse).obj = id
  ‚àß (is_equivalence.inverse ‚ãô localization.lift L inverts_W).obj = id)

end arrow_class

end category_theory
