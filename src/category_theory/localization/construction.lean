/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import category_theory.localization.basic
import algebraic_topology.homotopical_algebra.model_category
import category_theory.quotient
import category_theory.path_category

open category_theory

namespace category_theory

universes v u

variables {C : Type u} [category.{v} C] (W : hom_class C)

include W

structure preloc := (as : C)

instance : quiver (preloc W) := { hom := Œª A B,  (A.as ‚ü∂ B.as) ‚äï (W B.as A.as : Type v) }

variable (W)

def R‚ÇÅ := Œ£ (T : C √ó C √ó C), (T.1 ‚ü∂ T.2.1) √ó (T.2.1 ‚ü∂ T.2.2)
def R‚ÇÇ := Œ£ (T : C √ó C), (W T.1 T.2 : Type v)
def R‚ÇÉ := R‚ÇÇ W
def œÅ‚ÇÅ {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : R‚ÇÅ W := ‚ü®‚ü®X, ‚ü®Y, Z‚ü©‚ü©, ‚ü®f, g‚ü©‚ü©
def œÅ‚ÇÇ‚ÇÉ {X Y : C} (g : X ‚ü∂ Y) (hg : W X Y g) : R‚ÇÇ W := ‚ü®‚ü®X,Y‚ü©, ‚ü®g, hg‚ü©‚ü©

def F := Œ£ (D : paths (preloc W) √ó paths (preloc W)), (D.1 ‚ü∂ D.2) √ó (D.1 ‚ü∂ D.2)

def œÜ (X : C) : paths (preloc W) := paths.of.obj { as := X }

def œà‚ÇÅ {X Y : C} (f : X ‚ü∂ Y) : œÜ W X ‚ü∂ œÜ W Y := paths.of.map (sum.inl f)
def œà‚ÇÇ {X Y : C} (g : X ‚ü∂ Y) (hg : W X Y g): œÜ W Y ‚ü∂ œÜ W X := paths.of.map (sum.inr ‚ü®g, hg‚ü©)

def relations‚ÇÄ : C ‚Üí F W := by { intro X, exact ‚ü®‚ü®‚ü®X‚ü©, ‚ü®X‚ü©‚ü©, ‚ü®œà‚ÇÅ W (ùüô _), ùüô _‚ü©‚ü©, }
def relations‚ÇÅ : R‚ÇÅ W ‚Üí F W :=
by { rintro ‚ü®‚ü®X,‚ü®Y,Z‚ü©‚ü©, ‚ü®f,g‚ü©‚ü©, exact ‚ü®‚ü®‚ü®X‚ü©, ‚ü®Z‚ü©‚ü©, ‚ü®œà‚ÇÅ W (f ‚â´ g), œà‚ÇÅ W f ‚â´ œà‚ÇÅ W g‚ü©‚ü©, }
def relations‚ÇÇ : R‚ÇÇ W ‚Üí F W :=
by { rintro ‚ü®‚ü®X, Y‚ü©, ‚ü®w, hw‚ü©‚ü©, exact ‚ü®‚ü®‚ü®X‚ü©, ‚ü®X‚ü©‚ü©, ‚ü®œà‚ÇÅ W w ‚â´ œà‚ÇÇ W w hw, ùüô _‚ü©‚ü©, }
def relations‚ÇÉ : R‚ÇÉ W ‚Üí F W :=
by { rintro ‚ü®‚ü®X, Y‚ü©, ‚ü®w, hw‚ü©‚ü©, exact ‚ü®‚ü®‚ü®Y‚ü©, ‚ü®Y‚ü©‚ü©, ‚ü®œà‚ÇÇ W w hw ‚â´ œà‚ÇÅ W w, ùüô _‚ü©‚ü©, }

variable {W}
def belongs_to {A B : paths (preloc W)} (f g : A ‚ü∂ B) {D : Type*} (relations : D ‚Üí F W) : Prop :=
‚àÉ (r : D), relations r = ‚ü®‚ü®A, B‚ü©, ‚ü®f, g‚ü©‚ü©

variable (W)
def relations : hom_rel (paths (preloc W)) :=
Œª X Y f g, belongs_to f g (relations‚ÇÄ W) ‚à® belongs_to f g (relations‚ÇÅ W) ‚à®
  belongs_to f g (relations‚ÇÇ W) ‚à® belongs_to f g (relations‚ÇÉ W)

def localization := category_theory.quotient (relations W)

instance : category (localization W) := (infer_instance : category (category_theory.quotient (relations W)))

def Q : C ‚•§ localization W :=
{ obj := Œª X, (quotient.functor (relations W)).obj (œÜ W X),
  map := Œª X Y f, (quotient.functor (relations W)).map (œà‚ÇÅ W f),
  map_id' := Œª X, begin
    apply quotient.sound (relations W),
    exact or.inl ‚ü®X, rfl‚ü©,
  end,
  map_comp' := Œª X Y Z f g, begin
    apply quotient.sound (relations W),
    exact or.inr (or.inl (‚ü®œÅ‚ÇÅ W f g, rfl‚ü©)),
  end }

variable {W}

def Winv {X Y : C} (g : X ‚ü∂ Y) (hg : W X Y g) : (Q W).obj Y ‚ü∂ (Q W).obj X :=
(quotient.functor (relations W)).map (œà‚ÇÇ W g hg)

omit W

lemma congr_obj {D‚ÇÅ D‚ÇÇ : Type*} [category D‚ÇÅ] [category D‚ÇÇ] {F G : D‚ÇÅ ‚•§ D‚ÇÇ}
(h : F = G) : ‚àÄ X : D‚ÇÅ, F.obj X = G.obj X :=
by { intro X, rw h, }

theorem localisation_is_localisation : is_localization (Q W) W :=
{ inverts_W := begin
    intros X Y g hg,
    refine ‚ü®_‚ü©,
    use Winv g hg,
    dsimp only [Winv],
    split,
    { erw ‚Üê (quotient.functor (relations W)).map_comp (œà‚ÇÅ W g) (œà‚ÇÇ W g hg),
      apply quotient.sound (relations W),
      exact or.inr (or.inr (or.inl ‚ü®œÅ‚ÇÇ‚ÇÉ W g hg, rfl‚ü©)), },
    { erw ‚Üê (quotient.functor (relations W)).map_comp (œà‚ÇÇ W g hg) (œà‚ÇÅ W g),
      apply quotient.sound (relations W),
      exact or.inr (or.inr (or.inr ‚ü®œÅ‚ÇÇ‚ÇÉ W g hg, rfl‚ü©)), },
  end,
  universal‚ÇÅ := sorry,
  universal‚ÇÇ := Œª D, begin
    introI,
    intros G' G'' h,
    apply functor.ext,
    { rintros ‚ü®‚ü®X‚ü©‚ü© ‚ü®‚ü®Y‚ü©‚ü© f,
      sorry, },
    { rintro ‚ü®‚ü®X‚ü©‚ü©,
      convert congr_obj h X, },
  end }

end category_theory
