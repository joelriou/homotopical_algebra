/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import category_theory.arrow_class
import category_theory.equivalence
import category_theory.eq_to_hom

open category_theory
open category_theory.category
open opposite

universes v' u'
variables {C C'' D : Type*} [category C] [category C''] [category D]
variables {C' : Type u'} [category.{v'} C']

namespace category_theory
namespace arrow

def is_inverted_by (f : arrow C) (F : C ‚•§ D) : Prop := is_iso (F.map f.hom)

end arrow

namespace arrow_class

def is_inverted_by (W : arrow_class C) (F : C ‚•§ D) : Prop :=
‚àÄ (f : arrow C), f ‚àà W ‚Üí f.is_inverted_by F

end arrow_class

lemma functor.assoc {C D E F : Type*} [category C] [category D]
  [category E] [category F] (œÜ : C ‚•§ D)
  (œÜ' : D ‚•§ E) (œÜ'' : E ‚•§ F) : (œÜ ‚ãô œÜ') ‚ãô œÜ'' = œÜ ‚ãô (œÜ' ‚ãô œÜ'') :=
by refl

structure is_localization (F : C ‚•§ C') (W : arrow_class C) :=
  (inverts_W : W.is_inverted_by F)
  (lift : Œ† {D : Type*} [category D] (G : C ‚•§ D) (hG : W.is_inverted_by G), C' ‚•§ D)
  (fac : ‚àÄ {D : Type*} [category D] (G : C ‚•§ D) (hG : W.is_inverted_by G), G = F ‚ãô lift G hG)
  (uniq : ‚àÄ {D : Type*} [category D] (G' G'' : C' ‚•§ D), F ‚ãô G' = F ‚ãô G'' ‚Üí G' = G'')

def localization_wrt_isomorphisms : is_localization (ùü≠ C) arrow_class.isomorphisms :=
{ inverts_W := Œª f hf, hf,
  lift := Œª D hD G hG, G,
  fac := Œª D hD H hG, by rw functor.id_comp,
  uniq := Œª D hD G' G'' h, by simpa [functor.id_comp] using h, }

def localization_is_ess_unique {W : arrow_class C} {F‚ÇÅ : C ‚•§ C'} {F‚ÇÇ : C ‚•§ C''}
  (L‚ÇÅ : is_localization F‚ÇÅ W) (L‚ÇÇ : is_localization F‚ÇÇ W) : C' ‚âå C'' :=
{ functor := L‚ÇÅ.lift F‚ÇÇ L‚ÇÇ.inverts_W,
  inverse := L‚ÇÇ.lift F‚ÇÅ L‚ÇÅ.inverts_W,
  unit_iso := eq_to_iso begin
    apply L‚ÇÅ.uniq,
    rw [‚Üê functor.assoc, ‚Üê L‚ÇÅ.fac F‚ÇÇ L‚ÇÇ.inverts_W, ‚Üê L‚ÇÇ.fac F‚ÇÅ L‚ÇÅ.inverts_W, functor.comp_id],
  end,
  counit_iso := eq_to_iso begin
    apply L‚ÇÇ.uniq,
    rw [‚Üê functor.assoc, ‚Üê L‚ÇÇ.fac F‚ÇÅ L‚ÇÅ.inverts_W, ‚Üê L‚ÇÅ.fac F‚ÇÇ L‚ÇÇ.inverts_W, functor.comp_id],
  end,
  functor_unit_iso_comp' := begin
    intro X,
    simpa only [eq_to_iso.hom, eq_to_hom_app, eq_to_hom_map, eq_to_hom_trans, eq_to_hom_refl],
  end }

namespace is_localization

end is_localization

end category_theory
