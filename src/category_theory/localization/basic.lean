/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import category_theory.arrow_class
import category_theory.equivalence
import category_theory.eq_to_hom

open category_theory
open category_theory.category
open opposite

universes v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

variables {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C]
variables {D D' : Type u‚ÇÇ} [category.{v‚ÇÇ} D] [category.{v‚ÇÇ} D']

namespace category_theory

namespace arrow

def is_inverted_by (f : arrow C) (F : C ‚•§ D) : Prop := is_iso (F.map f.hom)

end arrow

namespace arrow_class

def is_inverted_by (W : arrow_class C) (F : C ‚•§ D) : Prop :=
‚àÄ (f : W), f.1.is_inverted_by F

end arrow_class

lemma functor.assoc {C D E F : Type*} [category C] [category D]
  [category E] [category F] (œÜ : C ‚•§ D)
  (œÜ' : D ‚•§ E) (œÜ'' : E ‚•§ F) : (œÜ ‚ãô œÜ') ‚ãô œÜ'' = œÜ ‚ãô (œÜ' ‚ãô œÜ'') :=
by refl

structure is_localization_fixed_target (W : arrow_class C) (F : C ‚•§ D)  (E : Type u‚ÇÉ) [category.{v‚ÇÉ} E] :=
  (inverts_W : W.is_inverted_by F)
  (lift : Œ† (G : C ‚•§ E) (hG : W.is_inverted_by G), D ‚•§ E)
  (fac : ‚àÄ (G : C ‚•§ E) (hG : W.is_inverted_by G), G = F ‚ãô lift G hG)
  (uniq : ‚àÄ (G‚ÇÅ G‚ÇÇ : D ‚•§ E), F ‚ãô G‚ÇÅ = F ‚ãô G‚ÇÇ ‚Üí G‚ÇÅ = G‚ÇÇ)


/-



def localization_wrt_isomorphisms (E : Type u‚ÇÉ) [category.{v‚ÇÉ} E] :
  is_localization_fixed_target E (ùü≠ C) arrow_class.isomorphisms :=
{ inverts_W := Œª w, w.2,
  lift := Œª G hG, G,
  fac := Œª G hG, by rw functor.id_comp,
  uniq := Œª G‚ÇÅ G‚ÇÇ h, by simpa [functor.id_comp] using h, }

def localization_is_ess_unique {W : arrow_class C} (F‚ÇÅ : C ‚•§ D) (F‚ÇÇ : C ‚•§ D')
  (L‚ÇÅ : is_localization_fixed_target D' F‚ÇÅ W) (L‚ÇÇ : is_localization_fixed_target D F‚ÇÇ W)
  (L‚ÇÅ' : is_localization_fixed_target D F‚ÇÅ W) (L‚ÇÇ' : is_localization_fixed_target D' F‚ÇÇ W) : D ‚âå D' :=
{ functor := L‚ÇÅ.lift F‚ÇÇ L‚ÇÇ.inverts_W,
  inverse := L‚ÇÇ.lift F‚ÇÅ L‚ÇÅ.inverts_W,
  unit_iso := eq_to_iso begin
    apply L‚ÇÅ'.uniq,
    rw [‚Üê functor.assoc, ‚Üê L‚ÇÅ.fac F‚ÇÇ L‚ÇÇ.inverts_W, ‚Üê L‚ÇÇ.fac F‚ÇÅ L‚ÇÅ.inverts_W, functor.comp_id],
  end,
  counit_iso := eq_to_iso begin
    apply L‚ÇÇ'.uniq,
    rw [‚Üê functor.assoc, ‚Üê L‚ÇÇ.fac F‚ÇÅ L‚ÇÅ.inverts_W, ‚Üê L‚ÇÅ.fac F‚ÇÇ L‚ÇÇ.inverts_W, functor.comp_id],
  end,
  functor_unit_iso_comp' := begin
    intro X,
    simpa only [eq_to_iso.hom, eq_to_hom_app, eq_to_hom_map, eq_to_hom_trans, eq_to_hom_refl],
  end }-/



end category_theory
