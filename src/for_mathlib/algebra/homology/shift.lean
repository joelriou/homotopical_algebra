import category_theory.shift
import algebra.homology.homological_complex
import tactic.linarith

noncomputable theory

open category_theory category_theory.category category_theory.limits

namespace homological_complex

variables (C : Type*) [category C] [has_zero_morphisms C]

section

variables {C} {Œπ : Type*} {c : complex_shape Œπ}

def X_iso_of_eq (K : homological_complex C c) {n n' : Œπ} (h : n = n') :
  K.X n ‚âÖ K.X n' :=
eq_to_iso (by congr')

@[simp]
lemma X_iso_of_eq_refl (K : homological_complex C c) (n : Œπ) :
  K.X_iso_of_eq (rfl : n = n) = iso.refl _ :=
begin
  dsimp only [X_iso_of_eq],
  simp,
end

@[simp, reassoc]
lemma X_iso_of_eq_hom_comp_d (K : homological_complex C c) {n n' : Œπ} (h : n = n') (n'' : Œπ) :
  (K.X_iso_of_eq h).hom ‚â´ K.d n' n'' = K.d n n'' :=
by { subst h, simp, }

@[simp, reassoc]
lemma X_iso_of_eq_inv_comp_d (K : homological_complex C c) {n n' : Œπ} (h : n = n') (n'' : Œπ) :
  (K.X_iso_of_eq h).inv ‚â´ K.d n n'' = K.d n' n'' :=
by { subst h, simp, }

@[simp, reassoc]
lemma d_comp_X_iso_of_eq_hom (K : homological_complex C c) (n : Œπ) {n' n'' : Œπ} (h : n' = n'') :
  K.d n n' ‚â´ (K.X_iso_of_eq h).hom = K.d n n'' :=
by { subst h, simp, }

@[simp, reassoc]
lemma d_comp_X_iso_of_eq_inv (K : homological_complex C c) (n : Œπ) {n' n'' : Œπ} (h : n' = n'') :
  K.d n n'' ‚â´ (K.X_iso_of_eq h).inv = K.d n n' :=
by { subst h, simp, }

@[reassoc]
lemma X_iso_of_eq_hom_naturality {K L : homological_complex C c} (œÜ : K ‚ü∂ L) {n n' : Œπ}
  (h : n = n') :
  œÜ.f n ‚â´ (L.X_iso_of_eq h).hom = (K.X_iso_of_eq h).hom ‚â´ œÜ.f n' :=
by { subst h, simp, }

@[reassoc]
lemma X_iso_of_eq_inv_naturality {K L : homological_complex C c} (œÜ : K ‚ü∂ L) {n n' : Œπ}
  (h : n = n') :
  œÜ.f n' ‚â´ (L.X_iso_of_eq h).inv = (K.X_iso_of_eq h).inv ‚â´ œÜ.f n :=
by { subst h, simp, }

@[simp, reassoc]
lemma X_iso_of_eq_hom_hom (K : homological_complex C c) {n n' n'' : Œπ} (h : n = n') (h' : n' = n'') :
  (K.X_iso_of_eq h).hom ‚â´ (K.X_iso_of_eq h').hom = (K.X_iso_of_eq (h.trans h')).hom :=
by { substs h h', simp, }

@[simp, reassoc]
lemma X_iso_of_eq_hom_inv (K : homological_complex C c) {n n' n'' : Œπ} (h : n = n') (h' : n'' = n') :
  (K.X_iso_of_eq h).hom ‚â´ (K.X_iso_of_eq h').inv = (K.X_iso_of_eq (h.trans h'.symm)).hom :=
by { substs h h', simp, }

@[simp, reassoc]
lemma X_iso_of_eq_inv_hom (K : homological_complex C c) {n n' n'' : Œπ} (h : n' = n) (h' : n' = n'') :
  (K.X_iso_of_eq h).inv ‚â´ (K.X_iso_of_eq h').hom = (K.X_iso_of_eq (h.symm.trans h')).hom :=
by { substs h h', simp, }

@[simp, reassoc]
lemma X_iso_of_eq_inv_inv (K : homological_complex C c) {n n' n'' : Œπ} (h : n' = n) (h' : n'' = n') :
  (K.X_iso_of_eq h).inv ‚â´ (K.X_iso_of_eq h').inv = (K.X_iso_of_eq (h'.trans h)).inv :=
by { substs h h', simp, }

end

local attribute [simp] X_iso_of_eq_hom_naturality X_iso_of_eq_inv_naturality

@[simps obj_d map_f]
def shift_functor (n : ‚Ñ§) : cochain_complex C ‚Ñ§ ‚•§ cochain_complex C ‚Ñ§ :=
{ obj := Œª K,
  { X := Œª i, K.X (i+n),
    d := Œª i j, K.d _ _,
    shape' := Œª i j hij, begin
      rw K.shape,
      intro hij',
      apply hij,
      dsimp [complex_shape.up] at hij' ‚ä¢,
      linarith,
    end, },
  map := Œª K‚ÇÅ K‚ÇÇ œÜ,
  { f := Œª i, œÜ.f _, }, }

variable {C}

@[simp]
lemma X_iso_of_eq_of_shift_functor (K : cochain_complex C ‚Ñ§) (n : ‚Ñ§) {i i' : ‚Ñ§} (h : i = i') :
  ((shift_functor C n).obj K).X_iso_of_eq h = K.X_iso_of_eq (by subst h) := rfl

@[simp]
def shift_functor_obj_X_iso (K : cochain_complex C ‚Ñ§) (n i m : ‚Ñ§) (hm : m = i + n) :
  ((shift_functor C n).obj K).X i ‚âÖ K.X m :=
X_iso_of_eq K hm.symm

variable (C)

@[simp]
def shift_functor_congr {n n' : ‚Ñ§} (h : n = n') :
  shift_functor C n ‚âÖ shift_functor C n' :=
nat_iso.of_components
  (Œª K, hom.iso_of_components (Œª i, K.X_iso_of_eq (by subst h))
  (Œª i j hij, by { dsimp, simp, })) (Œª K‚ÇÅ K‚ÇÇ œÜ, by { ext, dsimp, simp, })

@[simps]
def shift_functor_zero' (n : ‚Ñ§) (h : n = 0) :
  shift_functor C n ‚âÖ ùü≠ _ :=
nat_iso.of_components (Œª K, hom.iso_of_components
  (Œª i, K.shift_functor_obj_X_iso _ _ _ (by linarith)) (by tidy)) (by tidy)

@[simps]
def shift_functor_add' (n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§) (h : n‚ÇÅ‚ÇÇ = n‚ÇÅ + n‚ÇÇ) :
  shift_functor C n‚ÇÅ ‚ãô shift_functor C n‚ÇÇ ‚âÖ shift_functor C n‚ÇÅ‚ÇÇ :=
nat_iso.of_components
  (Œª K, hom.iso_of_components (Œª i, K.X_iso_of_eq (by linarith)) (by tidy)) (by tidy)

instance : has_shift (cochain_complex C ‚Ñ§) ‚Ñ§ :=
has_shift_mk _ _
{ F := shift_functor C,
  Œµ := (shift_functor_zero' C _ rfl).symm,
  Œº := Œª n‚ÇÅ n‚ÇÇ, shift_functor_add' C n‚ÇÅ n‚ÇÇ _ rfl,
  associativity := Œª n‚ÇÅ n‚ÇÇ n‚ÇÉ K, by { ext i, dsimp [X_iso_of_eq], simp, }, }

end homological_complex
