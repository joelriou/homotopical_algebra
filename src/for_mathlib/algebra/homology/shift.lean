import tactic.linarith
import category_theory.shift
import algebra.homology.homological_complex
import algebra.homology.homotopy_category
import for_mathlib.category_theory.quotient_shift
import for_mathlib.algebra.homology.hom_complex

noncomputable theory

open category_theory category_theory.category category_theory.limits

variables (C : Type*) [category C] [preadditive C]

namespace cochain_complex

open homological_complex

local attribute [simp] X_iso_of_eq_hom_naturality X_iso_of_eq_inv_naturality

@[simps obj_d map_f]
def shift_functor (n : ‚Ñ§) : cochain_complex C ‚Ñ§ ‚•§ cochain_complex C ‚Ñ§ :=
{ obj := Œª K,
  { X := Œª i, K.X (i+n),
    d := Œª i j, cochain_complex.hom_complex.Œµ n ‚Ä¢ K.d _ _,
    shape' := Œª i j hij, begin
      rw [K.shape, smul_zero],
      intro hij',
      apply hij,
      dsimp [complex_shape.up] at hij' ‚ä¢,
      linarith,
    end, },
  map := Œª K‚ÇÅ K‚ÇÇ œÜ,
  { f := Œª i, œÜ.f _, }, }

variable {C}

@[simp]
lemma X_iso_of_eq_of_shift_functor (K : cochain_complex C ‚Ñ§) (n : ‚Ñ§) {i i' : ‚Ñ§} (h : i = i') :
  ((shift_functor C n).obj K).X_iso_of_eq h = K.X_iso_of_eq (by subst h) := rfl

@[simp]
def shift_functor_obj_X_iso (K : cochain_complex C ‚Ñ§) (n i m : ‚Ñ§) (hm : m = i + n) :
  ((shift_functor C n).obj K).X i ‚âÖ K.X m :=
X_iso_of_eq K hm.symm

variable (C)

@[simp]
def shift_functor_congr {n n' : ‚Ñ§} (h : n = n') :
  shift_functor C n ‚âÖ shift_functor C n' :=
nat_iso.of_components
  (Œª K, hom.iso_of_components (Œª i, K.X_iso_of_eq (by subst h))
  (Œª i j hij, by { dsimp, simp [h], })) (Œª K‚ÇÅ K‚ÇÇ œÜ, by { ext, dsimp, simp, })

@[simps]
def shift_functor_zero' (n : ‚Ñ§) (h : n = 0) :
  shift_functor C n ‚âÖ ùü≠ _ :=
nat_iso.of_components (Œª K, hom.iso_of_components
  (Œª i, K.shift_functor_obj_X_iso _ _ _ (by linarith))
    (by { subst h, tidy, })) (by tidy)

@[simps]
def shift_functor_add' (n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§) (h : n‚ÇÅ‚ÇÇ = n‚ÇÅ + n‚ÇÇ) :
  shift_functor C n‚ÇÅ ‚ãô shift_functor C n‚ÇÇ ‚âÖ shift_functor C n‚ÇÅ‚ÇÇ :=
nat_iso.of_components
  (Œª K, hom.iso_of_components (Œª i, K.X_iso_of_eq (by linarith))
  (Œª i j hij, begin
    subst h,
    dsimp,
    simp only [linear.comp_smul, X_iso_of_eq_hom_comp_d, linear.smul_comp,
      d_comp_X_iso_of_eq_hom, ‚Üê mul_smul, ‚Üê cochain_complex.hom_complex.Œµ_add, add_comm n‚ÇÅ],
  end)) (by tidy)

instance : has_shift (cochain_complex C ‚Ñ§) ‚Ñ§ :=
has_shift_mk _ _
{ F := shift_functor C,
  Œµ := (shift_functor_zero' C _ rfl).symm,
  Œº := Œª n‚ÇÅ n‚ÇÇ, shift_functor_add' C n‚ÇÅ n‚ÇÇ _ rfl,
  associativity := Œª n‚ÇÅ n‚ÇÇ n‚ÇÉ K, by { ext i, dsimp [X_iso_of_eq], simp, }, }

variable {C}

@[simp]
lemma shift_functor_map_f' {K L : cochain_complex C ‚Ñ§} (œÜ : K ‚ü∂ L) (n p : ‚Ñ§) :
  ((category_theory.shift_functor (cochain_complex C ‚Ñ§) n).map œÜ).f p = œÜ.f (p+n) := rfl

@[simp]
lemma shift_functor_obj_d' (K : cochain_complex C ‚Ñ§) (n i j : ‚Ñ§) :
  ((category_theory.shift_functor (cochain_complex C ‚Ñ§) n).obj K).d i j =
    cochain_complex.hom_complex.Œµ n ‚Ä¢ K.d _ _ := rfl

lemma shift_functor_add_inv_app_f (K : cochain_complex C ‚Ñ§) (a b n : ‚Ñ§) :
  ((shift_functor_add (cochain_complex C ‚Ñ§) a b).inv.app K : _ ‚ü∂ _).f n =
    (K.X_iso_of_eq (by { dsimp, rw [add_comm a, add_assoc],})).hom := rfl

lemma shift_functor_add_hom_app_f (K : cochain_complex C ‚Ñ§) (a b n : ‚Ñ§) :
  ((shift_functor_add (cochain_complex C ‚Ñ§) a b).hom.app K : _ ‚ü∂ _).f n =
    (K.X_iso_of_eq (by { dsimp, rw [add_comm a, add_assoc],})).inv :=
begin
  haveI : is_iso (((shift_functor_add (cochain_complex C ‚Ñ§) a b).inv.app K : _ ‚ü∂ _).f n),
  { rw shift_functor_add_inv_app_f,
    apply_instance, },
  rw [‚Üê cancel_mono (((shift_functor_add (cochain_complex C ‚Ñ§) a b).inv.app K : _ ‚ü∂ _).f n),
    ‚Üê homological_complex.comp_f, iso.hom_inv_id_app, homological_complex.id_f,
    shift_functor_add_inv_app_f, iso.inv_hom_id],
end

lemma shift_functor_add_comm_hom_app_f (K : cochain_complex C ‚Ñ§) (a b n : ‚Ñ§) :
  ((shift_functor_add_comm (cochain_complex C ‚Ñ§) a b).hom.app K : _ ‚ü∂ _).f n =
    (K.X_iso_of_eq (by { dsimp, simp only [add_assoc, add_comm a], })).hom :=
begin
  dsimp only [shift_functor_add_comm, iso.trans, iso.symm],
  simpa only [nat_trans.comp_app, homological_complex.comp_f,
    shift_functor_add_hom_app_f, shift_functor_add_inv_app_f,
    homological_complex.X_iso_of_eq, eq_to_iso.inv, eq_to_iso.hom, eq_to_hom_app,
    homological_complex.eq_to_hom_f, eq_to_hom_trans],
end

end cochain_complex
