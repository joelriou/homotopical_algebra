import for_mathlib.category_theory.triangulated.triangulated
import for_mathlib.algebra.homology.pretriangulated

open category_theory category_theory.pretriangulated category_theory.triangulated
  category_theory.limits category_theory.category

noncomputable theory

variables {C : Type*} [category C] [preadditive C] [has_zero_object C]
  [has_binary_biproducts C]

namespace cochain_complex

open hom_complex

variables {X‚ÇÅ X‚ÇÇ X‚ÇÉ : cochain_complex C ‚Ñ§} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (g : X‚ÇÇ ‚ü∂ X‚ÇÉ)

@[simps mor‚ÇÅ mor‚ÇÇ mor‚ÇÉ]
def mapping_cone_comp_triangle : triangle (cochain_complex C ‚Ñ§) :=
triangle.mk (mapping_cone_map f (f ‚â´ g) (ùüô X‚ÇÅ) g (by rw id_comp))
  (mapping_cone_map (f ‚â´ g) g f (ùüô X‚ÇÉ) (by rw comp_id))
    (mapping_cone_Œ¥ g ‚â´ (Œπ_mapping_cone f)‚ü¶1‚üß')

@[simp]
def mapping_cone_comp_homotopy_equiv.hom :
  mapping_cone g ‚ü∂ mapping_cone (mapping_cone_comp_triangle f g).mor‚ÇÅ :=
mapping_cone.lift _
  (mapping_cone.desc_cocycle g (cochain.of_hom (Œπ_mapping_cone f)) 0 (zero_add 1)
    (by simp only [cocycle.Œ¥_cochain_of_hom, subtype.val_eq_coe, add_subgroup.coe_zero,
  cochain.comp_zero, smul_zero]))
    (mapping_cone.desc_cochain _ 0 (cochain.of_hom (Œπ_mapping_cone (f ‚â´ g))) (neg_add_self 1))
  begin
    simp only [mapping_cone.Œ¥_desc_cochain _ _ _ _ (zero_add 1),
      zero_add, cocycle.Œ¥_cochain_of_hom, cochain.comp_zero, Œ¥_zero, Œµ_1, neg_smul,
      one_zsmul, cochain.comp_neg, add_zero, mapping_cone_comp_triangle_mor‚ÇÅ, neg_add_eq_zero],
    rw mapping_cone_cochain_ext _ _ (zero_add 1).symm,
    split,
    { simp only [‚Üê hom_complex.cochain.comp_assoc_of_third_is_zero_cochain,
        mapping_cone_inl_comp_fst, cochain.id_comp, mapping_cone.desc_cocycle_coe,
        mapping_cone.inl_desc_cochain],
      simp only [‚Üê cochain.of_hom_comp, Œπ_comp_mapping_cone_map], },
    { simp only [‚Üê hom_complex.cochain.comp_assoc_of_first_is_zero_cochain,
        add_subgroup.coe_zero, mapping_cone_inr_comp_fst, cochain.zero_comp, mapping_cone.desc_cocycle_coe,
        mapping_cone.inr_desc_cochain], },
  end

@[simp]
def mapping_cone_comp_homotopy_equiv.inv :
  mapping_cone (mapping_cone_comp_triangle f g).mor‚ÇÅ ‚ü∂ mapping_cone g :=
mapping_cone.desc _ ((mapping_cone_snd f).comp (mapping_cone_inl g) (zero_add _).symm)
  (mapping_cone.desc _ ((cochain.of_hom f).comp (mapping_cone_inl g)
    (zero_add _).symm) (Œπ_mapping_cone g)
    (by simpa only [add_zero, add_left_neg, Œ¥_comp_of_first_is_zero_cochain,
      mapping_cone_Œ¥_inl, cochain.of_hom_comp,
      cocycle.Œ¥_cochain_of_hom, cochain.zero_comp, smul_zero, assoc]))
begin
  dsimp,
  simp only [add_left_neg, Œ¥_comp_of_first_is_zero_cochain, mapping_cone_Œ¥_inl,
    cochain.of_hom_comp, eq_self_iff_true, mapping_cone_Œ¥_snd, cochain.neg_comp, one_smul,
    cochain.comp_assoc_of_second_is_zero_cochain, zsmul_neg', neg_smul, Œµ_neg, Œµ_1, neg_neg,
    mapping_cone_cochain_ext _ _ (neg_add_self 1).symm, mapping_cone_map,
    cochain.comp_add],
  split,
  { simpa only [‚Üê hom_complex.cochain.comp_assoc_of_second_is_zero_cochain,
      ‚Üê hom_complex.cochain.comp_assoc_of_third_is_zero_cochain,
      ‚Üê hom_complex.cochain.comp_assoc _ _ _ (neg_add_self 1).symm (add_neg_self 1).symm
      (show (-1 : ‚Ñ§) = _, by linarith), mapping_cone_inl_comp_fst,
      mapping_cone_inl_comp_snd, cochain.zero_comp, zero_add, cochain.id_comp,
      mapping_cone.inl_desc], },
  { simpa only [‚Üê hom_complex.cochain.comp_assoc_of_second_is_zero_cochain,
      ‚Üê hom_complex.cochain.comp_assoc_of_first_is_zero_cochain,
      mapping_cone_inr_comp_fst, mapping_cone_inr_comp_snd, cochain.zero_comp, add_zero,
      cochain.id_comp, ‚Üê cochain.of_hom_comp, mapping_cone.inr_desc_assoc, assoc,
      mapping_cone.Œπ_desc, id_comp], },
end

@[simps hom inv]
def mapping_cone_comp_homotopy_equiv :
  homotopy_equiv (mapping_cone g) (mapping_cone (mapping_cone_comp_triangle f g).mor‚ÇÅ) :=
{ hom := mapping_cone_comp_homotopy_equiv.hom f g,
  inv := mapping_cone_comp_homotopy_equiv.inv f g,
  homotopy_hom_inv_id := homotopy.of_eq begin
    simp only [mapping_cone_comp_homotopy_equiv.hom, mapping_cone_comp_homotopy_equiv.inv],
    ext n : 2,
    simp only [homological_complex.comp_f, homological_complex.id_f,
      mapping_cone.lift_desc_f _ _ _ _ _ _ _ _ _ rfl,
      mapping_cone.desc_cocycle_coe, add_subgroup.coe_zero, cochain.zero_cochain_comp,
      from_mapping_cone_ext_iff _ _ _ rfl, preadditive.comp_add,
      mapping_cone.inl_desc_cochain_v_assoc, mapping_cone.inr_desc_cochain_v_assoc,
      cochain.zero_v, zero_comp, zero_add, Œπ_mapping_cone, cochain.of_hom_v,
      mapping_cone_inr_snd_assoc, add_zero, comp_id, mapping_cone.inr_desc_f,
      eq_self_iff_true, and_self],
  end,
  homotopy_inv_hom_id := (equiv_homotopy _ _).symm begin
    refine ‚ü®-(mapping_cone_snd _).comp
      (((mapping_cone_fst (f ‚â´ g)).1.comp (mapping_cone_inl f) (add_neg_self 1).symm).comp
        (mapping_cone_inl _) (zero_add _).symm) (zero_add (-1)).symm, _‚ü©,
    ext1 n,
    dsimp,
    simp only [from_mapping_cone_ext_iff _ _ (n+1) rfl,
      to_mapping_cone_ext_iff _ _ (n+1) rfl,
      from_mapping_cone_ext_iff _ _ (n+2) (show n+2=n+1+1, by linarith),
      from_mapping_cone_ext_iff _ _ (n+1) rfl,
      preadditive.comp_add, preadditive.add_comp,
      neg_neg, Œ¥_neg, preadditive.comp_neg, preadditive.neg_comp,
      Œ¥_comp_of_first_is_zero_cochain _ _ _ (neg_add_self 1), mapping_cone_Œ¥_inl,
      mapping_cone_Œ¥_snd, cochain.of_hom_v, homological_complex.comp_f, assoc,
      mapping_cone.inl_desc_v_assoc, cochain.zero_cochain_comp,
      homological_complex.id_f, cochain.add_v, cochain.zsmul_v, Œµ_neg, Œµ_1, neg_smul,
      one_smul, cochain.neg_comp, cochain.neg_v, mapping_cone_inl_snd_assoc,
      zero_comp, zero_add, comp_id, cochain.comp_assoc_of_second_is_zero_cochain,
      cochain.comp_v _ _ (add_neg_self 1).symm n (n+1) n rfl (by linarith),
      mapping_cone_inl_fst_assoc, mapping_cone_inr_snd_assoc,
      mapping_cone_inr_fst_assoc, add_zero, mapping_cone.inr_desc_f_assoc,
      Œ¥_comp _ _ (add_neg_self 1).symm 2 0 1 (zero_add 1) (by linarith) (neg_add_self 1),
      cocycle.Œ¥_eq_zero, cochain.zero_comp, cochain.zero_v, neg_zero,
      mapping_cone_map, mapping_cone_inl_fst, mapping_cone.lift_fst_f,
      mapping_cone.desc_cocycle_coe, mapping_cone.inl_desc_cochain_v,
      cochain.comp_v _ _ (add_neg_self 1).symm (n+1) (n+2) (n+1) (by linarith) (by linarith),
      mapping_cone.lift_snd_f, comp_zero, mapping_cone_inl_snd, id_comp,
      Œπ_mapping_cone, mapping_cone_inr_fst, mapping_cone.inr_desc_cochain_v,
      neg_add_self, mapping_cone.inl_desc_cochain_v_assoc,
      mapping_cone.inr_desc_cochain_v_assoc, eq_self_iff_true,
      add_subgroup.coe_zero, cochain.zero_v],
    dsimp,
    erw comp_id,
    simp only [eq_self_iff_true, and_self],
  end, }

lemma mapping_cone_comp_homotopy_equiv_comm‚ÇÅ :
  Œπ_mapping_cone (mapping_cone_comp_triangle f g).mor‚ÇÅ ‚â´
    (mapping_cone_comp_homotopy_equiv f g).inv = (mapping_cone_comp_triangle f g).mor‚ÇÇ :=
begin
  ext n : 2,
  dsimp [Œπ_mapping_cone],
  simp only [mapping_cone.inr_desc_f, mapping_cone_map, from_mapping_cone_ext_iff _ _ _ rfl,
    mapping_cone.inl_desc_v, id_comp, Œπ_mapping_cone],
  tauto,
end

lemma mapping_cone_comp_homotopy_equiv_comm‚ÇÇ :
  (mapping_cone_comp_homotopy_equiv f g).hom ‚â´
    mapping_cone_Œ¥ (mapping_cone_comp_triangle f g).mor‚ÇÅ =
      (mapping_cone_comp_triangle f g).mor‚ÇÉ :=
begin
  ext n : 2,
  simp only [mapping_cone_comp_homotopy_equiv_hom,
    mapping_cone_comp_homotopy_equiv.hom, mapping_cone_comp_triangle_mor‚ÇÉ,
    homological_complex.comp_f, shift_functor_map_f', mapping_cone_Œ¥,
    Œπ_mapping_cone, mapping_cone.lift_f _ _ _ _ _ _ rfl, assoc,
    cocycle.hom_of_f, cocycle.right_shift_coe, mapping_cone_Œ¥_as_cocycle_coe,
    preadditive.add_comp, preadditive.neg_comp, preadditive.comp_neg, cochain.neg_v,
    cochain.right_shift_v  _ _ _ (zero_add 1).symm _ _ (add_zero n).symm _ rfl,
    mapping_cone_inl_fst_assoc, mapping_cone_inr_fst_assoc, zero_comp, comp_zero, add_zero,
    neg_inj, mapping_cone.desc_cocycle_coe, add_subgroup.coe_zero, shift_functor_obj_X_iso,
    homological_complex.X_iso_of_eq_refl],
  dsimp [iso.refl],
  rw [comp_id, id_comp, from_mapping_cone_ext_iff _ _ (n+1) rfl],
  split,
  { simp only [mapping_cone_inl_fst_assoc, mapping_cone.inl_desc_cochain_v,
      cochain.of_hom_v], },
  { simp only [mapping_cone_inr_fst_assoc, mapping_cone.inr_desc_cochain_v, zero_comp,
      cochain.zero_v], },
end

end cochain_complex

namespace homotopy_category

instance {C Œπ : Type*} [category C] [preadditive C] (c : complex_shape Œπ) :
  full (homotopy_category.quotient C c) :=
by { dsimp [quotient], apply_instance, }

lemma mapping_cone_comp_triangle_distinguished {X‚ÇÅ X‚ÇÇ X‚ÇÉ : cochain_complex C ‚Ñ§}
  (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (g : X‚ÇÇ ‚ü∂ X‚ÇÉ) :
  quotient_triangulated_functor_struct.map_triangle.obj
    (cochain_complex.mapping_cone_comp_triangle f g) ‚àà dist_triang (homotopy_category C (complex_shape.up ‚Ñ§)) :=
begin
  refine ‚ü®_,_, (cochain_complex.mapping_cone_comp_triangle f g).mor‚ÇÅ,
    ‚ü®triangle.mk_iso _ _ (iso.refl _) (iso.refl _)
    (iso_of_homotopy_equiv (cochain_complex.mapping_cone_comp_homotopy_equiv f g))
    (by { dsimp, rw [id_comp, comp_id], refl, }) _ _‚ü©‚ü©,
  { simp only [iso.refl_hom, id_comp, ‚Üê cancel_mono (iso_of_homotopy_equiv
      (cochain_complex.mapping_cone_comp_homotopy_equiv f g)).inv, assoc, iso.hom_inv_id, comp_id],
    dsimp [mapping_cone_triangle'],
    erw [‚Üê functor.map_comp, cochain_complex.mapping_cone_comp_homotopy_equiv_comm‚ÇÅ],
    refl, },
  { dsimp [mapping_cone_triangle', cochain_complex.mapping_cone_Œ¥'],
    erw [(shift_functor (homotopy_category C (complex_shape.up ‚Ñ§)) (1 : ‚Ñ§)).map_id,
      comp_id, comp_id, ‚Üê functor.map_comp, cochain_complex.mapping_cone_comp_homotopy_equiv_comm‚ÇÇ],
    refl, },
end

instance : is_triangulated (homotopy_category C (complex_shape.up ‚Ñ§)) :=
is_triangulated.mk' (begin
  rintro ‚ü®X‚ÇÅ : cochain_complex C ‚Ñ§‚ü© ‚ü®X‚ÇÇ : cochain_complex C ‚Ñ§‚ü© ‚ü®X‚ÇÉ : cochain_complex C ‚Ñ§‚ü©
    u‚ÇÅ‚ÇÇ' u‚ÇÇ‚ÇÉ',
  obtain ‚ü®u‚ÇÅ‚ÇÇ, rfl‚ü© := (homotopy_category.quotient _ _).map_surjective u‚ÇÅ‚ÇÇ',
  obtain ‚ü®u‚ÇÇ‚ÇÉ, rfl‚ü© := (homotopy_category.quotient _ _).map_surjective u‚ÇÇ‚ÇÉ',
  refine ‚ü®_, _, _, _, _, _, _, _,
    iso.refl _, iso.refl _, iso.refl _,
    by { dsimp, rw [comp_id, id_comp], }, by { dsimp, rw [comp_id, id_comp], },
     _, _, mapping_cone_triangle'_distinguished u‚ÇÅ‚ÇÇ,
     _, _, mapping_cone_triangle'_distinguished u‚ÇÇ‚ÇÉ,
     _, _, mapping_cone_triangle'_distinguished (u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ), ‚ü®_‚ü©‚ü©,
  let Œ± := cochain_complex.mapping_cone_triangle_map u‚ÇÅ‚ÇÇ (u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ) (ùüô X‚ÇÅ) u‚ÇÇ‚ÇÉ (by rw id_comp),
  let Œ≤ := cochain_complex.mapping_cone_triangle_map (u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ) u‚ÇÇ‚ÇÉ u‚ÇÅ‚ÇÇ (ùüô X‚ÇÉ) (by rw comp_id),
  refine octahedron.mk ((homotopy_category.quotient _ _).map Œ±.hom‚ÇÉ)
    ((homotopy_category.quotient _ _).map Œ≤.hom‚ÇÉ)
    (quotient_triangulated_functor_struct.map_triangle.map Œ±).comm‚ÇÇ
    begin
      have eq := (quotient_triangulated_functor_struct.map_triangle.map Œ±).comm‚ÇÉ,
      dsimp at eq,
      erw [comp_id, comp_id, comp_id] at eq,
      exact eq.symm,
    end
    (trans (quotient_triangulated_functor_struct.map_triangle.map Œ≤).comm‚ÇÇ (id_comp _))
    begin
      have eq := (quotient_triangulated_functor_struct.map_triangle.map Œ≤).comm‚ÇÉ,
      dsimp at eq,
      erw comp_id at eq,
      conv_rhs at eq { congr, skip, erw comp_id, },
      exact eq,
    end _,
  exact pretriangulated.isomorphic_distinguished _
    (mapping_cone_comp_triangle_distinguished u‚ÇÅ‚ÇÇ u‚ÇÇ‚ÇÉ) _
    (triangle.mk_iso _ _ (iso.refl _) (iso.refl _) (iso.refl _) (by tidy) (by tidy)
    (by { dsimp, erw [comp_id, id_comp], })),
end)

end homotopy_category
