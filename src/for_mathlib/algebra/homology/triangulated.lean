import for_mathlib.algebra.homology.mapping_cone
import algebra.homology.additive
import for_mathlib.category_theory.triangulated.pretriangulated_misc
import for_mathlib.category_theory.triangulated.shift_triangle
import for_mathlib.category_theory.preadditive.misc

open category_theory category_theory.pretriangulated category_theory.triangulated
  category_theory.limits category_theory.category

noncomputable theory

section

variables {C Œπ : Type*} [category C] [preadditive C] {c : complex_shape Œπ}

def homotopy_category.lift {K L : homological_complex C c}
  (œÜ : (homotopy_category.quotient _ _).obj K ‚ü∂ (homotopy_category.quotient _ _).obj L) :
  K ‚ü∂ L := quot.out œÜ

instance [has_zero_object C] : has_zero_object (homotopy_category C c) :=
by { change has_zero_object (category_theory.quotient _), apply_instance, }

instance : preadditive (homotopy_category C c) :=
begin
  apply quotient.preadditive,
  { rintros X Y f‚ÇÅ g‚ÇÅ f‚ÇÇ g‚ÇÇ ‚ü®h‚ÇÅ‚ü© ‚ü®h‚ÇÇ‚ü©,
    refine ‚ü®homotopy.add h‚ÇÅ h‚ÇÇ‚ü©, },
  { rintros X Y f g ‚ü®h‚ü©,
    exact ‚ü®homotopy.equiv_sub_zero.symm
      (by simpa only [neg_sub_neg] using homotopy.equiv_sub_zero h.symm)‚ü©, },
end

instance homotopy_category.quotient_additive :
  (homotopy_category.quotient C c).additive := quotient.functor_additive _ _ _

lemma is_zero_of_homotopy_id_zero [has_zero_object C] (X : homological_complex C c)
  (h : homotopy (ùüô X) 0) :
  is_zero ((homotopy_category.quotient C c).obj X) :=
begin
  have eq := homotopy_category.eq_of_homotopy _ _ h,
  simp only [category_theory.functor.map_id] at eq,
  simp only [is_zero.iff_id_eq_zero, eq, functor.map_zero],
end

end

variables {C : Type*} [category C] [preadditive C] [has_zero_object C]
  [has_binary_biproducts C]
  {K L : cochain_complex C ‚Ñ§} (œÜ : K ‚ü∂ L)

namespace cochain_complex


@[simps mor‚ÇÅ mor‚ÇÇ mor‚ÇÉ]
def mapping_cone_triangle : triangle (cochain_complex C ‚Ñ§) :=
triangle.mk œÜ (Œπ_mapping_cone œÜ) (mapping_cone_Œ¥ œÜ)

end cochain_complex

open cochain_complex

namespace homotopy_category

def mapping_cone_triangle' : triangle (homotopy_category C (complex_shape.up ‚Ñ§)) :=
triangle.mk ((homotopy_category.quotient _ _).map œÜ) (Œπ_mapping_cone' œÜ) (mapping_cone_Œ¥' œÜ)

variable (C)

def distinguished_triangles : set (triangle (homotopy_category C (complex_shape.up ‚Ñ§))) :=
Œª T, ‚àÉ (K L : cochain_complex C ‚Ñ§) (œÜ : K ‚ü∂ L),
  nonempty (T ‚âÖ mapping_cone_triangle' œÜ)

variable {C}

lemma mapping_cone_triangle'_distinguished :
  mapping_cone_triangle' œÜ ‚àà distinguished_triangles C :=
‚ü®_, _, œÜ, nonempty.intro (iso.refl _)‚ü©

instance shift_functor_additive (n : ‚Ñ§) :
  (category_theory.shift_functor (homotopy_category C (complex_shape.up ‚Ñ§)) n).additive := { }

lemma isomorphic_distinguished
  (T‚ÇÅ : triangle (homotopy_category C (complex_shape.up ‚Ñ§)))
  (h‚ÇÅ : T‚ÇÅ ‚àà distinguished_triangles C)
  (T‚ÇÇ : triangle (homotopy_category C (complex_shape.up ‚Ñ§)))
  (e : T‚ÇÇ ‚âÖ T‚ÇÅ) : T‚ÇÇ ‚àà distinguished_triangles C :=
begin
  obtain ‚ü®K, L, œÜ, ‚ü®e'‚ü©‚ü© := h‚ÇÅ,
  exact ‚ü®K, L, œÜ, ‚ü®e ‚â™‚â´ e'‚ü©‚ü©,
end

lemma contractible_distinguished
  (X : homotopy_category C (complex_shape.up ‚Ñ§)) :
  contractible_triangle X ‚àà distinguished_triangles C :=
begin
  cases X,
  refine ‚ü®_, _, ùüô X, ‚ü®_‚ü©‚ü©,
  have h : is_zero ((homotopy_category.quotient _ _).obj (mapping_cone (ùüô X))),
  { refine is_zero_of_homotopy_id_zero _ _,
    exact mapping_cone.desc_homotopy _ _ _ 0 (mapping_cone_inl (ùüô X)) (by simp) (by simp), },
  exact triangle.mk_iso _ _ (iso.refl _) (iso.refl _) (is_zero.iso_zero h).symm
    (by tidy) (is_zero.eq_of_tgt h _ _) (by simp only [is_zero.eq_of_src h
      ((mapping_cone_triangle' (ùüô X)).mor‚ÇÉ) 0, contractible_triangle_mor‚ÇÉ, zero_comp, comp_zero]),
end

lemma distinguished_cocone_triangle
  (X Y : homotopy_category C (complex_shape.up ‚Ñ§)) (f : X ‚ü∂ Y) :
  ‚àÉ (Z : homotopy_category C (complex_shape.up ‚Ñ§)) (g : Y ‚ü∂ Z)
    (h : Z ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß), triangle.mk f g h ‚àà distinguished_triangles C :=
begin
  cases X,
  cases Y,
  obtain ‚ü®œÜ, rfl‚ü© := quotient.functor_map_surjective _ _ f,
  exact ‚ü®_ ,_ ,_ , mapping_cone_triangle'_distinguished œÜ‚ü©,
end

open cochain_complex.hom_complex

lemma complete_distinguished_triangle_morphism'
  {K‚ÇÅ L‚ÇÅ K‚ÇÇ L‚ÇÇ : cochain_complex C ‚Ñ§} (œÜ‚ÇÅ : K‚ÇÅ ‚ü∂ L‚ÇÅ) (œÜ‚ÇÇ : K‚ÇÇ ‚ü∂ L‚ÇÇ)
  (a : K‚ÇÅ ‚ü∂ K‚ÇÇ) (b : L‚ÇÅ ‚ü∂ L‚ÇÇ) (hab : homotopy (œÜ‚ÇÅ ‚â´ b) (a ‚â´ œÜ‚ÇÇ)) :
  ‚àÉ (c : mapping_cone œÜ‚ÇÅ ‚ü∂ mapping_cone œÜ‚ÇÇ),
    nonempty (homotopy (Œπ_mapping_cone œÜ‚ÇÅ ‚â´ c) (b ‚â´ Œπ_mapping_cone œÜ‚ÇÇ)) ‚àß
      nonempty (homotopy (mapping_cone_Œ¥ œÜ‚ÇÅ ‚â´ a‚ü¶1‚üß') (c ‚â´ mapping_cone_Œ¥ œÜ‚ÇÇ)) :=
begin
  obtain ‚ü®z, hz‚ü© := (equiv_homotopy _ _) hab, clear hab,
  refine ‚ü®_, _, _‚ü©,
  refine mapping_cone.desc _
    (z.comp (cochain.of_hom (mapping_cone_inr œÜ‚ÇÇ)) (add_zero _).symm +
      (cochain.of_hom a).comp (mapping_cone_inl œÜ‚ÇÇ) (zero_add _).symm)
    (b ‚â´ Œπ_mapping_cone œÜ‚ÇÇ) _,
  { simp only [Œ¥_comp_of_second_is_zero_cochain _ _ _ (neg_add_self 1),
      cocycle.Œ¥_cochain_of_hom, cochain.comp_zero, zero_add, ‚Üê assoc,
      cochain.of_hom_comp (œÜ‚ÇÅ ‚â´ b), hz, cochain.add_comp, Œ¥_add, ‚Üê cochain.of_hom_comp],
    simpa only [add_zero, add_left_neg, Œ¥_comp_of_first_is_zero_cochain, mapping_cone_Œ¥_inl,
      cochain.of_hom_comp, cocycle.Œ¥_cochain_of_hom, cochain.zero_comp, smul_zero, assoc], },
  { exact nonempty.intro (homotopy.of_eq (by simp)), },
  { refine nonempty.intro (homotopy.of_eq ((cocycle.equiv_hom _ _).injective _)),
    ext1,
    simp only [mapping_cone_Œ¥, cochain.of_hom_comp, cocycle.equiv_hom_apply, cocycle.of_hom_coe,
      cocycle.cochain_of_hom_hom_of_eq_coe, cocycle.right_shift_coe,
      mapping_cone_Œ¥_as_cocycle_coe],
    ext1,
    simp only [cochain.comp_zero_cochain, cochain.of_hom_v,
      cochain.right_shift_v _ 1 0 (zero_add 1).symm p p (add_zero p).symm _ rfl,
      shift_functor_obj_X_iso, assoc, cochain.neg_v,
      homological_complex.X_iso_of_eq_refl, preadditive.neg_comp, preadditive.comp_neg, neg_inj],
    dsimp [iso.refl],
    simp only [comp_id, id_comp, from_mapping_cone_ext_iff _ _ _ rfl],
    split,
    { simp only [zero_add, assoc, mapping_cone.inl_desc_v_assoc, cochain.add_v,
        cochain.comp_zero_cochain, cochain.of_hom_v, cochain.zero_cochain_comp,
        preadditive.add_comp, mapping_cone_inr_fst, comp_zero, mapping_cone_inl_fst, comp_id,
        mapping_cone_inl_fst_assoc], },
    { simp only [mapping_cone_inr_fst_assoc, mapping_cone_inr_fst, zero_comp, comp_zero,
        assoc, mapping_cone.inr_desc_f_assoc, homological_complex.comp_f, Œπ_mapping_cone], }, },
end

lemma complete_distinguished_triangle_morphism
  (T‚ÇÅ T‚ÇÇ : triangle (homotopy_category C (complex_shape.up ‚Ñ§)))
  (h‚ÇÅ : T‚ÇÅ ‚àà distinguished_triangles C) (h‚ÇÇ : T‚ÇÇ ‚àà distinguished_triangles C)
  (a : T‚ÇÅ.obj‚ÇÅ ‚ü∂ T‚ÇÇ.obj‚ÇÅ) (b : T‚ÇÅ.obj‚ÇÇ ‚ü∂ T‚ÇÇ.obj‚ÇÇ)
  (comm‚ÇÅ : T‚ÇÅ.mor‚ÇÅ ‚â´ b = a ‚â´ T‚ÇÇ.mor‚ÇÅ) :
  ‚àÉ (c : T‚ÇÅ.obj‚ÇÉ ‚ü∂ T‚ÇÇ.obj‚ÇÉ), T‚ÇÅ.mor‚ÇÇ ‚â´ c = b ‚â´ T‚ÇÇ.mor‚ÇÇ ‚àß
    T‚ÇÅ.mor‚ÇÉ ‚â´ a‚ü¶(1 : ‚Ñ§)‚üß' = c ‚â´ T‚ÇÇ.mor‚ÇÉ :=
begin
  obtain ‚ü®K‚ÇÅ, L‚ÇÅ, œÜ‚ÇÅ, ‚ü®e‚ÇÅ‚ü©‚ü© := h‚ÇÅ,
  obtain ‚ü®K‚ÇÇ, L‚ÇÇ, œÜ‚ÇÇ, ‚ü®e‚ÇÇ‚ü©‚ü© := h‚ÇÇ,
  obtain ‚ü®c, ‚ü®h‚ÇÅ‚ü©, ‚ü®h‚ÇÇ‚ü©‚ü© := complete_distinguished_triangle_morphism' œÜ‚ÇÅ œÜ‚ÇÇ
    (quot.out (e‚ÇÅ.inv.hom‚ÇÅ ‚â´ a ‚â´ e‚ÇÇ.hom.hom‚ÇÅ)) (quot.out (e‚ÇÅ.inv.hom‚ÇÇ ‚â´ b ‚â´ e‚ÇÇ.hom.hom‚ÇÇ))
    (homotopy_of_eq _ _ begin
      simp only [functor.map_comp, quotient_map_out, category.assoc],
      erw [reassoc_of e‚ÇÅ.inv.comm‚ÇÅ, reassoc_of comm‚ÇÅ, e‚ÇÇ.hom.comm‚ÇÅ],
      refl,
    end),
  replace h‚ÇÅ := eq_of_homotopy _ _ h‚ÇÅ,
  replace h‚ÇÇ := eq_of_homotopy _ _ h‚ÇÇ,
  refine ‚ü®e‚ÇÅ.hom.hom‚ÇÉ ‚â´ (homotopy_category.quotient _ _).map c ‚â´ e‚ÇÇ.inv.hom‚ÇÉ, _, _‚ü©,
  { simp only [functor.map_comp, quotient_map_out, category.assoc] at h‚ÇÅ,
    erw [reassoc_of e‚ÇÅ.hom.comm‚ÇÇ, reassoc_of h‚ÇÅ, e‚ÇÇ.inv.comm‚ÇÇ],
    simp only [triangle.hom_inv_id_hom‚ÇÇ_assoc], },
  { erw [functor.map_comp, quotient_map_shift] at h‚ÇÇ,
    simp only [quotient_map_out, functor.map_comp] at h‚ÇÇ,
    simp only [category.assoc, ‚Üê e‚ÇÇ.inv.comm‚ÇÉ],
    erw [‚Üê reassoc_of h‚ÇÇ, ‚Üê reassoc_of e‚ÇÅ.hom.comm‚ÇÉ],
    simp only [‚Üê functor.map_comp, triangle.hom_inv_id_hom‚ÇÅ, category.comp_id,
      triangle.hom_inv_id_hom‚ÇÅ_assoc], },
end

@[simps]
def rotate_distinguished_triangle_homotopy_equiv {K L : cochain_complex C ‚Ñ§} (œÜ : K ‚ü∂ L) :
  homotopy_equiv (K‚ü¶(1 : ‚Ñ§)‚üß) (mapping_cone (Œπ_mapping_cone œÜ)) :=
{ hom := mapping_cone.lift _
    (-cocycle.left_shift (cocycle.of_hom œÜ) 1 1 (zero_add 1).symm)
    (-(mapping_cone_inl œÜ).left_shift 1 0 (neg_add_self 1).symm)
    begin
      simp only [Œ¥_neg, mapping_cone_Œ¥_inl, cochain.Œ¥_left_shift
        (mapping_cone_inl œÜ) 1 _ 0 _ (neg_add_self 1).symm (zero_add 1).symm,
        Œµ_1, neg_smul, neg_neg, one_smul],
      ext1 p q hpq,
      simp only [Œπ_mapping_cone, cochain.add_v,
        cochain.left_shift_v _ 1 1 (zero_add 1).symm p _ hpq _ hpq,
        cochain.comp_zero_cochain, shift_functor_obj_X_iso, add_zero,
        mul_one, sub_self, mul_zero, euclidean_domain.zero_div, Œµ_1, neg_smul,
        homological_complex.X_iso_of_eq_refl, cochain.of_hom_comp, cochain.of_hom_v,
        one_zsmul, add_subgroup.coe_neg, cocycle.left_shift_coe, cocycle.of_hom_coe,
        cochain.neg_v, preadditive.neg_comp, cochain.zero_v, neg_neg, assoc,
        neg_add_self],
    end,
  inv := mapping_cone.desc _ 0 (mapping_cone_Œ¥ œÜ)
    (by simp only [Œ¥_zero, mapping_cone_Œπ_Œ¥, cochain.of_hom_zero]),
  homotopy_hom_inv_id := homotopy.of_eq begin
    ext n : 2,
    simp only [homological_complex.comp_f, homological_complex.id_f,
      mapping_cone.lift_desc_f _ _ _ _ _ _ _ _ _ rfl,
      mapping_cone_Œ¥, mapping_cone_Œ¥_as_cocycle, zero_add, add_subgroup.coe_neg,
      cochain.neg_v, cochain.zero_v, preadditive.neg_comp, comp_zero,
      cocycle.hom_of_f, cocycle.right_shift_coe,
      cochain.left_shift_v _ _ _ (neg_add_self 1).symm n n (by linarith) _ rfl,
      cochain.right_shift_v _ _ _ (zero_add 1).symm n n (by linarith) _ rfl,
      zero_add, mul_zero, sub_self, euclidean_domain.zero_div, Œµ_0, one_zsmul,
      preadditive.comp_neg, assoc, mapping_cone_inl_fst_assoc, iso.hom_inv_id, neg_neg],
  end,
  homotopy_inv_hom_id := (equiv_homotopy _ _).symm begin
    refine ‚ü®-(mapping_cone_snd (Œπ_mapping_cone œÜ)).comp ((mapping_cone_snd œÜ).comp
      (mapping_cone_inl (Œπ_mapping_cone œÜ)) (zero_add (-1)).symm) (zero_add (-1)).symm, _‚ü©,
    rw mapping_cone_cochain_ext _ _ (neg_add_self 1).symm,
    split,
    { simp only [cochain.of_hom_comp, ‚Üê cochain.comp_assoc_of_second_is_zero_cochain,
        mapping_cone.inl_desc, cochain.zero_comp,
        Œ¥_comp_of_first_is_zero_cochain _ _ _ (neg_add_self 1),
        mapping_cone_Œ¥_inl, cochain.comp_add, ‚Üê cochain.comp_assoc_of_third_is_zero_cochain,
        mapping_cone_inl_comp_snd, cochain.zero_comp, zero_add, cochain.comp_id,
        Œ¥_comp_of_first_is_zero_cochain _ _ _ (zero_add 1), Œµ_0, one_smul, Œµ_neg, Œµ_1,
        neg_smul, cochain.comp_neg, cochain.add_comp, neg_zero, neg_neg,
        ‚Üê cochain.comp_assoc _ _ _ (neg_add_self 1).symm (add_neg_self 1).symm
        (show (-1 : ‚Ñ§) = -1+1+(-1), by linarith), mapping_cone_Œ¥_snd, cochain.neg_comp,
        mapping_cone_inl_comp_fst, cochain.id_comp, Œπ_mapping_cone,
        mapping_cone_inr_comp_snd, Œ¥_neg, add_left_neg], },
    { ext1,
      simp only [assoc, add_left_neg, eq_self_iff_true, neg_neg, cochain.of_hom_comp,
        cochain.comp_zero_cochain, cochain.of_hom_v, mapping_cone.inr_desc_f_assoc, Œ¥_neg,
        Œ¥_comp_of_first_is_zero_cochain, mapping_cone_Œ¥_inl, mapping_cone_Œ¥_snd, one_smul,
        cochain.neg_comp, cochain.comp_assoc_of_second_is_zero_cochain, zsmul_neg', neg_smul,
        cochain.comp_add, cochain.comp_neg, cochain.comp_zsmul, neg_add_rev, cochain.comp_id,
        cochain.add_v, cochain.zsmul_v, mapping_cone_inr_snd_assoc, cochain.neg_v, Œµ_neg, Œµ_1,
        mapping_cone_Œ¥, mapping_cone_Œ¥_as_cocycle, cocycle.hom_of_f,
        cocycle.right_shift_coe, add_subgroup.coe_neg,
        cochain.right_shift_v _ _ _ (zero_add 1).symm p p (by linarith) _ rfl,
        shift_functor_obj_X_iso, homological_complex.X_iso_of_eq_refl,
        mapping_cone.lift_f _ _ _ _ _ _ rfl, preadditive.comp_add,
        cochain.left_shift_v _ _ _ (neg_add_self 1).symm _ _ _ _ rfl, mul_zero,
        zero_add, one_mul, sub_self, euclidean_domain.zero_div, Œµ_0, cocycle.left_shift,
        cocycle.of_hom_coe, preadditive.comp_neg, preadditive.neg_comp, add_subgroup.coe_mk,
        cochain.left_shift_v _ _ _ (zero_add 1).symm _ _ _ _ rfl, add_zero,
        cochain.comp_v _ _ (add_neg_self (1 : ‚Ñ§)).symm p _ p rfl (by linarith),
        cochain.comp_v _ _ (zero_add (-1)).symm (p+1) (p+1) p (by linarith) (by linarith),
        Œπ_mapping_cone, mapping_cone_inr_fst_assoc, zero_comp, zero_add, neg_zero,
        iso.inv_hom_id_assoc, reassoc_of (eq_sub_of_add_eq (mapping_cone_id œÜ p _ rfl)),
        preadditive.sub_comp, id_comp],
      abel, },
  end, }

lemma rotate_distinguished_triangle‚ÇÅ (T : triangle (homotopy_category C (complex_shape.up ‚Ñ§)))
  (hT : T ‚àà distinguished_triangles C) : T.rotate ‚àà distinguished_triangles C :=
begin
  obtain ‚ü®K, L, œÜ, ‚ü®e‚ü©‚ü©:= hT,
  suffices : (mapping_cone_triangle' œÜ).rotate ‚àà distinguished_triangles C,
  { exact isomorphic_distinguished _ this _ ((rotate _).map_iso e), },
  refine ‚ü®_,_, Œπ_mapping_cone œÜ, ‚ü®triangle.mk_iso _ _ (iso.refl _) (iso.refl _)
    (iso_of_homotopy_equiv (rotate_distinguished_triangle_homotopy_equiv œÜ))
    (by tidy) (eq_of_homotopy _ _ _) (eq_of_homotopy _ _ (homotopy.of_eq _))‚ü©‚ü©,
  { rw id_comp,
    symmetry,
    equiv_rw equiv_homotopy  _ _,
    refine ‚ü®(mapping_cone_snd œÜ).comp (mapping_cone_inl (Œπ_mapping_cone œÜ)) (zero_add _).symm,
      _‚ü©,
    simp only [Œ¥_comp_of_first_is_zero_cochain _ _ _ (neg_add_self 1),
      mapping_cone_Œ¥_inl, cochain.of_hom_comp, mapping_cone_Œ¥_snd,
      subtype.val_eq_coe, mapping_cone_cochain_ext _ _ (neg_add_self 1).symm,
      cochain.comp_add],
    split,
    { simp only [‚Üê cochain.comp_assoc_of_first_is_zero_cochain,
        ‚Üê cochain.comp_assoc_of_second_is_zero_cochain,
        ‚Üê cochain.comp_assoc_of_third_is_zero_cochain, cochain.comp_zsmul,
        mapping_cone_inl_comp_snd, cochain.zero_comp, zero_add, cochain.neg_comp,
        cochain.comp_neg, smul_neg, Œµ_neg, Œµ_1, neg_smul, neg_neg, one_smul,
        ‚Üê cochain.comp_assoc _ _ _ (neg_add_self 1).symm (add_neg_self 1).symm
        (show (-1 : ‚Ñ§) =-1+1+(-1), by linarith), mapping_cone_inl_comp_fst,
        cochain.id_comp],
      rw mapping_cone_cochain_ext' _ _ (neg_add_self 1).symm,
      split,
      { dsimp only [rotate_distinguished_triangle_homotopy_equiv],
        simp only [cochain.add_comp, cochain.comp_assoc_of_first_is_zero_cochain,
          cochain.comp_assoc_of_second_is_zero_cochain, mapping_cone_inr_comp_fst,
          mapping_cone_inl_comp_fst, cochain.comp_id, Œπ_mapping_cone, cochain.comp_zero,
          mapping_cone.lift_fst, add_subgroup.coe_neg, cocycle.left_shift_coe,
          cocycle.of_hom_coe, cochain.comp_neg, mapping_cone_Œ¥, mapping_cone_Œ¥_as_cocycle,
          cocycle.cochain_of_hom_hom_of_eq_coe, cocycle.right_shift_coe, add_subgroup.coe_neg],
        ext n,
        dsimp [mapping_cone_triangle'],
        simp only [cochain.zero_v, cochain.add_v, cochain.of_hom_v, cochain.neg_v,
          cochain.comp_v _ _ (neg_add_self 1).symm n (n-1) n (by linarith) (by linarith),
          cochain.comp_v _ _ (zero_add 1).symm (n-1) (n-1) n (by linarith) (by linarith),
          cochain.right_shift_v _ _ _ (zero_add 1).symm (n-1) (n-1) (by linarith) n (by linarith),
          cochain.left_shift_v _ _ _ (zero_add 1).symm (n-1) n (by linarith) n (by linarith),
          add_zero, neg_neg, shift_functor_obj_X_iso, preadditive.neg_comp, mul_one, sub_self,
          mul_zero, euclidean_domain.zero_div, Œµ_1, neg_smul, one_zsmul, preadditive.comp_neg,
          preadditive.neg_comp_assoc, assoc, homological_complex.X_iso_of_eq_inv_hom,
          homological_complex.X_iso_of_eq_refl, iso.refl_hom, comp_id,
          mapping_cone_inl_fst_assoc, add_right_neg], },
      { dsimp only [rotate_distinguished_triangle_homotopy_equiv],
        simp only [cochain.add_comp, cochain.comp_assoc_of_first_is_zero_cochain,
          cochain.comp_assoc_of_third_is_zero_cochain, mapping_cone.lift_snd,
          mapping_cone_inl_comp_snd, cochain.comp_zero, zero_add, Œπ_mapping_cone,
          mapping_cone_inr_comp_snd, cochain.comp_id, mapping_cone_Œ¥,
          cocycle.cochain_of_hom_hom_of_eq_coe, cocycle.right_shift_coe,
          mapping_cone_Œ¥_as_cocycle_coe, cochain.comp_neg],
        ext1 p q hpq,
        simp only [cochain.neg_v, cochain.comp_zero_cochain,
          cochain.left_shift_v _ _ _ (neg_add_self 1).symm q q (by linarith) p (by linarith),
          cochain.right_shift_v _ _ _ (zero_add 1).symm q q (by linarith) p (by linarith),
          zero_add, neg_neg, shift_functor_obj_X_iso, preadditive.neg_comp, mul_zero, sub_self,
          euclidean_domain.zero_div, Œµ_0, one_zsmul, preadditive.neg_comp_assoc, assoc,
          homological_complex.X_iso_of_eq_inv_hom, homological_complex.X_iso_of_eq_refl,
          iso.refl_hom, comp_id, preadditive.comp_neg, mapping_cone_inl_fst_assoc],
        dsimp only [mapping_cone_triangle'],
        erw [iso.inv_hom_id_assoc], }, },
    { simp only [‚Üê cochain.comp_assoc_of_first_is_zero_cochain, mapping_cone_inr_comp_snd,
        cochain.id_comp, Œπ_mapping_cone, cochain.comp_zsmul, mapping_cone_Œ¥,
        ‚Üê cochain.comp_assoc_of_third_is_zero_cochain, cochain.comp_neg,
        mapping_cone_inr_comp_fst, cochain.zero_comp, neg_zero, smul_zero, add_zero,
        mapping_cone_Œ¥_as_cocycle, self_eq_add_right, cocycle.right_shift_coe,
        cocycle.cochain_of_hom_hom_of_eq_coe],
      ext1 n,
      simp only [add_subgroup.coe_neg, cochain.comp_assoc_of_third_is_zero_cochain,
        cochain.comp_zero_cochain, cochain.of_hom_v, cochain.zero_v,
        cochain.right_shift_v _ _ _ (zero_add 1).symm n n (by linarith) _ rfl, assoc,
        cochain.neg_v, preadditive.neg_comp, preadditive.comp_neg,
        mapping_cone_inr_fst_assoc, zero_comp, neg_zero], }, },
  { ext n,
    dsimp only [rotate_distinguished_triangle_homotopy_equiv],
    simp only [category_theory.functor.map_id, preadditive.neg_comp,
      homological_complex.neg_f_apply, homological_complex.comp_f,
      cocycle.hom_of_f, cocycle.right_shift_coe, mapping_cone_Œ¥_as_cocycle_coe,
      shift_functor_map_f', mapping_cone_Œ¥,
      cochain.right_shift_v _ _ _ (zero_add 1).symm n n (by linarith) _ rfl,
      shift_functor_obj_X_iso, cochain.neg_v, homological_complex.X_iso_of_eq_refl,
      preadditive.comp_neg, neg_inj,
      mapping_cone.lift_fst_f_assoc, add_subgroup.coe_neg,
      cocycle.left_shift_coe, cocycle.of_hom_coe, cochain.neg_v,
      cochain.left_shift_v _ _ _ (zero_add 1).symm _ _ rfl _ rfl,
      mul_one, sub_self, mul_zero, euclidean_domain.zero_div, add_zero, Œµ_1,
      homological_complex.X_iso_of_eq_refl, cochain.of_hom_v, neg_smul, one_zsmul, neg_neg],
    erw [iso.refl_hom, iso.refl_inv, id_comp, comp_id], },
end

@[simps]
def triangle_shift (T : triangle (homotopy_category C (complex_shape.up ‚Ñ§))) (n : ‚Ñ§) :
  triangle (homotopy_category C (complex_shape.up ‚Ñ§)) :=
triangle.mk (Œµ n ‚Ä¢ T.mor‚ÇÅ‚ü¶n‚üß') (Œµ n ‚Ä¢ T.mor‚ÇÇ‚ü¶n‚üß') (Œµ n ‚Ä¢ T.mor‚ÇÉ‚ü¶n‚üß' ‚â´ (shift_comm T.obj‚ÇÅ 1 n).hom)

instance cochain_complex_shift_functor_additive (n : ‚Ñ§) :
  (category_theory.shift_functor (cochain_complex C ‚Ñ§) n).additive := { }

@[simps, reducible]
def quotient_triangulated_functor_struct :
  triangulated_functor_struct (cochain_complex C ‚Ñ§) (homotopy_category C (complex_shape.up ‚Ñ§)) :=
{ to_functor := homotopy_category.quotient _ _,
  comm_shift := quotient.comm_shift _ _, }

def induced_triangle (T : triangle (cochain_complex C ‚Ñ§)) :
  triangle (homotopy_category C (complex_shape.up ‚Ñ§)) :=
quotient_triangulated_functor_struct.map_triangle.obj T

def mapping_cone_induced_triangle_iso :
  induced_triangle (mapping_cone_triangle œÜ) ‚âÖ mapping_cone_triangle' œÜ :=
triangle.mk_iso _ _ (iso.refl _) (iso.refl _) (iso.refl _) (by tidy) (by tidy) begin
  simp only [iso.refl_hom, category_theory.functor.map_id, comp_id, id_comp],
  apply eq_of_homotopy,
  apply homotopy.of_eq,
  apply comp_id,
end

@[simps]
def shift_mapping_cone_iso {K L : cochain_complex C ‚Ñ§} (œÜ : K ‚ü∂ L) (n : ‚Ñ§) :
  (mapping_cone œÜ)‚ü¶n‚üß ‚âÖ mapping_cone (œÜ‚ü¶n‚üß') :=
{ hom := mapping_cone.lift _
      (Œµ ((n*(n+1))/2) ‚Ä¢ cocycle.right_shift (cocycle.left_shift
        (mapping_cone_fst œÜ) n (n+1) (by linarith)) n 1 (by linarith))
      (Œµ ((n*(n+1))/2) ‚Ä¢ ((mapping_cone_snd œÜ).left_shift n n
        (zero_add n).symm).right_shift n 0 (zero_add n).symm) begin
    simp only [Œ¥_zsmul, cochain.Œ¥_right_shift _ n _ 0 1 (zero_add n).symm (add_comm n 1),
      cochain.Œ¥_left_shift _ n 1 n (n+1) (zero_add n).symm (add_comm n 1), cochain.zsmul_comp,
      cochain.right_shift_smul, smul_smul, mul_Œµ_self, mul_one, mapping_cone_Œ¥_snd,
      add_subgroup.coe_zsmul, cocycle.right_shift_coe, cocycle.left_shift_coe],
    ext1 p q hpq,
    simp only [cochain.add_v, cochain.zsmul_v, cochain.comp_zero_cochain, cochain.neg_v,
      cochain.right_shift_v _ n 1 (add_comm n 1) p q hpq (q+n) (by linarith),
      cochain.left_shift_v _ n (n+1) (add_comm n 1) p (q+n) (by linarith) _ rfl, assoc,
      shift_functor_obj_X_iso, homological_complex.X_iso_of_eq_refl, cochain.of_hom_v,
      shift_functor_map_f', preadditive.zsmul_comp, smul_smul, preadditive.neg_comp,
      preadditive.comp_neg, smul_neg, cochain.zero_v, neg_add_eq_zero],
    dsimp [iso.refl],
    simp only [id_comp, comp_id],
  end,
  inv := mapping_cone.desc _
      (Œµ ((n*(n+1))/2) ‚Ä¢ ((mapping_cone_inl œÜ).left_shift n (n-1) (by linarith)).right_shift n (-1) (by linarith))
      ((mapping_cone_inr œÜ)‚ü¶n‚üß') begin
    simp only [Œ¥_zsmul, cochain.of_hom_comp, cochain.Œ¥_right_shift _ _ _ _ _ _ (zero_add n).symm,
      cochain.Œ¥_left_shift _ _ _ _ _ _ (zero_add n).symm, mapping_cone_Œ¥_inl,
      cochain.right_shift_smul, smul_smul, mul_Œµ_self, mul_one],
    ext1 p,
    simp only [cochain.zsmul_v, cochain.comp_zero_cochain, cochain.of_hom_v, shift_functor_map_f',
      cochain.right_shift_v _ n 0 (zero_add n).symm p p (add_zero p).symm _ rfl,
      cochain.left_shift_v _ n n (zero_add n).symm p _ rfl _ rfl, smul_smul, Œµ_add, Œµ_mul_self,
      preadditive.zsmul_comp, shift_functor_obj_X_iso, homological_complex.X_iso_of_eq_refl,
      mul_succ_div_two],
    dsimp [iso.refl],
    erw [id_comp, comp_id],
    rw [mul_assoc, ‚Üê mul_assoc (Œµ n)],
    simp only [mul_Œµ_self, one_mul, one_smul],
  end,
  hom_inv_id' := begin
    ext p : 2,
    simp only [homological_complex.comp_f, homological_complex.id_f, assoc,
      preadditive.comp_zsmul, preadditive.zsmul_comp, cochain.zsmul_v,
      mapping_cone.lift_desc_f _ _ _ _ _ _ _ _ _ rfl, shift_functor_map_f',
      add_subgroup.coe_zsmul, cocycle.right_shift_coe, cocycle.left_shift_coe,
      cochain.right_shift_v _ n (-1) (show n-1=(-1)+n, by linarith) (p+1) p (by linarith) (p+n) (by linarith),
      cochain.left_shift_v _ n (n-1) (show n-1=(-1)+n, by linarith) (p+1) (p+n) (by linarith) _ rfl,
      cochain.right_shift_v _ n 1 (add_comm n 1) p _ rfl (p+1+n) (by linarith),
      cochain.left_shift_v _ n (n+1) (add_comm n 1) p (p+1+n) (by linarith) _ rfl,
      cochain.right_shift_v _ n 0 (zero_add n).symm p p (add_zero p).symm _ rfl,
      cochain.left_shift_v _ n n (zero_add n).symm p _ rfl _ rfl,
      iso.inv_hom_id_assoc, shift_functor_obj_X_iso, homological_complex.X_iso_of_eq_refl, smul_smul],
    dsimp [iso.refl],
    erw [id_comp, id_comp, id_comp, comp_id, ‚Üê mapping_cone_id œÜ (p+n) (p+1+n) (by linarith)],
    simp only [Œµ_add, Œµ_even _ (even_mul_pred n), Œµ_even _ (even_mul_succ n), one_mul],
    congr' 1,
    { conv_lhs { congr, rw mul_assoc, congr, skip, congr, skip, rw mul_comm, },
      conv_lhs { congr, congr, skip, rw ‚Üê mul_assoc, },
      simpa only [mul_Œµ_self, one_mul, one_smul], },
    { simp only [mul_succ_div_two, Œµ_mul_self, Œµ_add],
      conv_lhs { congr, rw [mul_assoc, ‚Üê mul_assoc (Œµ n)], },
      simp only [mul_Œµ_self, one_mul, one_smul], },
  end,
  inv_hom_id' := begin
    ext p : 2,
    simp only [homological_complex.comp_f, homological_complex.id_f, assoc],
    rw to_mapping_cone_ext_iff _ _ _ rfl,
    split,
    { simp only [assoc, mapping_cone.lift_fst_f, add_subgroup.coe_zsmul,
        cocycle.right_shift_coe, cocycle.left_shift_coe, cochain.zsmul_v,
        linear.comp_smul, id_comp,
        cochain.right_shift_v _ n 1 (add_comm n 1) p _ rfl (p+1+n) (by linarith),
        cochain.left_shift_v _ n (n+1) (add_comm n 1) p (p+1+n) (by linarith) _ rfl,
        preadditive.zsmul_comp, preadditive.comp_zsmul],
      rw from_mapping_cone_ext_iff _ _ _ rfl,
      split,
      { simp only [linear.comp_smul, mapping_cone.inl_desc_v_assoc, cochain.zsmul_v,
          linear.smul_comp, mapping_cone_inl_fst,
          cochain.right_shift_v _ n (-1) (show n-1 = -1+n, by linarith) (p+1) p (by linarith) (p+n) (by linarith),
          cochain.left_shift_v _ n (n-1) (show n-1 = -1+n, by linarith) (p+1) (p+n) (by linarith) _ rfl,
          shift_functor_obj_X_iso, Œµ_add, homological_complex.X_iso_of_eq_refl, assoc,
          iso.inv_hom_id_assoc, mapping_cone_inl_fst_assoc, iso.hom_inv_id, smul_smul,
          Œµ_even _ (even_mul_succ n), Œµ_even _ (even_mul_pred n), one_mul],
        conv_lhs { congr, congr, skip, rw mul_comm, },
        conv_lhs { congr, rw mul_assoc, congr, skip, rw ‚Üê mul_assoc, },
        simp only [mul_Œµ_self, one_mul, one_smul], },
      { simp only [preadditive.comp_zsmul, mapping_cone.inr_desc_f_assoc,
          shift_functor_obj_X_iso, Œµ_add, shift_functor_map_f',
          homological_complex.X_iso_of_eq_refl, mapping_cone_inr_fst],
        dsimp [iso.refl],
        erw [id_comp, comp_id],
        simp only [mapping_cone_inr_fst, smul_zero], }, },
    { simp only [assoc, mapping_cone.lift_snd_f, cochain.zsmul_v, linear.comp_smul, id_comp,
        cochain.right_shift_v _ _ _ (zero_add n).symm p p (add_zero p).symm _ rfl,
        cochain.left_shift_v _ _ _ (zero_add n).symm _ _ rfl _ rfl,
        preadditive.zsmul_comp, preadditive.comp_zsmul],
      rw from_mapping_cone_ext_iff _ _ _ rfl,
      split,
      { simp only [preadditive.comp_zsmul, mapping_cone.inl_desc_v_assoc, assoc,
          mapping_cone_inl_snd, cochain.zsmul_v, preadditive.zsmul_comp, smul_zero,
          cochain.right_shift_v _ n (-1) (show n-1 = -1+n, by linarith) (p+1) p (by linarith) (p+n) (by linarith),
          cochain.left_shift_v _ n (n-1) (show n-1 = -1+n, by linarith) (p+1) (p+n) (by linarith) _ rfl,
          iso.inv_hom_id_assoc, mapping_cone_inl_snd_assoc, zero_comp, comp_zero], },
      { simp only [assoc, preadditive.comp_zsmul, preadditive.zsmul_comp,
          mapping_cone.inr_desc_f_assoc, shift_functor_map_f', shift_functor_obj_X_iso,
          homological_complex.X_iso_of_eq_refl, smul_smul],
        dsimp only [iso.refl],
        erw [id_comp, comp_id],
        simp only [mapping_cone_inr_snd, Œµ_add, Œµ_mul_self, mul_succ_div_two, mul_assoc],
        conv_lhs { congr, congr, skip, rw ‚Üê mul_assoc, },
        simpa only [mul_Œµ_self, one_mul, one_smul], }, },
  end, }

def shift_mapping_cone_triangle_iso {K L : cochain_complex C ‚Ñ§} (œÜ : K ‚ü∂ L) (n : ‚Ñ§) :
  (triangle.shift_functor _ n).obj (mapping_cone_triangle œÜ) ‚âÖ mapping_cone_triangle (œÜ‚ü¶n‚üß') :=
begin
  refine triangle.mk_iso _ _ (iso.refl _) (preadditive.mul_iso ((-1)^n) (iso.refl _))
    (shift_mapping_cone_iso œÜ n) _ _ _,
  { dsimp [triangle.shift_functor],
    simp only [comp_id, id_comp, preadditive.comp_zsmul, smul_smul,
      ‚Üê units.coe_mul, ‚Üê mul_zpow, neg_mul, mul_neg, one_mul, neg_neg,
      one_zpow, units.coe_one, one_zsmul], },
  { ext p : 2,
    dsimp [triangle.shift_functor, Œπ_mapping_cone],
    simp only [preadditive.zsmul_comp, preadditive.comp_zsmul, id_comp,
      mapping_cone.lift_f _ _ _ _ _ _ rfl, preadditive.comp_add, cochain.zsmul_v,
      add_subgroup.coe_zsmul, cocycle.right_shift_coe, cocycle.left_shift_coe,
      cochain.right_shift_v _ n 1 (add_comm n 1) _ _ rfl _ rfl,
      cochain.left_shift_v _ n (n+1) (add_comm n 1) _ _ rfl _ rfl,
      cochain.right_shift_v _ _ _ (zero_add n).symm p p (add_zero p).symm _ rfl,
      cochain.left_shift_v _ _ _(zero_add n).symm _ _ rfl _ rfl, smul_smul,
      shift_functor_obj_X_iso, homological_complex.X_iso_of_eq_refl, assoc],
    dsimp [iso.refl],
    erw [id_comp, id_comp],
    simp only [mapping_cone_inr_fst_assoc, zero_comp, smul_zero, zero_add,
      mapping_cone_inr_snd_assoc, id_comp],
    congr' 1,
    convert one_mul _,
    nth_rewrite 0 mul_comm,
    simp only [mul_succ_div_two, Œµ_add, mul_assoc],
    conv_lhs { congr, skip, rw [‚Üê mul_assoc, mul_Œµ_self, one_mul], },
    rw [Œµ_mul_self, mul_Œµ_self], },
  { ext p : 2,
    dsimp [triangle.shift_functor, mapping_cone_triangle],
    simp only [preadditive.zsmul_comp, mapping_cone.lift_f (œÜ‚ü¶n‚üß') _ _ _ p _ rfl,
      mapping_cone_Œ¥, cocycle.hom_of_f, shift_functor_add_comm_hom_app_f,
      cocycle.right_shift_coe, mapping_cone_Œ¥_as_cocycle_coe, assoc,
      cocycle.left_shift_coe, preadditive.add_comp,
      cochain.right_shift_v _ _ _ (zero_add 1).symm (p+n) (p+n) (by linarith) _ rfl,
      shift_functor_obj_X_iso,
      cochain.right_shift_v _ _ _ (zero_add 1).symm p p (by linarith) _ rfl,
      cochain.neg_v, mapping_cone_inr_fst_assoc, mapping_cone_inl_fst_assoc,
      preadditive.neg_comp, preadditive.comp_neg, zero_comp, comp_zero, add_zero,
      smul_neg, neg_inj],
    dsimp,
    simp only [preadditive.zsmul_comp, smul_smul,
      cochain.right_shift_v _ _ _ (add_comm n 1) p _ rfl (p+1+n) (by linarith),
      cochain.left_shift_v _ _ _ (add_comm n 1) p (p+1+n) (by linarith) _ rfl],
    dsimp,
    simp only [homological_complex.X_iso_of_eq_refl],
    dsimp [iso.refl],
    erw [id_comp, comp_id, comp_id, comp_id, id_comp, cochain.v_comp_X_iso_of_eq_hom],
    congr' 1,
    nth_rewrite 0 mul_comm,
    simpa only [mul_succ_div_two, Œµ_add, Œµ_even _ (even_mul_succ n), one_mul, ‚Üê mul_assoc,
      mul_Œµ_self], },
end

lemma shift_distinguished_triangles (T : triangle (homotopy_category C (complex_shape.up ‚Ñ§)))
  (hT : T ‚àà distinguished_triangles C) (n : ‚Ñ§) :
  (triangle.shift_functor _ n).obj T ‚àà distinguished_triangles C :=
begin
  obtain ‚ü®K, L, œÜ, ‚ü®e‚ü©‚ü©:= hT,
  suffices : (triangle.shift_functor _ n).obj (mapping_cone_triangle' œÜ)
    ‚àà distinguished_triangles C,
  { exact isomorphic_distinguished _ this _ (functor.map_iso _ e), },
  let h : (homotopy_category.quotient C (complex_shape.up ‚Ñ§)).comm_shift ‚Ñ§ :=
    quotient.functor_comm_shift _,
  exact ‚ü®K‚ü¶n‚üß, L‚ü¶n‚üß, œÜ‚ü¶n‚üß',
    ‚ü®(triangle.shift_functor (homotopy_category C (complex_shape.up ‚Ñ§)) n).map_iso
    (mapping_cone_induced_triangle_iso œÜ).symm ‚â™‚â´
    ((triangle.shift_functor_comm h n).app (mapping_cone_triangle œÜ)).symm ‚â™‚â´
    quotient_triangulated_functor_struct.map_triangle.map_iso (shift_mapping_cone_triangle_iso œÜ n) ‚â™‚â´
    (mapping_cone_induced_triangle_iso _)‚ü©‚ü©,
end

lemma rotate_distinguished_triangle (T : triangle (homotopy_category C (complex_shape.up ‚Ñ§))) :
  T ‚àà distinguished_triangles C ‚Üî T.rotate ‚àà distinguished_triangles C :=
begin
  split,
  { exact rotate_distinguished_triangle‚ÇÅ T, },
  { intro h,
    replace h := rotate_distinguished_triangle‚ÇÅ _ (rotate_distinguished_triangle‚ÇÅ _ h),
    replace h := shift_distinguished_triangles _ h (-1),
    refine isomorphic_distinguished _ h _ _,
    exact (triangle.shift_functor_zero _).symm.app T ‚â™‚â´
      (triangle.shift_functor_iso_of_eq _ (by linarith)).app T ‚â™‚â´
      (triangle.shift_functor_add _ 1 (-1)).app T ‚â™‚â´
      (triangle.shift_functor _ (-1)).map_iso ((triangle.shift_functor_one_iso _).app T), },
end

instance : pretriangulated (homotopy_category C (complex_shape.up ‚Ñ§)) :=
{ distinguished_triangles := distinguished_triangles C,
  isomorphic_distinguished := isomorphic_distinguished,
  contractible_distinguished := contractible_distinguished,
  distinguished_cocone_triangle := distinguished_cocone_triangle,
  rotate_distinguished_triangle := rotate_distinguished_triangle,
  complete_distinguished_triangle_morphism :=
    complete_distinguished_triangle_morphism, }


lemma triangle_distinguished_iff (T : triangle (homotopy_category C (complex_shape.up ‚Ñ§))) :
  (T ‚àà dist_triang (homotopy_category C (complex_shape.up ‚Ñ§)))
  ‚Üî ‚àÉ (K L : cochain_complex C ‚Ñ§) (œÜ : K ‚ü∂ L),
    nonempty (T ‚âÖ
      quotient_triangulated_functor_struct.map_triangle.obj (mapping_cone_triangle œÜ)) :=
begin
  split,
  { rintros ‚ü®K, L, œÜ, ‚ü®e‚ü©‚ü©,
    exact ‚ü®K, L, œÜ, ‚ü®e ‚â™‚â´ (mapping_cone_induced_triangle_iso œÜ).symm‚ü©‚ü©, },
  { rintro ‚ü®K, L, œÜ, ‚ü®e‚ü©‚ü©,
    exact ‚ü®K, L, œÜ, ‚ü®e ‚â™‚â´ (mapping_cone_induced_triangle_iso œÜ)‚ü©‚ü©, },
end

lemma triangle_distinguished_iff' (T : triangle (homotopy_category C (complex_shape.up ‚Ñ§))) :
  (T ‚àà dist_triang (homotopy_category C (complex_shape.up ‚Ñ§))) ‚Üî
  ‚àÉ (K L : cochain_complex C ‚Ñ§) (œÜ : K ‚ü∂ L), nonempty (T ‚âÖ
      quotient_triangulated_functor_struct.map_triangle.obj (mapping_cone_triangle œÜ).rotate) :=
begin
  split,
  { intro hT,
    replace hT := inv_rot_of_dist_triangle _ _ hT,
    rw triangle_distinguished_iff at hT,
    obtain ‚ü®K, L, œÜ, ‚ü®e‚ü©‚ü© := hT,
    exact ‚ü®K, L, œÜ, ‚ü®(triangle_rotation _).counit_iso.symm.app T ‚â™‚â´
      (pretriangulated.rotate _).map_iso e ‚â™‚â´
      (map_triangle_rotate quotient_triangulated_functor_struct).app _‚ü©‚ü©, },
  { rintro ‚ü®K, L, œÜ, ‚ü®e‚ü©‚ü©,
    suffices : T.inv_rotate ‚àà dist_triang _,
    { exact pretriangulated.isomorphic_distinguished _ (rot_of_dist_triangle _ _ this) _
        ((triangle_rotation _).counit_iso.symm.app T), },
    refine ‚ü®K, L, œÜ, ‚ü®(pretriangulated.inv_rotate _).map_iso e ‚â™‚â´ (inv_rotate _).map_iso
        ((map_triangle_rotate quotient_triangulated_functor_struct).symm.app _ ‚â™‚â´
        (rotate _).map_iso (mapping_cone_induced_triangle_iso œÜ)) ‚â™‚â´
      (triangle_rotation _).unit_iso.symm.app _‚ü©‚ü©, },
end

instance : is_triangulated (homotopy_category C (complex_shape.up ‚Ñ§)) := sorry

end homotopy_category
