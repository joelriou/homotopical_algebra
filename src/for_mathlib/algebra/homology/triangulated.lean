import for_mathlib.category_theory.triangulated.triangulated
import for_mathlib.algebra.homology.pretriangulated

open category_theory category_theory.pretriangulated category_theory.triangulated
  category_theory.limits category_theory.category

noncomputable theory

variables {C : Type*} [category C] [preadditive C] [has_zero_object C]
  [has_binary_biproducts C]

namespace cochain_complex

variables {X‚ÇÅ X‚ÇÇ X‚ÇÉ : cochain_complex C ‚Ñ§} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (g : X‚ÇÇ ‚ü∂ X‚ÇÉ)

@[simps mor‚ÇÅ mor‚ÇÇ mor‚ÇÉ]
def mapping_cone_comp_triangle {X‚ÇÅ X‚ÇÇ X‚ÇÉ : cochain_complex C ‚Ñ§}
  (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (g : X‚ÇÇ ‚ü∂ X‚ÇÉ) : triangle (cochain_complex C ‚Ñ§) :=
triangle.mk (mapping_cone_map f (f ‚â´ g) (ùüô X‚ÇÅ) g (by rw id_comp))
  (mapping_cone_map (f ‚â´ g) g f (ùüô X‚ÇÉ) (by rw comp_id))
    (mapping_cone_Œ¥ g ‚â´ (Œπ_mapping_cone f)‚ü¶1‚üß')

end cochain_complex

namespace homotopy_category

instance {C Œπ : Type*} [category C] [preadditive C] (c : complex_shape Œπ) :
  full (homotopy_category.quotient C c) :=
by { dsimp [quotient], apply_instance, }

lemma mapping_cone_comp_triangle_distinguished {X‚ÇÅ X‚ÇÇ X‚ÇÉ : cochain_complex C ‚Ñ§}
  (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (g : X‚ÇÇ ‚ü∂ X‚ÇÉ) :
  quotient_triangulated_functor_struct.map_triangle.obj
    (cochain_complex.mapping_cone_comp_triangle f g) ‚àà dist_triang (homotopy_category C (complex_shape.up ‚Ñ§)) :=
begin
  sorry,
end

instance : is_triangulated (homotopy_category C (complex_shape.up ‚Ñ§)) :=
is_triangulated.mk' (begin
  rintro ‚ü®X‚ÇÅ : cochain_complex C ‚Ñ§‚ü© ‚ü®X‚ÇÇ : cochain_complex C ‚Ñ§‚ü© ‚ü®X‚ÇÉ : cochain_complex C ‚Ñ§‚ü©
    u‚ÇÅ‚ÇÇ' u‚ÇÇ‚ÇÉ',
  obtain ‚ü®u‚ÇÅ‚ÇÇ, rfl‚ü© := (homotopy_category.quotient _ _).map_surjective u‚ÇÅ‚ÇÇ',
  obtain ‚ü®u‚ÇÇ‚ÇÉ, rfl‚ü© := (homotopy_category.quotient _ _).map_surjective u‚ÇÇ‚ÇÉ',
  refine ‚ü®_, _, _, _, _, _, _, _,
    iso.refl _, iso.refl _, iso.refl _,
    by { dsimp, rw [comp_id, id_comp], }, by { dsimp, rw [comp_id, id_comp], },
     _, _, mapping_cone_triangle'_distinguished u‚ÇÅ‚ÇÇ,
     _, _, mapping_cone_triangle'_distinguished u‚ÇÇ‚ÇÉ,
     _, _, mapping_cone_triangle'_distinguished (u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ), ‚ü®_‚ü©‚ü©,
  let Œ± := cochain_complex.mapping_cone_triangle_map u‚ÇÅ‚ÇÇ (u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ) (ùüô X‚ÇÅ) u‚ÇÇ‚ÇÉ (by rw id_comp),
  let Œ≤ := cochain_complex.mapping_cone_triangle_map (u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ) u‚ÇÇ‚ÇÉ u‚ÇÅ‚ÇÇ (ùüô X‚ÇÉ) (by rw comp_id),
  refine octahedron.mk ((homotopy_category.quotient _ _).map Œ±.hom‚ÇÉ)
    ((homotopy_category.quotient _ _).map Œ≤.hom‚ÇÉ)
    (quotient_triangulated_functor_struct.map_triangle.map Œ±).comm‚ÇÇ
    begin
      have eq := (quotient_triangulated_functor_struct.map_triangle.map Œ±).comm‚ÇÉ,
      dsimp at eq,
      erw [comp_id, comp_id, comp_id] at eq,
      exact eq.symm,
    end
    (trans (quotient_triangulated_functor_struct.map_triangle.map Œ≤).comm‚ÇÇ (id_comp _))
    begin
      have eq := (quotient_triangulated_functor_struct.map_triangle.map Œ≤).comm‚ÇÉ,
      dsimp at eq,
      erw comp_id at eq,
      conv_rhs at eq { congr, skip, erw comp_id, },
      exact eq,
    end _,
  refine pretriangulated.isomorphic_distinguished _
    (mapping_cone_comp_triangle_distinguished u‚ÇÅ‚ÇÇ u‚ÇÇ‚ÇÉ) _
    (triangle.mk_iso _ _ (iso.refl _) (iso.refl _) (iso.refl _) (by tidy) (by tidy) _),
  { dsimp,
    erw [comp_id, id_comp], },
end)

end homotopy_category
