/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import for_mathlib.algebra.homology.hom_complex

noncomputable theory

open category_theory category_theory.category category_theory.limits category_theory.preadditive

namespace algebra

namespace homology

namespace hom_complex

variables {C : Type*} [category C] [preadditive C]

variables {F G : chain_complex C ‚Ñ§} {n : ‚Ñ§} [‚àÄ p, has_binary_biproduct (F.X (p-1-n)) (G.X p)]

@[simps]
def twist (z : hom_complex.Z F G n) : chain_complex C ‚Ñ§ :=
{ X := Œª p, biprod (F.X (p-1-n)) (G.X p),
  d := Œª p q, begin
    refine biprod.desc (biprod.lift (Œµ (n+1) ‚Ä¢ F.d (p-1-n) (q-1-n)) (z.1 (p-1-n) ‚â´ _)) (biprod.lift 0 (G.d p q)),
    by_cases q+1=p,
    { exact eq_to_hom (by { congr, rw ‚Üê h, linarith, }), },
    { exact 0, }
  end,
  shape' := Œª p q hpq, begin
    have hpq' : ¬¨ (q-1-n)+1 = p-1-n,
    { intro h‚ÇÅ,
      change ¬¨ q+1 = p at hpq,
      apply hpq,
      linarith, },
    split_ifs,
    { exfalso, exact hpq h, },
    { ext,
      { simp only [comp_zero, biprod.inl_desc, biprod.lift_fst, zero_comp, smul_zero, F.shape (p-1-n) (q-1-n) hpq'], },
      { simp only [comp_zero, biprod.inl_desc, biprod.lift_snd, zero_comp], },
      { simp only [comp_zero, biprod.inr_desc, biprod.lift_fst, zero_comp], },
      { simp only [comp_zero, biprod.inr_desc, biprod.lift_snd, zero_comp, G.shape p q hpq], }, },
  end,
  d_comp_d' := Œª p q r hpq hpr, begin
    change q+1 = p at hpq,
    change r+1 = q at hpr,
    substs hpq hpr,
    split_ifs,
    { ext,
      { simp only [add_zero, biprod.inl_desc_assoc, biprod.lift_desc, linear.smul_comp, assoc,
          preadditive.add_comp, biprod.lift_fst, linear.comp_smul, homological_complex.d_comp_d,
            smul_zero, comp_zero, zero_comp], },
      { simp only [biprod.inl_desc_assoc, biprod.lift_desc, linear.smul_comp, assoc, preadditive.add_comp,
          biprod.lift_snd, linear.comp_smul, comp_zero, zero_comp],
        have hz‚ÇÅ := z.2,
        dsimp only [Z] at hz‚ÇÅ,
        rw add_monoid_hom.mem_ker at hz‚ÇÅ,
        have hz‚ÇÇ := congr_fun hz‚ÇÅ (r+1-n),
        have h‚ÇÅ : r+1+1-1-n = r+1-n := by linarith,
        have h‚ÇÇ : r+1-n+ (n-1) = r := by linarith,
        have hz‚ÇÉ := congr_arg (Œª œÜ, eq_to_hom (congr_arg F.X h‚ÇÅ) ‚â´ œÜ ‚â´ eq_to_hom (congr_arg G.X h‚ÇÇ)) hz‚ÇÇ,
        have eqz‚ÇÅ := eq_to_hom_f n z.1 (r+1-n+(n-1)-n) (r-n) (by linarith),
        have eqz‚ÇÇ := eq_to_hom_f n z.1 (r+1-1-n) (r-n) (by linarith),
        have eqz‚ÇÉ := eq_to_hom_f n z.1 (r+1+1-1-n) (r+1-n) (by linarith),
        dsimp at eqz‚ÇÅ eqz‚ÇÇ eqz‚ÇÉ hz‚ÇÉ ‚ä¢,
        rw [eq_to_hom_d G (r+1-n+n) (r+1-n+(n-1)) (r+1) r (by linarith) (by linarith),
          eq_to_hom_d F (r+1-n) (r+1-n+(n-1)-n) (r+1-n) (r-n) (by linarith) (by linarith),
          eqz‚ÇÅ] at hz‚ÇÉ,
        rw [eq_to_hom_d F (r+1+1-1-n) (r+1-1-n) (r+1-n) (r-n) (by linarith) (by linarith), eqz‚ÇÇ, eqz‚ÇÉ],
        conv_lhs { rw add_comm, },
        simpa only [assoc, eq_to_hom_refl, id_comp, comp_id, zero_comp, comp_zero, comp_add, add_comp,
          comp_zsmul, zsmul_comp, eq_to_hom_trans, eq_to_hom_trans_assoc] using hz‚ÇÉ, },
      { simp only [zero_add, biprod.inr_desc_assoc, biprod.lift_desc, zero_comp, assoc, biprod.lift_fst, comp_zero], },
      { simp only [zero_add, biprod.inr_desc_assoc, biprod.lift_desc, zero_comp, assoc,
          biprod.lift_snd, homological_complex.d_comp_d, comp_zero], }, },
    { exfalso, exact h rfl, },
  end }

@[simps]
def twist.Œπ (z : hom_complex.Z F G n) : G ‚ü∂ twist z :=
{ f := Œª p, biprod.lift 0 (ùüô (G.X p)), }

def twist.desc (z : hom_complex.Z F G n) {K : chain_complex C ‚Ñ§}
  (Œ≥ : G ‚ü∂ K) (œÜ : (hom_complex F K).X (n+1))
  (hœÜŒ≥ : (hom_complex F K).d (n+1) n œÜ = ((hom_complex_functor_source_fixed F).map Œ≥).f n z.1) :
  twist z ‚ü∂ K :=
{ f := Œª p, biprod.desc (œÜ (p-1-n) ‚â´ eq_to_hom (by { congr, linarith, })) (Œ≥.f p),
  comm' := Œª p q hpq, begin
    change q+1 = p at hpq,
    subst hpq,
    ext,
    { dsimp,
      simp only [biprod.lift_desc, biprod.inl_desc_assoc, assoc, dif_pos, linear.smul_comp],
      have h‚ÇÅ : q+1-1-n = q-n := by linarith,
      have h‚ÇÇ : q-n+n = q := by linarith,
      have h‚ÇÉ := congr_fun hœÜŒ≥ (q-n),
      have h‚ÇÑ := congr_arg (Œª œÜ, eq_to_hom (congr_arg F.X h‚ÇÅ) ‚â´ œÜ ‚â´ eq_to_hom (congr_arg K.X h‚ÇÇ)) h‚ÇÉ,
      have h‚ÇÖ := eq_to_hom_f n z.1 (q+1-1-n) (q-n) (by linarith),
      dsimp at h‚ÇÑ h‚ÇÖ,
      rw [eq_to_hom_d K (q-n+(n+1)) (q-n+n) (q+1) q (by linarith) (by linarith),
        eq_to_hom_d F (q-n) (q-n+n-(n+1)) (q-n) (q-1-n) (by linarith) (by linarith),
        eq_to_hom_f (n+1) œÜ (q-n+n-(n+1)) (q-1-n) (by linarith),
        eq_to_hom_f' Œ≥ (q-n+n) q (by linarith)] at h‚ÇÑ,
      rw [eq_to_hom_d F (q+1-1-n) (q-1-n) (q-n) (q-1-n) (by linarith) (by linarith),
        eq_to_hom_f (n+1) œÜ (q+1-1-n) (q-n) (by linarith), h‚ÇÖ],
      simp only [add_comp, assoc, linear.smul_comp, eq_to_hom_trans, comp_add, linear.comp_smul,
        eq_to_hom_trans_assoc, eq_to_hom_refl, comp_id, id_comp, hŒµ', neg_neg, neg_smul] at h‚ÇÑ ‚ä¢,
      rw ‚Üê h‚ÇÑ,
      abel, },
    { dsimp,
      simp only [zero_add, biprod.inr_desc_assoc, homological_complex.hom.comm, biprod.lift_desc, zero_comp], },
  end, }

@[simp]
def twist.œÜ {z : hom_complex.Z F G n} {K : chain_complex C ‚Ñ§} (f : twist z ‚ü∂ K) :
  (hom_complex F K).X (n+1) :=
Œª q, eq_to_hom (by { congr, linarith, }) ‚â´ biprod.inl ‚â´ f.f (q+(n+1))

@[simps]
def twist.Œ≥ {z : hom_complex.Z F G n} {K : chain_complex C ‚Ñ§} (f : twist z ‚ü∂ K) : G ‚ü∂ K :=
twist.Œπ z ‚â´ f

def twist.dœÜ {z : hom_complex.Z F G n} {K : chain_complex C ‚Ñ§} (f : twist z ‚ü∂ K) :
  (hom_complex F K).d (n+1) n (twist.œÜ f) = ((hom_complex_functor_source_fixed F).map (twist.Œ≥ f)).f n z.1 :=
begin
  ext q,
  dsimp,
  simp only [assoc, homological_complex.hom.comm, twist_d, biprod.inl_desc_assoc],
  have h‚ÇÅ‚ÇÇ := f.comm (q+(n+1)) (q+n),
  rw dif_pos (show q+n+1=q+(n+1), by linarith),
  sorry,
end

end hom_complex

end homology

end algebra