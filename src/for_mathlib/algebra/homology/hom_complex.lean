/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import algebra.homology.homotopy
import algebra.homology.additive
import algebra.category.Group.abelian
import data.int.parity
import algebra.homology.short_exact.preadditive

noncomputable theory

open category_theory category_theory.preadditive category_theory.limits category_theory.category

universes v u

variables {C : Type u} [category.{v} C] [preadditive C]

namespace cochain_complex

variables {F G K L : cochain_complex C ‚Ñ§} (n m : ‚Ñ§)

structure is_termwise_kernel (i : F ‚ü∂ G) (f : G ‚ü∂ K) :=
(zero : ‚àÄ n, i.f n ‚â´ f.f n = 0)
(is_limit : ‚àÄ n, is_limit (kernel_fork.of_Œπ (i.f n) (zero n)))

namespace is_termwise_kernel

lemma termwise_mono {i : F ‚ü∂ G} {f : G ‚ü∂ K}
  (h : is_termwise_kernel i f) (q : ‚Ñ§) : mono (i.f q) :=
mono_of_is_limit_fork (h.is_limit q)

end is_termwise_kernel

namespace hom_complex

def Œµ (n : ‚Ñ§) : ‚Ñ§ := ‚Üë((-1 : units ‚Ñ§) ^ n)

@[simp]

lemma Œµ_add (n‚ÇÅ n‚ÇÇ : ‚Ñ§) : Œµ (n‚ÇÅ + n‚ÇÇ) = Œµ n‚ÇÅ * Œµ n‚ÇÇ :=
by { dsimp [Œµ], rw [‚Üê units.coe_mul, ‚Üê units.ext_iff, zpow_add], }

@[simp]
lemma Œµ_0 : Œµ 0 = 1 := rfl

@[simp]
lemma Œµ_1 : Œµ 1 = -1 := rfl

@[simp]
lemma Œµ_succ (n : ‚Ñ§) : Œµ (n + 1) = - Œµ n :=
by simp only [Œµ_add, Œµ_1, algebra.id.smul_eq_mul, mul_neg, mul_one]

lemma Œµ_even (n : ‚Ñ§) (hn : even n) : Œµ n = 1 :=
begin
  change _ = ‚Üë(1 : units ‚Ñ§),
  cases hn with k hk,
  simp only [Œµ, ‚Üê units.ext_iff, hk, zpow_add, ‚Üê mul_zpow,
    mul_neg, mul_one, neg_neg, one_zpow],
end

lemma Œµ_odd (n : ‚Ñ§) (hn : odd n) : Œµ n = -1 :=
begin
  cases hn with k hk,
  rw [hk, Œµ_add, Œµ_1, Œµ_even (2*k) ‚ü®k, two_mul k‚ü©, one_mul],
end

lemma Œµ_eq_one_iff (n : ‚Ñ§) : Œµ n = 1 ‚Üî even n :=
begin
  split,
  { intro h,
    rw int.even_iff_not_odd,
    intro h',
    rw Œµ_odd _ h' at h,
    linarith, },
  { intro h,
    rw Œµ_even _ h, },
end

lemma Œµ_eq_neg_one_iff (n : ‚Ñ§) : Œµ n = -1 ‚Üî odd n :=
begin
  split,
  { intro h,
    rw int.odd_iff_not_even,
    intro h',
    rw Œµ_even _ h' at h,
    linarith, },
  { intro h,
    rw Œµ_odd _ h, },
end

lemma Œµ_neg (n : ‚Ñ§) : Œµ (-n) = Œµ n :=
begin
  dsimp [Œµ],
  simp only [zpow_neg, ‚Üê inv_zpow, inv_neg, inv_one],
end

lemma Œµ_eq_iff (n‚ÇÅ n‚ÇÇ : ‚Ñ§) : Œµ n‚ÇÅ = Œµ n‚ÇÇ ‚Üî
  even (n‚ÇÅ - n‚ÇÇ) :=
begin
  by_cases h‚ÇÇ : even n‚ÇÇ,
  { rw [Œµ_even _ h‚ÇÇ, int.even_sub, Œµ_eq_one_iff],
    tauto, },
  { rw [‚Üê int.odd_iff_not_even] at h‚ÇÇ,
    rw [Œµ_odd _ h‚ÇÇ, int.even_sub, Œµ_eq_neg_one_iff,
      int.even_iff_not_odd, int.even_iff_not_odd],
      tauto, }
end

@[simp]
lemma mul_Œµ_self (n : ‚Ñ§) : Œµ n * Œµ n = 1 :=
by simpa only [‚Üê Œµ_add] using Œµ_even _ (even_add_self n)

@[simp]
lemma Œµ_mul_self (n : ‚Ñ§) : Œµ (n * n) = Œµ n :=
begin
  by_cases hn : even n,
  { rw [Œµ_even _ hn, Œµ_even],
    obtain ‚ü®k, rfl‚ü© := hn,
    exact ‚ü®2*k*k, by ring‚ü©, },
  { rw [‚Üê int.odd_iff_not_even] at hn,
    rw [Œµ_odd _ hn],
    obtain ‚ü®k, rfl‚ü© := hn,
    rw [Œµ_odd],
    exact ‚ü®2*k*k + 2*k, by ring‚ü©, },
end

structure triplet (n : ‚Ñ§) := (p : ‚Ñ§) (q : ‚Ñ§) (hpq : q=p+n)

variables (F G)

@[derive add_comm_group]
def cochain := Œ† (T : triplet n), F.X T.p ‚ü∂ G.X T.q

namespace cochain

variables {F G n}

def mk (v : Œ† (p q : ‚Ñ§) (hpq : q=p+n), F.X p ‚ü∂ G.X q) : cochain F G n :=
Œª T, v T.p T.q T.hpq

def v (c : cochain F G n) (p q : ‚Ñ§) (hpq : q=p+n) := c (triplet.mk p q hpq)

@[simp]
lemma mk_v (v : Œ† (p q : ‚Ñ§) (hpq : q=p+n), F.X p ‚ü∂ G.X q) (p q : ‚Ñ§) (hpq : q=p+n) :
  (mk v).v p q hpq = v p q hpq := rfl

lemma congr_v {z‚ÇÅ z‚ÇÇ : cochain F G n} (h : z‚ÇÅ = z‚ÇÇ) (p q : ‚Ñ§) (hpq : q=p+n) :
  z‚ÇÅ.v p q hpq = z‚ÇÇ.v p q hpq := by subst h

@[ext]
lemma ext (z‚ÇÅ z‚ÇÇ : cochain F G n) (h : ‚àÄ (p q : ‚Ñ§) (hpq : q=p+n), z‚ÇÅ.v p q hpq = z‚ÇÇ.v p q hpq) :
  z‚ÇÅ = z‚ÇÇ :=
begin
  ext T,
  rcases T with ‚ü®p, q, hpq‚ü©,
  exact h p q hpq,
end

@[ext]
lemma ext‚ÇÄ (z‚ÇÅ z‚ÇÇ : cochain F G 0)
  (h : ‚àÄ (p : ‚Ñ§), z‚ÇÅ.v p p (add_zero p).symm = z‚ÇÇ.v p p (add_zero p).symm ) : z‚ÇÅ = z‚ÇÇ :=
begin
  ext,
  have eq : q=p := by rw [hpq, add_zero],
  subst eq,
  apply h,
end

@[simp]
lemma zero_v {n : ‚Ñ§} (p q : ‚Ñ§) (hpq : q=p+n) : (0 : cochain F G n).v p q hpq = 0 := rfl

@[simp]
lemma add_v {n : ‚Ñ§} (z‚ÇÅ z‚ÇÇ : cochain F G n) (p q : ‚Ñ§) (hpq : q=p+n) :
  (z‚ÇÅ+z‚ÇÇ).v p q hpq = z‚ÇÅ.v p q hpq + z‚ÇÇ.v p q hpq := rfl

@[simp]
lemma sub_v {n : ‚Ñ§} (z‚ÇÅ z‚ÇÇ : cochain F G n) (p q : ‚Ñ§) (hpq : q=p+n) :
  (z‚ÇÅ-z‚ÇÇ).v p q hpq = z‚ÇÅ.v p q hpq - z‚ÇÇ.v p q hpq := rfl

@[simp]
lemma neg_v {n : ‚Ñ§} (z : cochain F G n) (p q : ‚Ñ§) (hpq : q=p+n) :
  (-z).v p q hpq = - (z.v p q hpq) := rfl

@[simp]
lemma zsmul_v {n k : ‚Ñ§} (z : cochain F G n) (p q : ‚Ñ§) (hpq : q=p+n) :
  (k ‚Ä¢ z).v p q hpq = k ‚Ä¢ (z.v p q hpq) := rfl

def of_homs (œà : Œ† (p : ‚Ñ§), F.X p ‚ü∂ G.X p) : cochain F G 0 :=
cochain.mk (Œª p q hpq, œà p ‚â´ eq_to_hom (by rw [hpq, add_zero]))

@[simp]
lemma of_homs_v (œà : Œ† (p : ‚Ñ§), F.X p ‚ü∂ G.X p) (p : ‚Ñ§) :
  (of_homs œà).v p p (add_zero p).symm = œà p :=
by simp only [of_homs, mk_v, eq_to_hom_refl, comp_id]

@[simp]
lemma of_homs_zero : of_homs (Œª p, (0 : F.X p ‚ü∂ G.X p)) = 0 :=
by { ext, simp only [of_homs_v, zero_v], }

@[simp]
lemma of_homs_v_comp_d (œà : Œ† (p : ‚Ñ§), F.X p ‚ü∂ G.X p) (p q q' : ‚Ñ§) (hpq : q=p+0) :
  (of_homs œà).v p q hpq ‚â´ G.d q q' = œà p ‚â´ G.d p q' :=
begin
  rw add_zero at hpq,
  subst hpq,
  rw of_homs_v,
end

@[simp]
lemma d_comp_of_homs_v (œà : Œ† (p : ‚Ñ§), F.X p ‚ü∂ G.X p) (p' p q  : ‚Ñ§) (hpq : q=p+0) :
  F.d p' p ‚â´ (of_homs œà).v p q hpq = F.d p' q ‚â´ œà q :=
begin
  rw add_zero at hpq,
  subst hpq,
  rw of_homs_v,
end

def of_hom (œÜ : F ‚ü∂ G) : cochain F G 0 :=
of_homs (Œª p, œÜ.f p)

@[simp]
lemma of_hom_zero : of_hom (0 : F ‚ü∂ G) = 0 :=
by simp only [of_hom, homological_complex.zero_f_apply, of_homs_zero]

@[simp]
lemma of_hom_v (œÜ : F ‚ü∂ G) (p : ‚Ñ§) : (of_hom œÜ).v p p (add_zero p).symm = œÜ.f p :=
by simp only [of_hom, of_homs_v]

@[simp]
lemma of_hom_v_comp_d (œÜ : F ‚ü∂ G) (p q q' : ‚Ñ§) (hpq : q=p+0) :
  (of_hom œÜ).v p q hpq ‚â´ G.d q q' = œÜ.f p ‚â´ G.d p q' :=
by simp only [of_hom, of_homs_v_comp_d]

@[simp]
lemma d_comp_of_hom_v (œÜ : F ‚ü∂ G) (p' p q  : ‚Ñ§) (hpq : q=p+0) :
  F.d p' p ‚â´ (of_hom œÜ).v p q hpq = F.d p' q ‚â´ œÜ.f q :=
by simp only [of_hom, d_comp_of_homs_v]

@[simp]
def of_homotopy {œÜ‚ÇÅ œÜ‚ÇÇ : F ‚ü∂ G} (ho : homotopy œÜ‚ÇÅ œÜ‚ÇÇ) : cochain F G (-1) :=
cochain.mk (Œª p q hpq, ho.hom p q)

def comp {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§} (z‚ÇÅ : cochain F G n‚ÇÅ) (z‚ÇÇ : cochain G K n‚ÇÇ) (h : n‚ÇÅ‚ÇÇ = n‚ÇÅ + n‚ÇÇ) :
  cochain F K n‚ÇÅ‚ÇÇ :=
cochain.mk (Œª p q hpq, z‚ÇÅ.v p (p+n‚ÇÅ) rfl ‚â´ z‚ÇÇ.v (p+n‚ÇÅ) q (by linarith))

notation a ` ‚â´[`:81 b `] ` c:80 := cochain.comp a c b

lemma comp_v {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§} (z‚ÇÅ : cochain F G n‚ÇÅ) (z‚ÇÇ : cochain G K n‚ÇÇ) (h : n‚ÇÅ‚ÇÇ = n‚ÇÅ+n‚ÇÇ)
  (p‚ÇÅ p‚ÇÇ p‚ÇÉ : ‚Ñ§) (h‚ÇÅ : p‚ÇÇ=p‚ÇÅ+n‚ÇÅ) (h‚ÇÇ : p‚ÇÉ=p‚ÇÇ+n‚ÇÇ) :
  (comp z‚ÇÅ z‚ÇÇ h).v p‚ÇÅ p‚ÇÉ (by rw [h‚ÇÇ, h‚ÇÅ, h, add_assoc]) =
  z‚ÇÅ.v p‚ÇÅ p‚ÇÇ h‚ÇÅ ‚â´ z‚ÇÇ.v p‚ÇÇ p‚ÇÉ h‚ÇÇ := by { subst h‚ÇÅ, refl,}

@[simp]
lemma zero_comp {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§} (z‚ÇÇ : cochain G K n‚ÇÇ)
  (h : n‚ÇÅ‚ÇÇ = n‚ÇÅ + n‚ÇÇ) : comp (0 : cochain F G n‚ÇÅ) z‚ÇÇ h = 0 :=
begin
  ext,
  dsimp [comp, mk, v],
  simp only [zero_comp],
end

@[simp]
lemma add_comp {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§} (z‚ÇÅ z‚ÇÅ' : cochain F G n‚ÇÅ) (z‚ÇÇ : cochain G K n‚ÇÇ)
  (h : n‚ÇÅ‚ÇÇ = n‚ÇÅ + n‚ÇÇ) : comp (z‚ÇÅ+z‚ÇÅ') z‚ÇÇ h = comp z‚ÇÅ z‚ÇÇ h + comp z‚ÇÅ' z‚ÇÇ h :=
begin
  ext,
  dsimp [comp, mk, v],
  simp only [add_comp],
end

@[simp]
lemma sub_comp {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§} (z‚ÇÅ z‚ÇÅ' : cochain F G n‚ÇÅ) (z‚ÇÇ : cochain G K n‚ÇÇ)
  (h : n‚ÇÅ‚ÇÇ = n‚ÇÅ + n‚ÇÇ) : comp (z‚ÇÅ-z‚ÇÅ') z‚ÇÇ h = comp z‚ÇÅ z‚ÇÇ h - comp z‚ÇÅ' z‚ÇÇ h :=
begin
  ext,
  dsimp [comp, mk, v],
  simp only [sub_comp],
end

@[simp]
lemma neg_comp {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§} (z‚ÇÅ : cochain F G n‚ÇÅ) (z‚ÇÇ : cochain G K n‚ÇÇ)
  (h : n‚ÇÅ‚ÇÇ = n‚ÇÅ + n‚ÇÇ) : comp (-z‚ÇÅ) z‚ÇÇ h = -comp z‚ÇÅ z‚ÇÇ h :=
begin
  ext,
  dsimp [comp, mk, v],
  simp only [neg_comp],
end

@[simp]
lemma zsmul_comp {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§} (k : ‚Ñ§) (z‚ÇÅ : cochain F G n‚ÇÅ) (z‚ÇÇ : cochain G K n‚ÇÇ)
  (h : n‚ÇÅ‚ÇÇ = n‚ÇÅ + n‚ÇÇ) : comp (k ‚Ä¢ z‚ÇÅ) z‚ÇÇ h = k ‚Ä¢ comp z‚ÇÅ z‚ÇÇ h :=
begin
  ext,
  dsimp [comp, mk, v],
  simp only [zsmul_comp],
end

@[simp]
lemma zero_cochain_comp {n : ‚Ñ§} (z‚ÇÅ : cochain F G 0) (z‚ÇÇ : cochain G K n)
  (p q : ‚Ñ§) (hpq : q=p+n) :
  (cochain.comp z‚ÇÅ z‚ÇÇ (zero_add n).symm).v p q hpq =
    z‚ÇÅ.v p p (add_zero p).symm ‚â´ z‚ÇÇ.v p q hpq :=
comp_v z‚ÇÅ z‚ÇÇ (zero_add n).symm p p q (add_zero p).symm hpq

lemma zero_cochain_comp' {n : ‚Ñ§} (z‚ÇÅ : cochain F G 0) (z‚ÇÇ : cochain G K n)
  (p‚ÇÅ p‚ÇÇ p‚ÇÉ : ‚Ñ§) (h‚ÇÅ‚ÇÇ : p‚ÇÇ=p‚ÇÅ+0) (h‚ÇÇ‚ÇÉ : p‚ÇÉ=p‚ÇÇ+n) :
  (z‚ÇÅ.v p‚ÇÅ p‚ÇÇ h‚ÇÅ‚ÇÇ ‚â´ z‚ÇÇ.v p‚ÇÇ p‚ÇÉ h‚ÇÇ‚ÇÉ : F.X p‚ÇÅ ‚ü∂ K.X p‚ÇÉ) =
  z‚ÇÅ.v p‚ÇÅ p‚ÇÅ (add_zero p‚ÇÅ).symm ‚â´ z‚ÇÇ.v p‚ÇÅ p‚ÇÉ (show p‚ÇÉ = p‚ÇÅ+n, by rw [h‚ÇÇ‚ÇÉ, h‚ÇÅ‚ÇÇ, add_zero]) :=
by { rw add_zero at h‚ÇÅ‚ÇÇ, subst h‚ÇÅ‚ÇÇ, }

@[simp]
lemma id_comp {n : ‚Ñ§} (z‚ÇÇ : cochain F G n) :
  cochain.comp (cochain.of_hom (ùüô F)) z‚ÇÇ (zero_add n).symm = z‚ÇÇ :=
begin
  ext,
  simp only [zero_cochain_comp, of_hom_v, homological_complex.id_f, id_comp],
end

@[simp]
lemma comp_zero {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§} (z‚ÇÅ : cochain F G n‚ÇÅ)
  (h : n‚ÇÅ‚ÇÇ = n‚ÇÅ + n‚ÇÇ) : comp z‚ÇÅ (0 : cochain G K n‚ÇÇ) h = 0 :=
begin
  ext,
  dsimp [comp, mk, v],
  simp only [comp_zero],
end

@[simp]
lemma comp_add {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§} (z‚ÇÅ : cochain F G n‚ÇÅ) (z‚ÇÇ z‚ÇÇ' : cochain G K n‚ÇÇ)
  (h : n‚ÇÅ‚ÇÇ = n‚ÇÅ + n‚ÇÇ) : comp z‚ÇÅ (z‚ÇÇ+z‚ÇÇ') h = comp z‚ÇÅ z‚ÇÇ h + comp z‚ÇÅ z‚ÇÇ' h :=
begin
  ext,
  dsimp [comp, mk, v],
  simp only [comp_add],
end

@[simp]
lemma comp_sub {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§} (z‚ÇÅ : cochain F G n‚ÇÅ) (z‚ÇÇ z‚ÇÇ' : cochain G K n‚ÇÇ)
  (h : n‚ÇÅ‚ÇÇ = n‚ÇÅ + n‚ÇÇ) : comp z‚ÇÅ (z‚ÇÇ-z‚ÇÇ') h = comp z‚ÇÅ z‚ÇÇ h - comp z‚ÇÅ z‚ÇÇ' h :=
begin
  ext,
  dsimp [comp, mk, v],
  simp only [comp_sub],
end

@[simp]
lemma comp_neg {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§} (z‚ÇÅ : cochain F G n‚ÇÅ) (z‚ÇÇ : cochain G K n‚ÇÇ)
  (h : n‚ÇÅ‚ÇÇ = n‚ÇÅ + n‚ÇÇ) : comp z‚ÇÅ (-z‚ÇÇ) h = -comp z‚ÇÅ z‚ÇÇ h :=
begin
  ext,
  dsimp [comp, mk, v],
  simp only [comp_neg],
end

@[simp]
lemma comp_zsmul {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§} (k : ‚Ñ§) (z‚ÇÅ : cochain F G n‚ÇÅ) (z‚ÇÇ : cochain G K n‚ÇÇ)
  (h : n‚ÇÅ‚ÇÇ = n‚ÇÅ + n‚ÇÇ) : comp z‚ÇÅ (k ‚Ä¢ z‚ÇÇ) h = k ‚Ä¢ comp z‚ÇÅ z‚ÇÇ h :=
begin
  ext,
  dsimp [comp, mk, v],
  simp only [comp_zsmul],
end

@[simp]
lemma comp_zero_cochain (z‚ÇÅ : cochain F G n) (z‚ÇÇ : cochain G K 0)
  (p q : ‚Ñ§) (hpq : q=p+n) :
  (cochain.comp z‚ÇÅ z‚ÇÇ (add_zero n).symm).v p q hpq =
    z‚ÇÅ.v p q hpq ‚â´ z‚ÇÇ.v q q (add_zero q).symm :=
comp_v z‚ÇÅ z‚ÇÇ (add_zero n).symm p q q hpq (add_zero q).symm

lemma comp_zero_cochain' (z‚ÇÅ : cochain F G n) (z‚ÇÇ : cochain G K 0)
  (p‚ÇÅ p‚ÇÇ p‚ÇÉ : ‚Ñ§) (h‚ÇÅ‚ÇÇ : p‚ÇÇ=p‚ÇÅ+n) (h‚ÇÇ‚ÇÉ : p‚ÇÉ=p‚ÇÇ+0) :
  (z‚ÇÅ.v p‚ÇÅ p‚ÇÇ h‚ÇÅ‚ÇÇ ‚â´ z‚ÇÇ.v p‚ÇÇ p‚ÇÉ h‚ÇÇ‚ÇÉ : F.X p‚ÇÅ ‚ü∂ K.X p‚ÇÉ) =
  z‚ÇÅ.v p‚ÇÅ p‚ÇÉ (show p‚ÇÉ=p‚ÇÅ+n, by rw [h‚ÇÇ‚ÇÉ, h‚ÇÅ‚ÇÇ, add_zero]) ‚â´ z‚ÇÇ.v p‚ÇÉ p‚ÇÉ (add_zero p‚ÇÉ).symm :=
by { rw add_zero at h‚ÇÇ‚ÇÉ, subst h‚ÇÇ‚ÇÉ, }

@[simp]
lemma comp_id {n : ‚Ñ§} (z‚ÇÅ : cochain F G n) :
  cochain.comp z‚ÇÅ (cochain.of_hom (ùüô G)) (add_zero n).symm = z‚ÇÅ :=
begin
  ext,
  simp only [comp_zero_cochain, of_hom_v, homological_complex.id_f, comp_id],
end

@[simp]
lemma of_homs_comp (œÜ : Œ† (p : ‚Ñ§), F.X p ‚ü∂ G.X p) (œà : Œ† (p : ‚Ñ§), G.X p ‚ü∂ K.X p) :
  cochain.comp (of_homs œÜ) (of_homs œà) (zero_add 0).symm = of_homs (Œª p, œÜ p ‚â´ œà p) :=
begin
  ext,
  simp only [comp_zero_cochain, of_homs_v],
end

@[simp]
lemma of_hom_comp (f : F ‚ü∂ G) (g : G ‚ü∂ K) :
  of_hom (f ‚â´ g) = cochain.comp (of_hom f) (of_hom g) (zero_add 0).symm :=
by simpa only [of_hom, of_homs_comp]

lemma comp_assoc {n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÅ‚ÇÇ n‚ÇÇ‚ÇÉ n‚ÇÅ‚ÇÇ‚ÇÉ : ‚Ñ§}
  (z‚ÇÅ : cochain F G n‚ÇÅ) (z‚ÇÇ : cochain G K n‚ÇÇ) (z‚ÇÉ : cochain K L n‚ÇÉ)
  (h‚ÇÅ‚ÇÇ : n‚ÇÅ‚ÇÇ = n‚ÇÅ + n‚ÇÇ) (h‚ÇÇ‚ÇÉ : n‚ÇÇ‚ÇÉ = n‚ÇÇ + n‚ÇÉ) (h‚ÇÅ‚ÇÇ‚ÇÉ : n‚ÇÅ‚ÇÇ‚ÇÉ = n‚ÇÅ + n‚ÇÇ + n‚ÇÉ) :
  cochain.comp (cochain.comp z‚ÇÅ z‚ÇÇ h‚ÇÅ‚ÇÇ) z‚ÇÉ (show n‚ÇÅ‚ÇÇ‚ÇÉ = n‚ÇÅ‚ÇÇ + n‚ÇÉ, by rw [h‚ÇÅ‚ÇÇ, h‚ÇÅ‚ÇÇ‚ÇÉ]) =
    cochain.comp z‚ÇÅ (cochain.comp z‚ÇÇ z‚ÇÉ h‚ÇÇ‚ÇÉ)
      (show n‚ÇÅ‚ÇÇ‚ÇÉ = n‚ÇÅ + n‚ÇÇ‚ÇÉ, by rw [h‚ÇÇ‚ÇÉ, h‚ÇÅ‚ÇÇ‚ÇÉ, add_assoc]) :=
begin
  ext,
  simp only [comp_v _ _ (show n‚ÇÅ‚ÇÇ‚ÇÉ = n‚ÇÅ‚ÇÇ + n‚ÇÉ, by rw [h‚ÇÅ‚ÇÇ, h‚ÇÅ‚ÇÇ‚ÇÉ]) p (p+n‚ÇÅ‚ÇÇ) q rfl (by linarith),
    comp_v _ _ h‚ÇÅ‚ÇÇ p (p+n‚ÇÅ) (p+n‚ÇÅ‚ÇÇ) rfl (by linarith),
    comp_v z‚ÇÅ (cochain.comp z‚ÇÇ z‚ÇÉ h‚ÇÇ‚ÇÉ) (show n‚ÇÅ‚ÇÇ‚ÇÉ = n‚ÇÅ + n‚ÇÇ‚ÇÉ, by linarith)
      p (p+n‚ÇÅ) q rfl (by linarith),
    comp_v _ _ h‚ÇÇ‚ÇÉ (p+n‚ÇÅ) (p+n‚ÇÅ‚ÇÇ) q (by linarith) (by linarith), assoc],
end

@[simp]
lemma comp_assoc_of_first_is_zero_cochain {n‚ÇÇ n‚ÇÉ n‚ÇÇ‚ÇÉ : ‚Ñ§}
  (z‚ÇÅ : cochain F G 0) (z‚ÇÇ : cochain G K n‚ÇÇ) (z‚ÇÉ : cochain K L n‚ÇÉ)
  (h‚ÇÇ‚ÇÉ : n‚ÇÇ‚ÇÉ = n‚ÇÇ + n‚ÇÉ) :
  cochain.comp (cochain.comp z‚ÇÅ z‚ÇÇ (zero_add n‚ÇÇ).symm) z‚ÇÉ h‚ÇÇ‚ÇÉ =
    cochain.comp z‚ÇÅ (cochain.comp z‚ÇÇ z‚ÇÉ h‚ÇÇ‚ÇÉ)
      (zero_add n‚ÇÇ‚ÇÉ).symm :=
comp_assoc z‚ÇÅ z‚ÇÇ z‚ÇÉ (zero_add n‚ÇÇ).symm h‚ÇÇ‚ÇÉ (by linarith)

@[simp]
lemma comp_assoc_of_second_is_zero_cochain {n‚ÇÅ n‚ÇÉ n‚ÇÅ‚ÇÉ : ‚Ñ§}
  (z‚ÇÅ : cochain F G n‚ÇÅ) (z‚ÇÇ : cochain G K 0) (z‚ÇÉ : cochain K L n‚ÇÉ) (h‚ÇÅ‚ÇÉ : n‚ÇÅ‚ÇÉ = n‚ÇÅ + n‚ÇÉ) :
  cochain.comp (cochain.comp z‚ÇÅ z‚ÇÇ (add_zero n‚ÇÅ).symm) z‚ÇÉ h‚ÇÅ‚ÇÉ =
    cochain.comp z‚ÇÅ (cochain.comp z‚ÇÇ z‚ÇÉ (zero_add n‚ÇÉ).symm) h‚ÇÅ‚ÇÉ :=
comp_assoc z‚ÇÅ z‚ÇÇ z‚ÇÉ (add_zero n‚ÇÅ).symm (zero_add n‚ÇÉ).symm (by linarith)

@[simp]
lemma comp_assoc_of_third_is_zero_cochain {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§}
  (z‚ÇÅ : cochain F G n‚ÇÅ) (z‚ÇÇ : cochain G K n‚ÇÇ) (z‚ÇÉ : cochain K L 0) (h‚ÇÅ‚ÇÇ : n‚ÇÅ‚ÇÇ = n‚ÇÅ + n‚ÇÇ) :
  cochain.comp (cochain.comp z‚ÇÅ z‚ÇÇ h‚ÇÅ‚ÇÇ) z‚ÇÉ (add_zero n‚ÇÅ‚ÇÇ).symm =
    cochain.comp z‚ÇÅ (cochain.comp z‚ÇÇ z‚ÇÉ (add_zero n‚ÇÇ).symm) h‚ÇÅ‚ÇÇ :=
comp_assoc z‚ÇÅ z‚ÇÇ z‚ÇÉ h‚ÇÅ‚ÇÇ (add_zero n‚ÇÇ).symm (by linarith)

variable (K)

def of_d : cochain K K 1 := cochain.mk (Œª p q hpq, K.d p q)

@[simp]
def of_d_v (p q : ‚Ñ§) (hpq : q=p+1) :
  (of_d K).v p q hpq = K.d p q := rfl

end cochain

/- Differentials -/

variables {F G} (n)

def Œ¥ (z : cochain F G n) : cochain F G m :=
cochain.mk (Œª (p q : ‚Ñ§) hpq, z.v p (p+n) rfl ‚â´ G.d (p+n) q +
  Œµ (n+1) ‚Ä¢ F.d p (p+m-n) ‚â´ z.v (p+m-n) q (by { dsimp [int.sub], linarith}))

lemma Œ¥_v (hnm : n+1=m) (z : cochain F G n) (p q : ‚Ñ§) (hpq : q=p+m) (q‚ÇÅ q‚ÇÇ : ‚Ñ§)
  (hq‚ÇÅ : q‚ÇÅ=q-1) (hq‚ÇÇ : q‚ÇÇ=p+1) : (Œ¥ n m z).v p q hpq =
  z.v p q‚ÇÅ (by {rw [hq‚ÇÅ, hpq, ‚Üê hnm, ‚Üê add_assoc, add_tsub_cancel_right],}) ‚â´ G.d q‚ÇÅ q
  + Œµ (n+1) ‚Ä¢ F.d p q‚ÇÇ ‚â´ z.v q‚ÇÇ q (by rw [hpq, hq‚ÇÇ, ‚Üê hnm, add_comm n, add_assoc]) :=
begin
  have h‚ÇÅ : q‚ÇÅ = p+n := by linarith,
  have h‚ÇÇ : q‚ÇÇ = p+m-n := by linarith,
  substs h‚ÇÅ h‚ÇÇ,
  refl,
end

lemma Œ¥_shape (hnm : ¬¨ n+1=m) (z : cochain F G n) : Œ¥ n m z = 0 :=
begin
  ext,
  dsimp [Œ¥, cochain.mk, cochain.v],
  rw [F.shape, G.shape, limits.comp_zero, limits.zero_comp, smul_zero, add_zero],
  all_goals
  { change ¬¨ _=_ ,
    intro h,
    apply hnm,
    linarith, },
end

variables (F G)

def Œ¥_hom : cochain F G n ‚Üí+ cochain F G m :=
{ to_fun := Œ¥ n m,
  map_zero' := begin
    ext,
    dsimp [Œ¥, cochain.mk, cochain.v],
    simp only [limits.zero_comp, limits.comp_zero, smul_zero, add_zero],
  end,
  map_add' := Œª z‚ÇÅ z‚ÇÇ, begin
    ext,
    dsimp [Œ¥, cochain.mk, cochain.v],
    simp only [preadditive.add_comp, preadditive.comp_add, smul_add],
    abel,
  end}

variables {F G}

@[simp]
lemma Œ¥_add (z‚ÇÅ z‚ÇÇ : cochain F G n) : Œ¥ n m (z‚ÇÅ + z‚ÇÇ) = Œ¥ n m z‚ÇÅ + Œ¥ n m z‚ÇÇ :=
(Œ¥_hom F G n m).map_add z‚ÇÅ z‚ÇÇ

@[simp]
lemma Œ¥_sub (z‚ÇÅ z‚ÇÇ : cochain F G n) : Œ¥ n m (z‚ÇÅ - z‚ÇÇ) = Œ¥ n m z‚ÇÅ - Œ¥ n m z‚ÇÇ :=
(Œ¥_hom F G n m).map_sub z‚ÇÅ z‚ÇÇ

@[simp]
lemma Œ¥_zero : Œ¥ n m (0 : cochain F G n) = 0 := (Œ¥_hom F G n m).map_zero

@[simp]
lemma Œ¥_neg (z : cochain F G n) : Œ¥ n m (-z) = - Œ¥ n m z :=
(Œ¥_hom F G n m).map_neg z

@[simp]
lemma Œ¥_zsmul (k : ‚Ñ§) (z : cochain F G n) : Œ¥ n m (k ‚Ä¢ z) = k ‚Ä¢ Œ¥ n m z :=
(Œ¥_hom F G n m).map_zsmul z k

@[simp]
lemma Œ¥Œ¥ (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§) (z : cochain F G n‚ÇÄ) : Œ¥ n‚ÇÅ n‚ÇÇ (Œ¥ n‚ÇÄ n‚ÇÅ z) = 0 :=
begin
  by_cases h‚ÇÄ‚ÇÅ : n‚ÇÄ+1 = n‚ÇÅ, swap,
  { rw [Œ¥_shape n‚ÇÄ n‚ÇÅ h‚ÇÄ‚ÇÅ, Œ¥_zero], },
  by_cases h‚ÇÅ‚ÇÇ : n‚ÇÅ+1 = n‚ÇÇ, swap,
  { rw [Œ¥_shape n‚ÇÅ n‚ÇÇ h‚ÇÅ‚ÇÇ], },
  ext,
  rw Œ¥_v n‚ÇÅ n‚ÇÇ h‚ÇÅ‚ÇÇ _ p q hpq _ _ rfl rfl,
  rw Œ¥_v n‚ÇÄ n‚ÇÅ h‚ÇÄ‚ÇÅ z p (q-1) (by linarith) (q-2) _ (by linarith) rfl,
  rw Œ¥_v n‚ÇÄ n‚ÇÅ h‚ÇÄ‚ÇÅ z (p+1) q (by linarith) _ (p+2) rfl (by linarith),
  simp only [‚Üê h‚ÇÄ‚ÇÅ, Œµ_succ, add_comp, neg_neg, neg_zsmul, neg_comp, cochain.zero_v,
    zsmul_comp, comp_zsmul, comp_add, comp_neg, assoc, homological_complex.d_comp_d,
    homological_complex.d_comp_d_assoc, comp_zero, zero_comp, zsmul_zero, neg_zero, add_zero,
    zero_add, add_left_neg],
end

lemma Œ¥_comp {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§} (z‚ÇÅ : cochain F G n‚ÇÅ) (z‚ÇÇ : cochain G K n‚ÇÇ) (h : n‚ÇÅ‚ÇÇ = n‚ÇÅ + n‚ÇÇ)
  (m‚ÇÅ m‚ÇÇ m‚ÇÅ‚ÇÇ : ‚Ñ§) (h‚ÇÅ‚ÇÇ : n‚ÇÅ‚ÇÇ+1 = m‚ÇÅ‚ÇÇ) (h‚ÇÅ : n‚ÇÅ+1 = m‚ÇÅ) (h‚ÇÇ : n‚ÇÇ+1 = m‚ÇÇ) :
Œ¥ n‚ÇÅ‚ÇÇ m‚ÇÅ‚ÇÇ (cochain.comp z‚ÇÅ z‚ÇÇ h) = cochain.comp z‚ÇÅ (Œ¥ n‚ÇÇ m‚ÇÇ z‚ÇÇ) (by linarith) + Œµ n‚ÇÇ ‚Ä¢ cochain.comp (Œ¥ n‚ÇÅ m‚ÇÅ z‚ÇÅ) z‚ÇÇ (by linarith) :=
begin
  substs h‚ÇÅ‚ÇÇ h‚ÇÅ h‚ÇÇ,
  ext,
  have eq : Œµ (n‚ÇÅ‚ÇÇ + 1) = Œµ n‚ÇÇ * Œµ (n‚ÇÅ+1),
  { rw ‚Üê Œµ_add, congr' 1, linarith, },
  simp only [cochain.add_v, cochain.zsmul_v,
    cochain.comp_v z‚ÇÅ (Œ¥ n‚ÇÇ (n‚ÇÇ+1) z‚ÇÇ) (show n‚ÇÅ‚ÇÇ+1=n‚ÇÅ+(n‚ÇÇ+1), by linarith) p _ q rfl (by linarith),
    cochain.comp_v (Œ¥ n‚ÇÅ (n‚ÇÅ+1) z‚ÇÅ) z‚ÇÇ (show n‚ÇÅ‚ÇÇ+1=_, by linarith) p (p+n‚ÇÅ+1) q (by linarith) (by linarith),
    cochain.comp_v z‚ÇÅ z‚ÇÇ h p (p+n‚ÇÅ) (p+n‚ÇÅ‚ÇÇ) rfl (by linarith),
    cochain.comp_v z‚ÇÅ z‚ÇÇ h (p+1) (p+n‚ÇÅ+1) q (by linarith) (by linarith),
    Œ¥_v n‚ÇÅ‚ÇÇ _ rfl (cochain.comp z‚ÇÅ z‚ÇÇ h) p q hpq (p+n‚ÇÅ‚ÇÇ) _ (by linarith) rfl,
    Œ¥_v n‚ÇÅ (n‚ÇÅ+1) rfl z‚ÇÅ p (p+n‚ÇÅ+1) (by linarith) (p+n‚ÇÅ) (p+1) (by linarith) rfl,
    Œ¥_v n‚ÇÇ (n‚ÇÇ+1) rfl z‚ÇÇ (p+n‚ÇÅ) q (by linarith) (p+n‚ÇÅ‚ÇÇ) (p+n‚ÇÅ+1) (by linarith) rfl,
    assoc, comp_add, comp_zsmul, zsmul_add, add_comp, zsmul_comp, smul_smul, eq,
    Œµ_add n‚ÇÇ 1, Œµ_1, mul_neg, mul_one, neg_zsmul, comp_neg, ‚Üê add_assoc],
  suffices : ‚àÄ (a b c : F.X p ‚ü∂ K.X q), a+b=a+(-c)+c+b,
  { apply this, },
  intros a b c,
  abel,
end

@[simp]
lemma Œ¥_comp_of_first_is_zero_cochain {n‚ÇÇ : ‚Ñ§} (z‚ÇÅ : cochain F G 0) (z‚ÇÇ : cochain G K n‚ÇÇ)
  (m‚ÇÇ : ‚Ñ§) (h‚ÇÇ : n‚ÇÇ+1 = m‚ÇÇ) :
Œ¥ n‚ÇÇ m‚ÇÇ (cochain.comp z‚ÇÅ z‚ÇÇ (zero_add n‚ÇÇ).symm) =
  cochain.comp z‚ÇÅ (Œ¥ n‚ÇÇ m‚ÇÇ z‚ÇÇ) (by linarith) + Œµ n‚ÇÇ ‚Ä¢ cochain.comp (Œ¥ 0 1 z‚ÇÅ) z‚ÇÇ (by linarith) :=
Œ¥_comp z‚ÇÅ z‚ÇÇ (zero_add n‚ÇÇ).symm 1 m‚ÇÇ m‚ÇÇ h‚ÇÇ (zero_add 1) h‚ÇÇ

@[simp]
lemma Œ¥_comp_of_second_is_zero_cochain {n‚ÇÅ : ‚Ñ§} (z‚ÇÅ : cochain F G n‚ÇÅ) (z‚ÇÇ : cochain G K 0)
  (m‚ÇÅ : ‚Ñ§) (h‚ÇÅ : n‚ÇÅ+1 = m‚ÇÅ) : Œ¥ n‚ÇÅ m‚ÇÅ (cochain.comp z‚ÇÅ z‚ÇÇ (add_zero n‚ÇÅ).symm) =
  cochain.comp z‚ÇÅ (Œ¥ 0 1 z‚ÇÇ) h‚ÇÅ.symm + cochain.comp (Œ¥ n‚ÇÅ m‚ÇÅ z‚ÇÅ) z‚ÇÇ (add_zero m‚ÇÅ).symm :=
by simp only [Œ¥_comp z‚ÇÅ z‚ÇÇ (add_zero n‚ÇÅ).symm m‚ÇÅ 1 m‚ÇÅ h‚ÇÅ h‚ÇÅ (zero_add 1), Œµ_0, one_zsmul]

end hom_complex

variables (F G)

open hom_complex

def hom_complex : cochain_complex AddCommGroup ‚Ñ§ :=
{ X := Œª i, AddCommGroup.of (cochain F G i),
  d := Œª i j, AddCommGroup.of_hom (Œ¥_hom F G i j),
  shape' := Œª i j hij, by { ext1 z, exact Œ¥_shape i j hij z, },
  d_comp_d' := Œª i j k hij hjk, by { ext1 f, apply Œ¥Œ¥, } }

namespace hom_complex

def cocycle : add_subgroup (cochain F G n) :=
add_monoid_hom.ker ((hom_complex F G).d n (n+1))

namespace cocycle

variables {F G}

lemma mem_iff (hnm : n+1=m) (z : cochain F G n) :
  z ‚àà cocycle F G n ‚Üî Œ¥ n m z = 0 :=
by { subst hnm, refl, }

variable {n}

@[simps]
def mk (z : cochain F G n) (m : ‚Ñ§) (hnm : n+1 = m) (h : Œ¥ n m z = 0) : cocycle F G n :=
‚ü®z, by simpa only [mem_iff n m hnm z] using h‚ü©

@[simp]
lemma Œ¥_eq_zero {n : ‚Ñ§} (z : cocycle F G n) (m : ‚Ñ§) : Œ¥ n m (z : cochain F G n) = 0 :=
begin
  by_cases n+1=m,
  { rw ‚Üê mem_iff n m h,
    exact z.2, },
  { apply Œ¥_shape n m h, }
end

@[simps]
def of_hom (œÜ : F ‚ü∂ G) : cocycle F G 0 := mk (cochain.of_hom œÜ) 1 (zero_add 1)
begin
  ext,
  simp only [Œ¥_v 0 1 (zero_add 1) _ p q hpq p q (by linarith) hpq,
    cochain.of_hom_v, homological_complex.hom.comm, Œµ_1, neg_smul, one_zsmul,
    add_right_neg, cochain.zero_v, zero_add],
end

@[simp]
lemma Œ¥_cochain_of_hom (œÜ : F ‚ü∂ G) : Œ¥ 0 1 (cochain.of_hom œÜ) = 0 :=
by apply Œ¥_eq_zero (of_hom œÜ)

@[simps]
def hom_of (z : cocycle F G 0) : F ‚ü∂ G :=
{ f := Œª i, (z : cochain F G 0).v i i (add_zero i).symm,
  comm' := Œª i j hij, begin
    change i+1=j at hij,
    have hz‚ÇÅ := z.2,
    rw mem_iff 0 1 (zero_add 1) at hz‚ÇÅ,
    simpa only [Œ¥_v 0 1 (zero_add 1) z.1 i j hij.symm i j (by linarith) hij.symm,
      zero_add, Œµ_1, neg_smul, one_zsmul, cochain.zero_v, add_neg_eq_zero]
      using cochain.congr_v hz‚ÇÅ i j hij.symm,
  end, }

@[simp]
lemma hom_of_of_hom_eq_self (œÜ : F ‚ü∂ G) : hom_of (of_hom œÜ) = œÜ :=
by { ext i, simp only [of_hom, hom_of_f, mk_coe, cochain.of_hom_v], }

@[simp]
lemma of_hom_hom_of_eq_self (z : cocycle F G 0) : of_hom (hom_of z) = z :=
begin
  ext,
  simp only [of_hom, mk_coe, cochain.of_hom_v, hom_of_f],
end

@[simp]
lemma cochain_of_hom_hom_of_eq_coe (z : cocycle F G 0) :
  (cochain.of_hom (hom_of z) : cochain F G 0) = (z : cochain F G 0) :=
by simpa only [subtype.ext_iff] using of_hom_hom_of_eq_self z

variables (F G)

@[simps]
def equiv_hom : (F ‚ü∂ G) ‚âÉ+ cocycle F G 0 :=
{ to_fun := of_hom,
  inv_fun := hom_of,
  left_inv := hom_of_of_hom_eq_self,
  right_inv := of_hom_hom_of_eq_self,
  map_add' := Œª œÜ‚ÇÅ œÜ‚ÇÇ, begin
    ext,
    simp only [of_hom, cochain.of_hom, cochain.of_homs, cochain.mk, cochain.v,
      homological_complex.add_f_apply, mk_coe, eq_to_hom_refl, comp_id,
      add_subgroup.coe_add, pi.add_apply],
  end, }

def of_d : cocycle K K 1 :=
cocycle.mk (cochain.of_d K) 2 rfl begin
  ext p q hpq,
  simp only [Œ¥_v 1 2 rfl _ p q hpq _ _ rfl rfl, cochain.of_d_v,
    homological_complex.d_comp_d, smul_zero, add_zero, cochain.zero_v],
end

end cocycle

namespace cochain

variables {F G}

lemma of_hom_injective {f‚ÇÅ f‚ÇÇ : F ‚ü∂ G} (h : of_hom f‚ÇÅ = of_hom f‚ÇÇ) : f‚ÇÅ = f‚ÇÇ :=
begin
  rw [‚Üê cocycle.hom_of_of_hom_eq_self f‚ÇÅ, ‚Üê cocycle.hom_of_of_hom_eq_self f‚ÇÇ],
  congr' 1,
  ext1,
  simpa only [cocycle.of_hom_coe] using h,
end

end cochain

variables {F G}

@[simps]
def equiv_homotopy (œÜ‚ÇÅ œÜ‚ÇÇ : F ‚ü∂ G) :
  homotopy œÜ‚ÇÅ œÜ‚ÇÇ ‚âÉ
    { z : cochain F G (-1) // cochain.of_hom œÜ‚ÇÅ = Œ¥ (-1) 0 z + cochain.of_hom œÜ‚ÇÇ } :=
{ to_fun := Œª ho, begin
    refine ‚ü®cochain.of_homotopy ho, _‚ü©,
    ext,
    have comm := ho.comm p,
    rw [d_next_eq ho.hom rfl, prev_d_eq ho.hom (sub_add_cancel p 1)] at comm,
    rw [cochain.add_v, Œ¥_v (-1) 0 (neg_add_self 1) _ p p (add_zero p).symm _ _ rfl rfl],
    simp only [Œ¥_v (-1) 0 (neg_add_self 1) _ p p (add_zero p).symm _ _ rfl rfl,
      add_left_neg, Œµ_0, one_zsmul, cochain.mk, cochain.of_hom_v, cochain.v,
      cochain.of_homotopy, cochain.of_hom_v],
    dsimp only,
    suffices : ‚àÄ (a b c d : F.X p ‚ü∂ G.X p) (h : a = b+c+d), a=c+b+d,
    { exact this _ _ _ _ comm, },
    { intros a b c d h, rw h, abel, },
  end,
  inv_fun := Œª z,
    { hom := Œª i j, begin
        by_cases j+1=i,
        { exact (z : cochain F G (-1)).v i j (by linarith), },
        { exact 0, },
      end,
      zero' := Œª i j hij, begin
        change ¬¨ j+1 = i at hij,
        rw dif_neg hij,
      end,
      comm := Œª p, begin
        have h‚ÇÅ : p+1 = p+1 := rfl,
        have h‚ÇÇ : p-1+1 = p := by linarith,
        have h‚ÇÅ' : (complex_shape.up ‚Ñ§).rel p (p+1) := h‚ÇÅ,
        have h‚ÇÇ' : (complex_shape.up ‚Ñ§).rel (p-1) p := h‚ÇÇ,
        rw [d_next_eq _ h‚ÇÅ', prev_d_eq _ h‚ÇÇ', dif_pos h‚ÇÅ, dif_pos h‚ÇÇ],
        have hz := cochain.congr_v z.2 p p (add_zero p).symm,
        simp only [cochain.add_v, Œ¥_v (-1) 0 (neg_add_self 1) _ p p (add_zero p).symm _ _ rfl rfl,
          cochain.of_hom_v, add_left_neg, Œµ_0, one_zsmul] at hz,
        suffices : ‚àÄ (a b c d : F.X p ‚ü∂ G.X p) (h : a = b+c+d), a=c+b+d,
        { exact this _ _ _ _ hz, },
        { intros a b c d h, rw h, abel, },
      end, },
  left_inv := Œª ho, begin
    ext i j,
    dsimp,
    split_ifs,
    { refl, },
    { rw ho.zero i j h, },
  end,
  right_inv := Œª z, begin
    ext,
    dsimp [cochain.mk, cochain.v],
    simpa only [dif_pos (show q+1=p, by linarith)],
  end, }

@[simp]
def Œ¥_cochain_of_homotopy {œÜ‚ÇÅ œÜ‚ÇÇ : F ‚ü∂ G} (h : homotopy œÜ‚ÇÅ œÜ‚ÇÇ) :
  Œ¥ (-1) 0 (cochain.of_homotopy h) = cochain.of_hom œÜ‚ÇÅ - cochain.of_hom œÜ‚ÇÇ :=
by rw [((equiv_homotopy _ _) h).2, add_sub_cancel,
  subtype.val_eq_coe, equiv_homotopy_apply_coe]

namespace cochain

variable {n}

def lift_to_kernel' (z : cochain L G n) {i : F ‚ü∂ G} {f : G ‚ü∂ K} (hip : is_termwise_kernel i f)
  (hz : cochain.comp z (of_hom f) (add_zero n).symm = 0) (p q : ‚Ñ§) (hpq : q=p+n):=
kernel_fork.is_limit.lift' (hip.is_limit q) (z.v p q hpq)
(by simpa only [comp_zero_cochain, of_hom_v] using congr_v hz p q hpq)

def lift_to_kernel (z : cochain L G n) {i : F ‚ü∂ G} {f : G ‚ü∂ K} (hip : is_termwise_kernel i f)
  (hz : cochain.comp z (of_hom f) (add_zero n).symm = 0) : cochain L F n :=
cochain.mk (Œª p q hpq, (lift_to_kernel' z hip hz p q hpq).1)

@[simp]
lemma lift_to_kernel_comp (z : cochain L G n) {i : F ‚ü∂ G} {f : G ‚ü∂ K} (hip : is_termwise_kernel i f)
  (hz : cochain.comp z (of_hom f) (add_zero n).symm = 0) :
  cochain.comp (z.lift_to_kernel hip hz) (cochain.of_hom i) (add_zero n).symm = z :=
begin
  ext,
  simpa only [comp_v _ _ (add_zero n).symm p q q hpq (add_zero q).symm,
    of_hom_v] using (lift_to_kernel' z hip hz p q hpq).2,
end

end cochain

namespace cocycle

variable {n}

def lift_to_kernel (z : cocycle L G n) {i : F ‚ü∂ G} {f : G ‚ü∂ K} (hip : is_termwise_kernel i f)
  (hz : cochain.comp (z : cochain L G n) (cochain.of_hom f) (add_zero n).symm = 0) :
  cocycle L F n :=
cocycle.mk (cochain.lift_to_kernel (z : cochain L G n) hip hz) _ rfl
begin
  suffices : Œ¥ n (n + 1) (cochain.comp
    ((z : cochain L G n).lift_to_kernel hip hz) (cochain.of_hom i) (add_zero n).symm) = 0,
  { ext,
    haveI : mono (i.f q) := hip.termwise_mono q,
    simpa only [‚Üê cancel_mono (i.f q), cochain.zero_v, zero_comp,
      Œ¥_comp_of_second_is_zero_cochain, Œ¥_cochain_of_hom,
      cochain.comp_zero, zero_add, cochain.comp_zero_cochain,
      cochain.of_hom_v, cochain.zero_v] using cochain.congr_v this p q hpq, },
  simp only [cochain.lift_to_kernel_comp, Œ¥_eq_zero],
end

def lift_to_kernel_comp (z : cocycle L G n) {i : F ‚ü∂ G} {f : G ‚ü∂ K} (hip : is_termwise_kernel i f)
  (hz : cochain.comp (z : cochain L G n) (cochain.of_hom f) (add_zero n).symm = 0) :
  cochain.comp (lift_to_kernel z hip hz : cochain L F n) (cochain.of_hom i) (add_zero n).symm =
  (z : cochain L G n) := by apply cochain.lift_to_kernel_comp

end cocycle

end hom_complex

end cochain_complex
