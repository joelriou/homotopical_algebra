import for_mathlib.algebra.homology.triangulated
import for_mathlib.category_theory.triangulated.homological_functor_localization
import for_mathlib.category_theory.shift_misc
import for_mathlib.category_theory.localization.composition
import for_mathlib.algebra.homology.cylinder

noncomputable theory

open category_theory category_theory.category category_theory.limits
  category_theory.triangulated category_theory.pretriangulated
open_locale zero_object

section

variables {C Œπ : Type*} [category C]
  (c : complex_shape Œπ)

instance homological_complex.single_additive [decidable_eq Œπ] [preadditive C] [has_zero_object C] (n : Œπ) :
  (homological_complex.single C c n).additive :=
‚ü®Œª X Y f g, by { ext i, dsimp, split_ifs; simp, }‚ü©

instance homotopy_category.homology_functor_additive [abelian C] (n : Œπ) :
  (homotopy_category.homology_functor C c n).additive :=
@quotient.lift_additive _ _ _ _ _ _ _ _ _
    (infer_instance : (homotopy_category.quotient C _).additive) _ _ _

variable (C)

def homotopy_category.comm_shift_quotient [preadditive C] (n : ‚Ñ§) :
  shift_functor (cochain_complex C ‚Ñ§) n ‚ãô
    homotopy_category.quotient _ _ ‚âÖ
  homotopy_category.quotient _ _ ‚ãô shift_functor _ n :=
quotient.comm_shift _ _

instance [preadditive C]: full (homotopy_category.quotient C c) :=
by { dsimp [homotopy_category.quotient], apply_instance, }

namespace cochain_complex

section

variables [preadditive C] (K : cochain_complex C ‚Ñ§) (n k m : ‚Ñ§) (h : k + n = m)

include h

variable (C)

def shift_eval_prev : (shift_functor _ n) ‚ãô homological_complex.eval C _ ((complex_shape.up ‚Ñ§).prev k) ‚âÖ
  homological_complex.eval C _ ((complex_shape.up ‚Ñ§).prev m) :=
preadditive.mul_iso ((-1 : units ‚Ñ§)^n) (eq_to_iso (congr_arg (homological_complex.eval _ _)
  (show (complex_shape.up ‚Ñ§).prev k + n = (complex_shape.up ‚Ñ§).prev m, by { simp, linarith, })))
def shift_eval : (shift_functor _ n) ‚ãô homological_complex.eval C (complex_shape.up ‚Ñ§) k ‚âÖ
  homological_complex.eval C (complex_shape.up ‚Ñ§) m :=
eq_to_iso (congr_arg (homological_complex.eval _ _)  h)
def shift_eval_next : (shift_functor _ n) ‚ãô homological_complex.eval C _ ((complex_shape.up ‚Ñ§).next k) ‚âÖ
  homological_complex.eval C _ ((complex_shape.up ‚Ñ§).next m) :=
preadditive.mul_iso ((-1 : units ‚Ñ§)^n) (eq_to_iso (congr_arg (homological_complex.eval _ _)
  (show (complex_shape.up ‚Ñ§).next k + n = (complex_shape.up ‚Ñ§).next m, by { simp, linarith, })))

variable {C}

lemma shift_eval_prev_hom_app_comp_d_to :
  (shift_eval_prev C n k m h).hom.app K ‚â´ K.d_to m =
    K‚ü¶n‚üß.d_to k ‚â´ (shift_eval C n k m h).hom.app K :=
begin
  subst h,
  simp only [K‚ü¶n‚üß.d_to_eq (show (k-1)+1 = k, by linarith),
    K.d_to_eq (show (k-1+n)+1 = k+n, by linarith), shift_functor_obj_d'],
  dsimp [homological_complex.X_prev_iso, shift_eval_prev, shift_eval],
  simp only [add_zero, zero_add, neg_zero, nat_trans.app_zsmul, eq_to_hom_app,
    linear.smul_comp_assoc, eq_to_hom_trans, linear.smul_comp, linear.comp_smul, assoc,
    eq_to_hom_trans_assoc],
  erw comp_id,
  refl,
end

lemma shift_eval_hom_app_comp_d_from :
(shift_eval C n k m h).hom.app K ‚â´ K.d_from m =
  K‚ü¶n‚üß.d_from k ‚â´ (shift_eval_next C n k m h).hom.app K :=
begin
  subst h,
  simp only [K‚ü¶n‚üß.d_from_eq rfl, shift_functor_obj_d',
    K.d_from_eq (show k+n+1=k+1+n, by linarith)],
  dsimp [homological_complex.X_next_iso, shift_eval_next, shift_eval, hom_complex.Œµ],
  simpa only [id_comp, linear.smul_comp, nat_trans.app_zsmul, eq_to_hom_app,
    linear.comp_smul, assoc, eq_to_hom_trans, smul_smul,
    ‚Üê units.coe_mul, ‚Üê mul_zpow, neg_mul, mul_neg, neg_neg,
    int.units_mul_self, one_zpow, units.coe_one, one_zsmul],
end

variable (C)

def shift_short_complex_functor_iso :
  shift_functor _ n ‚ãô homological_complex.short_complex_functor C (complex_shape.up ‚Ñ§) k ‚âÖ
    homological_complex.short_complex_functor C (complex_shape.up ‚Ñ§) m :=
nat_iso.of_components
  (Œª K, short_complex.mk_iso ((shift_eval_prev C _ _ _ h).app K) ((shift_eval C _ _ _ h).app K)
    (((shift_eval_next C _ _ _ h).app K)) (shift_eval_prev_hom_app_comp_d_to _ _ _ _ _)
    (shift_eval_hom_app_comp_d_from _ _ _ _ _))
  (Œª K L œÜ, begin
    ext1,
    { exact (shift_eval_prev C _ _ _ h).hom.naturality œÜ, },
    { exact (shift_eval C _ _ _ h).hom.naturality œÜ, },
    { exact (shift_eval_next C _ _ _ h).hom.naturality œÜ, },
  end)

end

def shift_homology_functor_iso [abelian C] (n k m : ‚Ñ§) (h : k + n = m) :
  shift_functor _ n ‚ãô homology_functor C (complex_shape.up ‚Ñ§) k ‚âÖ
    homology_functor C _ m :=
(functor.associator _ _ _).symm ‚â™‚â´ iso_whisker_right (shift_short_complex_functor_iso C _ _ _ h) _

end cochain_complex

def homotopy_category.shift_homology_functor_iso [abelian C] (n k m : ‚Ñ§) (h : k + n = m):
  shift_functor _ n ‚ãô homotopy_category.homology_functor C (complex_shape.up ‚Ñ§) k ‚âÖ
    homotopy_category.homology_functor C _ m :=
quotient.lift_nat_iso _ _ ((functor.associator _ _ _).symm ‚â™‚â´
  iso_whisker_right (quotient.comm_shift _ _).symm _ ‚â™‚â´
  functor.associator _ _ _ ‚â™‚â´
  iso_whisker_left _ (homotopy_category.homology_factors _ _ _).symm ‚â™‚â´
  cochain_complex.shift_homology_functor_iso C _ _ _ h ‚â™‚â´
  (homotopy_category.homology_factors _ _ _).symm)

end

variables (C : Type*) [category C] [abelian C]

section

open cochain_complex

lemma homology_functor_comp_Œπ_mapping_cone {K L : cochain_complex C ‚Ñ§} (œÜ : K ‚ü∂ L) (n : ‚Ñ§) :
  (homology_functor C (complex_shape.up ‚Ñ§) n).map (œÜ ‚â´ Œπ_mapping_cone œÜ) = 0 :=
begin
  rw homotopy_category.homology_functor_map_factors,
  have hœÜ : homotopy_category.induced_triangle (mapping_cone_triangle œÜ) ‚àà dist_triang _,
  { rw homotopy_category.triangle_distinguished_iff,
    exact ‚ü®_, _, _, ‚ü®iso.refl _‚ü©‚ü©, },
  simpa only [functor.map_comp, functor.map_zero]
    using (homotopy_category.homology_functor _ _ n).congr_map
      ((triangle.comp_eq_zero.of_distinguished _ hœÜ).zero‚ÇÅ‚ÇÇ),
end

variable {C}

lemma homology_functor_is_homological_aux {K L : cochain_complex C ‚Ñ§} (œÜ : K ‚ü∂ L) (n : ‚Ñ§) :
  (short_complex.mk ((homology_functor C (complex_shape.up ‚Ñ§) n).map œÜ)
    ((homology_functor C (complex_shape.up ‚Ñ§) n).map (Œπ_mapping_cone œÜ))
    (by rw [‚Üê functor.map_comp, homology_functor_comp_Œπ_mapping_cone])).exact :=
begin
  rw short_complex.exact_iff_pseudo_exact',
  intros A‚ÇÄ Œ≥‚ÇÇ hŒ≥‚ÇÇ,
  dsimp at Œ≥‚ÇÇ hŒ≥‚ÇÇ,
  /- the next three operations could be a specialised lemma -/
  obtain ‚ü®A‚ÇÅ, œÄ‚ÇÅ, hœÄ‚ÇÅ, z‚ÇÇ, hz‚ÇÇ‚ü© := abelian.pseudo_surjective_of_epi'
    (short_complex.homology_œÄ _) Œ≥‚ÇÇ,
  have hz‚ÇÇ' : ‚àÉ z‚ÇÇ' hz‚ÇÇ', z‚ÇÇ = short_complex.lift_cycles _ z‚ÇÇ' hz‚ÇÇ' :=
    ‚ü®z‚ÇÇ ‚â´ short_complex.cycles_i _,
      by simp only [assoc, short_complex.cycles_i_g, comp_zero],
      by simp only [‚Üê cancel_mono ((homological_complex.short_complex_functor C
        (complex_shape.up ‚Ñ§) n).obj L).cycles_i, short_complex.lift_cycles_i]‚ü©,
  obtain ‚ü®z‚ÇÇ, hz‚ÇÇ', rfl‚ü© := hz‚ÇÇ',
  replace hŒ≥‚ÇÇ := œÄ‚ÇÅ ‚â´= hŒ≥‚ÇÇ,
  rw [reassoc_of hz‚ÇÇ, comp_zero, short_complex.homology_œÄ_naturality, ‚Üê assoc,
    short_complex.comp_homology_œÄ_eq_zero_iff] at hŒ≥‚ÇÇ,
  obtain ‚ü®A‚ÇÇ, œÄ‚ÇÇ, hœÄ‚ÇÇ, c‚ÇÅ, hc‚ÇÅ‚ü© := hŒ≥‚ÇÇ,
  dsimp at c‚ÇÅ hc‚ÇÅ,
  replace hc‚ÇÅ := hc‚ÇÅ =‚â´ (short_complex.cycles_i _),
  simp only [assoc, homological_complex.short_complex_functor_map_œÑ‚ÇÇ,
    short_complex.lift_cycles_comp_cycles_map, short_complex.lift_cycles_i,
    short_complex.to_cycles_i, homological_complex.short_complex_functor_obj_f,
    @to_mapping_cone_ext_iff _ _ _ _ _ _ œÜ _ _ _ _ ((complex_shape.up _).next n) (by simp),
    mapping_cone_d_fst ((complex_shape.up _).prev n) n ((complex_shape.up _).next n) (by simp) (by simp),
    mapping_cone_d_snd ((complex_shape.up _).prev n) n (by simp),
    Œπ_mapping_cone, mapping_cone_inr_fst, comp_zero, preadditive.comp_neg,
    zero_eq_neg, mapping_cone_inr_snd, preadditive.comp_add] at hc‚ÇÅ,
  dsimp at hc‚ÇÅ,
  rw comp_id at hc‚ÇÅ,
  obtain ‚ü®hc‚ÇÅ, hc‚ÇÅ'‚ü© := hc‚ÇÅ,
  rw ‚Üê assoc at hc‚ÇÅ,
  haveI := hœÄ‚ÇÅ,
  haveI := hœÄ‚ÇÇ,
  refine ‚ü®A‚ÇÇ, œÄ‚ÇÇ ‚â´ œÄ‚ÇÅ, epi_comp _ _,
    ((homological_complex.short_complex_functor C
      (complex_shape.up ‚Ñ§) n).obj K).lift_cycles _ hc‚ÇÅ ‚â´ short_complex.homology_œÄ _, _‚ü©,
  dsimp,
  simp only [assoc, hz‚ÇÇ, short_complex.comp_lift_cycles_assoc,
    homological_complex.short_complex_functor_map_œÑ‚ÇÇ, short_complex.homology_œÄ_naturality,
    short_complex.lift_cycles_comp_cycles_map_assoc,
    short_complex.lift_cycles_comp_homology_œÄ_eq_iff],
  exact ‚ü®A‚ÇÇ, ùüô A‚ÇÇ, infer_instance,
    c‚ÇÅ ‚â´ (mapping_cone_snd œÜ).v ((complex_shape.up ‚Ñ§).prev n)
      ((complex_shape.up ‚Ñ§).prev n) (add_zero _).symm, by simpa only [id_comp, hc‚ÇÅ', assoc]‚ü©,
end

end

variable (C)

namespace homotopy_category

instance homology_functor_is_homological (n : ‚Ñ§):
  (homology_functor C (complex_shape.up ‚Ñ§) n).is_homological :=
functor.is_homological.mk' _ (Œª T hT, begin
  rw triangle_distinguished_iff at hT,
  obtain ‚ü®K, L, œÜ, ‚ü®e‚ü©‚ü© := hT,
  refine ‚ü®_, ‚ü®_, _, _, ‚ü®mapping_cone_induced_triangle_iso œÜ‚ü©‚ü©, e,
    homology_functor_is_homological_aux œÜ n‚ü©,
end)

def acyclic : triangulated.subcategory (homotopy_category C (complex_shape.up ‚Ñ§)) :=
(homology_functor C (complex_shape.up ‚Ñ§) 0).kernel_of_is_homological

instance acyclic_saturated : (acyclic C).saturated :=
by { dsimp only [acyclic], apply_instance, }

lemma mem_acyclic_W_iff {K L : homotopy_category C (complex_shape.up ‚Ñ§)} (œÜ : K ‚ü∂ L) :
  (acyclic C).W œÜ ‚Üî ‚àÄ (n : ‚Ñ§), is_iso ((homology_functor _ _ n).map œÜ) :=
begin
  dsimp only [acyclic],
  rw functor.kernel_of_is_homological_W,
  simpa only [‚Üê Œª n, nat_iso.is_iso_map_iff (shift_homology_functor_iso C _ _ _ (zero_add n)) œÜ],
end

lemma homology_functor_is_inverted_by (n : ‚Ñ§) :
  (acyclic C).W.is_inverted_by (homology_functor C (complex_shape.up ‚Ñ§) n) :=
begin
  intros K L œÜ hœÜ,
  rw mem_acyclic_W_iff at hœÜ,
  exact hœÜ n,
end

variable {C}

lemma map_quotient_W_iff {K L : cochain_complex C ‚Ñ§} (œÜ : K ‚ü∂ L) :
  (acyclic C).W ((quotient _ _).map œÜ) ‚Üî quasi_iso œÜ :=
begin
  simp only [mem_acyclic_W_iff, ‚Üê homology_functor_map_factors],
  split,
  { intro h,
    exact ‚ü®h‚ü©, },
  { intro h,
    exact h.is_iso, }
end

end homotopy_category

section

variables (D : Type*) [category D] [has_zero_morphisms D] [category_with_homology D]
  {Œπ : Type*} (c : complex_shape Œπ)

def quasi_isomorphisms :
  morphism_property (homological_complex D c) :=
Œª K L œÜ, ‚àÄ (i : Œπ), is_iso (homology_map œÜ i)

variables {D c}

lemma mem_quasi_isomorphisms_iff {K L : homological_complex D c} (œÜ : K ‚ü∂ L) :
  quasi_isomorphisms D c œÜ ‚Üî quasi_iso œÜ :=
‚ü®Œª h, ‚ü®h‚ü©, Œª h, h.1‚ü©

end

@[derive category, derive preadditive, derive has_zero_object, derive has_finite_products,
  derive has_finite_coproducts]
def derived_category := (homotopy_category.acyclic C).W.localization

instance : inhabited (derived_category C) := ‚ü®0‚ü©

namespace derived_category

variable {C}

instance : has_shift (derived_category C) ‚Ñ§ :=
by { dsimp [derived_category], apply_instance, }

instance shift_functor_additive (n : ‚Ñ§) :
  (shift_functor (derived_category C) n).additive :=
by { dsimp [derived_category], apply_instance, }

instance : pretriangulated (derived_category C) :=
by { dsimp [derived_category], apply_instance, }

instance : is_triangulated (derived_category C) :=
by { dsimp [derived_category], apply_instance, }

def Qh : triangulated_functor (homotopy_category C (complex_shape.up ‚Ñ§)) (derived_category C) :=
pretriangulated.localization_functor _ _ _

instance Qh_additive : (Qh : triangulated_functor _ (derived_category C)).to_functor.additive :=
by { dsimp [Qh, localization_functor], apply_instance, }

instance Qh_is_localization_W :
  Qh.to_functor.is_localization (homotopy_category.acyclic C).W :=
begin
  change (morphism_property.Q _).is_localization _,
  apply_instance,
end

instance : ess_surj (Qh.to_functor : _ ‚•§ derived_category C) :=
localization.ess_surj _ (homotopy_category.acyclic C).W

def Q : cochain_complex C ‚Ñ§ ‚•§ derived_category C :=
homotopy_category.quotient _ _ ‚ãô Qh.to_functor

instance Q_additive : (Q : _ ‚•§ derived_category C).additive :=
by { dsimp [Q], apply_instance, }

variable (C)

def comm_shift_Q_one :
  shift_functor (cochain_complex C ‚Ñ§) (1 : ‚Ñ§) ‚ãô
    (Q : cochain_complex _ _ ‚•§ derived_category C) ‚âÖ
    Q ‚ãô shift_functor (derived_category C) (1 : ‚Ñ§) :=
functor.comm_shift_comp (homotopy_category.quotient_triangulated_functor_struct.comm_shift) Qh.comm_shift

variable {C}

lemma is_iso_Q_map_iff {K L : cochain_complex C ‚Ñ§} (œÜ : K ‚ü∂ L) :
  is_iso (Q.map œÜ) ‚Üî quasi_iso œÜ :=
(subcategory.is_iso_map_iff _ _).trans (homotopy_category.map_quotient_W_iff œÜ)

instance {K L : cochain_complex C ‚Ñ§} (œÜ : K ‚ü∂ L) [quasi_iso œÜ] :
  is_iso (Q.map œÜ) :=
by { rw is_iso_Q_map_iff, apply_instance, }

variable (C)

lemma Q_inverts_quasi_isomorphisms : (quasi_isomorphisms C _).is_inverted_by Q :=
Œª K L œÜ hœÜ, begin
  rw mem_quasi_isomorphisms_iff at hœÜ,
  haveI := hœÜ,
  apply_instance,
end

lemma homotopy_equivalences_subset_quasi_isomorphisms :
  cochain_complex.homotopy_equivalences C ‚äÜ quasi_isomorphisms C (complex_shape.up ‚Ñ§) :=
begin
  rintros K L _ ‚ü®h, rfl‚ü©,
  simpa only [mem_quasi_isomorphisms_iff] using h.to_quasi_iso,
end

instance Q_is_localization : Q.is_localization (quasi_isomorphisms C _) :=
localization.comp (homotopy_category.quotient _ _) (Qh.to_functor)
    (cochain_complex.homotopy_equivalences C) (homotopy_category.acyclic C).W
    (quasi_isomorphisms C _) (Q_inverts_quasi_isomorphisms C)
    (homotopy_equivalences_subset_quasi_isomorphisms C)
(begin
  rintros ‚ü®K‚ü© ‚ü®L‚ü© œÜ hœÜ,
  have hf : ‚àÉ (f : K ‚ü∂ L), (homotopy_category.quotient _ _).map f = œÜ :=
    ‚ü®_, (homotopy_category.quotient C (complex_shape.up ‚Ñ§)).image_preimage œÜ‚ü©,
  obtain ‚ü®f, rfl‚ü© := hf,
  refine ‚ü®_, _, f, _, ‚ü®iso.refl _‚ü©‚ü©,
  simpa only [mem_quasi_isomorphisms_iff, ‚Üê homotopy_category.map_quotient_W_iff] using hœÜ,
end)

instance : ess_surj (Q : _ ‚•§ derived_category C) :=
localization.ess_surj _ (quasi_isomorphisms C _)

variable {C}

section

variables {K L : cochain_complex C ‚Ñ§}
  (œÜ : K ‚ü∂ L)

def mapping_cone := Q.obj (cochain_complex.mapping_cone œÜ)

def Œπ_mapping_cone : Q.obj L ‚ü∂ mapping_cone œÜ :=
Q.map (cochain_complex.Œπ_mapping_cone œÜ)

def mapping_cone_Œ¥ : mapping_cone œÜ ‚ü∂ (Q.obj K)‚ü¶(1 : ‚Ñ§)‚üß :=
  Q.map (cochain_complex.mapping_cone_Œ¥ œÜ) ‚â´ (comm_shift_Q_one C).hom.app K

def mapping_cone_triangle : triangle (derived_category C) :=
triangle.mk (Q.map œÜ) (Œπ_mapping_cone œÜ) (mapping_cone_Œ¥ œÜ)

lemma Qh_map_mapping_cone_triangle_iso :
  (Qh.map_triangle.obj (homotopy_category.mapping_cone_triangle' œÜ) ‚âÖ
    mapping_cone_triangle œÜ) :=
begin -- needs cleaning up...
  refine triangle.mk_iso _ _ (iso.refl _) (iso.refl _) (iso.refl _) _ _ _,
  { tidy, },
  { tidy, },
  { dsimp [mapping_cone_triangle, mapping_cone_Œ¥,
      homotopy_category.mapping_cone_triangle',
      cochain_complex.mapping_cone_Œ¥',
      comm_shift_Q_one, functor.comm_shift_comp],
    simp only [category_theory.functor.map_id, comp_id, id_comp],
    congr' 1,
    erw id_comp,
    symmetry,
    convert id_comp _,
    convert category_theory.functor.map_id _ _, },
end

end

def mem_dist_triang_iff' (T : triangle (derived_category C)) :
  (T ‚àà dist_triang (derived_category C)) ‚Üî
    ‚àÉ (K L : cochain_complex C ‚Ñ§) (œÜ : K ‚ü∂ L),
      nonempty (T ‚âÖ
        Qh.map_triangle.obj (homotopy_category.mapping_cone_triangle' œÜ)) :=
begin
  split,
  { rintro ‚ü®Th, e, ‚ü®K, L, œÜ, ‚ü®e'‚ü©‚ü©‚ü©,
    exact ‚ü®K, L, œÜ, ‚ü®e ‚â™‚â´ Qh.map_triangle.map_iso e'‚ü©‚ü©, },
  { rintro ‚ü®K, L, œÜ, ‚ü®e‚ü©‚ü©,
    exact ‚ü®_, e, ‚ü®K, L, œÜ, ‚ü®iso.refl _‚ü©‚ü©‚ü©, },
end

def mem_dist_triang_iff (T : triangle (derived_category C)) :
  (T ‚àà dist_triang (derived_category C)) ‚Üî
    ‚àÉ (K L : cochain_complex C ‚Ñ§) (œÜ : K ‚ü∂ L),
      nonempty (T ‚âÖ mapping_cone_triangle œÜ) :=
begin
  rw mem_dist_triang_iff',
  split,
  { rintro ‚ü®K, L, œÜ, ‚ü®e‚ü©‚ü©,
    exact ‚ü®K, L, œÜ, ‚ü®e ‚â™‚â´ Qh_map_mapping_cone_triangle_iso _‚ü©‚ü©, },
  { rintro ‚ü®K, L, œÜ, ‚ü®e‚ü©‚ü©,
    exact ‚ü®K, L, œÜ, ‚ü®e ‚â™‚â´ (Qh_map_mapping_cone_triangle_iso _).symm‚ü©‚ü©, },
end

instance is_iso_Q_map_from_mapping_cone_of_ses
  {S : short_complex (cochain_complex C ‚Ñ§)}
  (ex : S.short_exact) :
  quasi_iso (cochain_complex.from_mapping_cone_of_ses ex) :=
cochain_complex.from_mapping_cone_of_ses_quasi_iso ex

def triangle_of_ses_Œ¥ {S : short_complex (cochain_complex C ‚Ñ§)}
  (ex : S.short_exact) : Q.obj S.X‚ÇÉ ‚ü∂ (Q.obj S.X‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß :=
inv (Q.map (cochain_complex.from_mapping_cone_of_ses ex)) ‚â´ (mapping_cone_triangle S.f).mor‚ÇÉ

@[simps]
def triangle_of_ses {S : short_complex (cochain_complex C ‚Ñ§)}
  (ex : S.short_exact) : triangle (derived_category C) :=
triangle.mk (Q.map S.f) (Q.map S.g) (triangle_of_ses_Œ¥ ex)

lemma triangle_of_ses_dist {S : short_complex (cochain_complex C ‚Ñ§)}
  (ex : S.short_exact) : triangle_of_ses ex ‚àà dist_triang (derived_category C) :=
begin
  rw mem_dist_triang_iff,
  refine ‚ü®_, _, S.f, ‚ü®_‚ü©‚ü©,
  refine triangle.mk_iso _ _ (iso.refl _) (iso.refl _)
    (as_iso (Q.map (cochain_complex.from_mapping_cone_of_ses ex))).symm (by tidy) _ _,
  { dsimp [triangle_of_ses, mapping_cone_triangle, Œπ_mapping_cone],
    simp only [‚Üê cancel_mono (Q.map (cochain_complex.from_mapping_cone_of_ses ex)),
      id_comp, assoc, is_iso.inv_hom_id, comp_id, ‚Üê Q.map_comp,
      cochain_complex.Œπ_mapping_cone_comp_from_mapping_cone_of_ses], },
  { dsimp [triangle_of_ses, triangle_of_ses_Œ¥],
    simp only [category_theory.functor.map_id, comp_id], },
end

lemma left_factorisation {K L : cochain_complex C ‚Ñ§} (œÜ : Q.obj K ‚ü∂ Q.obj L) :
  ‚àÉ (L' : cochain_complex C ‚Ñ§) (f : K ‚ü∂ L') (s : L ‚ü∂ L') (hs : quasi_iso s),
    œÜ = Q.map f ‚â´ (by { haveI := hs, exact inv (Q.map s), }) :=
begin
  obtain ‚ü®‚ü®‚ü®L'‚ü©, f, s, hs‚ü© , hz‚ü© :=
    left_calculus_of_fractions.L_map_fac Qh.to_functor (homotopy_category.acyclic C).W œÜ,
  refine ‚ü®_, (homotopy_category.quotient _ _).preimage f,
    (homotopy_category.quotient _ _).preimage s, _, _‚ü©,
  { simpa only [‚Üê homotopy_category.map_quotient_W_iff, functor.image_preimage] using hs, },
  { dsimp [Q],
    simpa only [functor.image_preimage] using hz, },
end

lemma right_factorisation {K L : cochain_complex C ‚Ñ§} (œÜ : Q.obj K ‚ü∂ Q.obj L) :
  ‚àÉ (K' : cochain_complex C ‚Ñ§) (s : K' ‚ü∂ K) (f : K' ‚ü∂ L) (hs : quasi_iso s),
    œÜ = (by { haveI := hs, exact inv (Q.map s), }) ‚â´ Q.map f :=
begin
  obtain ‚ü®‚ü®‚ü®L'‚ü©, s, f, hs‚ü© , hz‚ü© :=
    right_calculus_of_fractions.L_map_fac Qh.to_functor (homotopy_category.acyclic C).W œÜ,
  refine ‚ü®_, (homotopy_category.quotient _ _).preimage s,
    (homotopy_category.quotient _ _).preimage f, _, _‚ü©,
  { simpa only [‚Üê homotopy_category.map_quotient_W_iff, functor.image_preimage] using hs, },
  { dsimp [Q],
    simpa only [functor.image_preimage] using hz, },
end

variable (C)

def homology_functor (n : ‚Ñ§) : derived_category C ‚•§ C :=
localization.lift (homotopy_category.homology_functor C (complex_shape.up ‚Ñ§) n)
  (homotopy_category.homology_functor_is_inverted_by C n) Qh.to_functor

instance (n : ‚Ñ§) : localization.lifting Qh.to_functor (homotopy_category.acyclic C).W
  (homotopy_category.homology_functor C (complex_shape.up ‚Ñ§) n) (homology_functor C n) :=
localization.lifting_lift _ _ _

def homology_functor_factors_Qh (n : ‚Ñ§) :
  Qh.to_functor ‚ãô homology_functor C n ‚âÖ
    homotopy_category.homology_functor C (complex_shape.up ‚Ñ§) n :=
localization.lifting.iso _ (homotopy_category.acyclic C).W _ _

def homology_functor_factors (n : ‚Ñ§) :
  Q ‚ãô homology_functor C n ‚âÖ _root_.homology_functor C (complex_shape.up ‚Ñ§) n :=
functor.associator _ _ _ ‚â™‚â´ iso_whisker_left _ ((homology_functor_factors_Qh C n)) ‚â™‚â´
  homotopy_category.homology_factors C _ n

instance homology_functor_preserves_zero_morphisms (n : ‚Ñ§) :
  (homology_functor C n).preserves_zero_morphisms :=
functor.is_homological.localization_lift_preserves_zero_morphisms _ _ _

instance homology_functor_is_homological (n : ‚Ñ§) :
  (homology_functor C n).is_homological :=
functor.is_homological.localization_lift_is_homological _ _ _

variable {C}

lemma is_iso_iff_is_iso_homology {K L : derived_category C} (œÜ : K ‚ü∂ L) :
  is_iso œÜ ‚Üî ‚àÄ (n : ‚Ñ§), is_iso ((homology_functor C n).map œÜ) :=
begin
  split,
  { introI,
    exact Œª n, infer_instance, },
  { suffices : ‚àÄ ‚¶ÉK' L' : cochain_complex C ‚Ñ§‚¶Ñ (œÜ' : Q.obj K' ‚ü∂ Q.obj L')
      (hœÜ' : ‚àÄ (n : ‚Ñ§), is_iso ((homology_functor C n).map œÜ')), is_iso œÜ',
    { introI,
      let œà := (Q.obj_obj_preimage_iso K).hom ‚â´ œÜ ‚â´ (Q.obj_obj_preimage_iso L).inv,
      have eq : œÜ = (Q.obj_obj_preimage_iso K).inv ‚â´ œà ‚â´ (Q.obj_obj_preimage_iso L).hom,
      { simp only [assoc, iso.inv_hom_id, comp_id, iso.inv_hom_id_assoc], },
      rw eq,
      haveI : is_iso œà := this œà (Œª n, begin
        dsimp only [œà],
        simp only [functor.map_comp],
        apply_instance,
      end),
      apply_instance, },
    intros K' L' œÜ' hœÜ',
    obtain ‚ü®L', f, s, hs, eq‚ü© := left_factorisation œÜ',
    haveI : is_iso (Q.map f),
    { simp only [eq, functor.map_comp] at hœÜ',
      haveI := hœÜ',
      haveI : ‚àÄ (n : ‚Ñ§), is_iso ((homology_functor C n).map (Q.map f)),
      { intro n,
        exact is_iso.of_is_iso_comp_right _ ((homology_functor C n).map (inv (Q.map s))), },
      haveI : quasi_iso f,
      { rw ‚Üê mem_quasi_isomorphisms_iff,
        intro n,
        refine (nat_iso.is_iso_map_iff (homology_functor_factors C n) f).1 _,
        dsimp,
        apply_instance, },
      apply_instance, },
    rw eq,
    apply_instance, },
end

abbreviation homology (K : derived_category C) (n : ‚Ñ§) := (homology_functor C n).obj K

end derived_category
