import for_mathlib.algebra.homology.trunc
import for_mathlib.category_theory.localization.shift

noncomputable theory

open category_theory category_theory.category category_theory.limits
open_locale zero_object

namespace category_theory

instance ess_surj_comp {C‚ÇÅ C‚ÇÇ C‚ÇÉ : Type*} [category C‚ÇÅ] [category C‚ÇÇ] [category C‚ÇÉ] (F : C‚ÇÅ ‚•§ C‚ÇÇ)
  [ess_surj F] (G : C‚ÇÇ ‚•§ C‚ÇÉ) [ess_surj G] : ess_surj (F ‚ãô G) :=
‚ü®Œª Z, ‚ü®_, ‚ü®G.map_iso (F.obj_obj_preimage_iso (G.obj_preimage Z)) ‚â™‚â´ G.obj_obj_preimage_iso Z‚ü©‚ü©‚ü©

instance ess_surj_Q {C : Type*} [category C] (W : morphism_property C) :
  ess_surj (W.Q) :=
localization.ess_surj W.Q W

lemma full_of_comp_ess_surj {C D E : Type*} [category C] [category D] [category E]
  (F : C ‚•§ D) (G : D ‚•§ E) [ess_surj F]
  (h : ‚àÄ (X Y : C), function.surjective (Œª (f : F.obj X ‚ü∂ F.obj Y), G.map f)) : full G :=
G.full_of_surjective (Œª K‚ÇÅ K‚ÇÇ f, begin
  let K'‚ÇÅ := F.obj_preimage K‚ÇÅ,
  let K'‚ÇÇ := F.obj_preimage K‚ÇÇ,
  let e‚ÇÅ : F.obj K'‚ÇÅ ‚âÖ K‚ÇÅ := F.obj_obj_preimage_iso K‚ÇÅ,
  let e‚ÇÇ : F.obj K'‚ÇÇ ‚âÖ K‚ÇÇ := F.obj_obj_preimage_iso K‚ÇÇ,
  obtain ‚ü®f', hf'‚ü© := h K'‚ÇÅ K'‚ÇÇ (G.map e‚ÇÅ.hom ‚â´ f ‚â´ G.map e‚ÇÇ.inv),
  dsimp at hf',
  refine ‚ü®e‚ÇÅ.inv ‚â´ f' ‚â´ e‚ÇÇ.hom, _‚ü©,
  simp only [G.map_comp, hf', assoc],
  rw [‚Üê G.map_comp, e‚ÇÇ.inv_hom_id, G.map_id, comp_id, ‚Üê G.map_comp_assoc, e‚ÇÅ.inv_hom_id, G.map_id,
    id_comp],
end)

lemma faithful_of_comp_ess_surj {C D E : Type*} [category C] [category D] [category E]
  (F : C ‚•§ D) (G : D ‚•§ E) [ess_surj F]
  (h : ‚àÄ (X Y : C), function.injective (Œª (f : F.obj X ‚ü∂ F.obj Y), G.map f)) : faithful G :=
‚ü®Œª K‚ÇÅ K‚ÇÇ f‚ÇÅ f‚ÇÇ hf, begin
  let K'‚ÇÅ := F.obj_preimage K‚ÇÅ,
  let K'‚ÇÇ := F.obj_preimage K‚ÇÇ,
  let e‚ÇÅ : F.obj K'‚ÇÅ ‚âÖ K‚ÇÅ := F.obj_obj_preimage_iso K‚ÇÅ,
  let e‚ÇÇ : F.obj K'‚ÇÇ ‚âÖ K‚ÇÇ := F.obj_obj_preimage_iso K‚ÇÇ,
  rw [‚Üê cancel_mono e‚ÇÇ.inv, ‚Üê cancel_epi e‚ÇÅ.hom],
  apply h,
  dsimp,
  simp only [hf, functor.map_comp],
end‚ü©

end category_theory

variables {C : Type*} [category C] [abelian C]

namespace derived_category

instance zero_is_le (n : ‚Ñ§) : (0 : derived_category C).is_le n :=
‚ü®Œª i hi, is_zero.of_iso (is_zero_zero _)
  (derived_category.homology_functor C i).map_zero_object‚ü©

instance zero_is_ge (n : ‚Ñ§) : (0 : derived_category C).is_ge n :=
‚ü®Œª i hi, is_zero.of_iso (is_zero_zero _)
  (derived_category.homology_functor C i).map_zero_object‚ü©

def is_plus (K : derived_category C) : Prop := ‚àÉ (n : ‚Ñ§), K.is_ge n

def is_minus (K : derived_category C) : Prop := ‚àÉ (n : ‚Ñ§), K.is_le n

variable (C)
open category_theory.triangulated

instance plus_is_triangulated_subcategory :
  is_triangulated_subcategory (Œª (K : derived_category C), K.is_plus) :=
{ zero := ‚ü®0, infer_instance‚ü©,
  shift := begin
    rintros K k ‚ü®n, hn‚ü©,
    haveI := hn,
    exact ‚ü®n-k, shift_is_ge K n k (n-k) (by linarith)‚ü©,
  end,
  ext‚ÇÇ := begin
    rintros T hT ‚ü®n‚ÇÅ, hn‚ÇÅ‚ü© ‚ü®n‚ÇÉ, hn‚ÇÉ‚ü©,
    exact ‚ü®min n‚ÇÅ n‚ÇÉ,
      ‚ü®Œª n hn, short_complex.exact.is_zero_of_both_zeros (homology_sequence.ex‚ÇÇ hT n)
        (is_zero.eq_of_src (hn‚ÇÅ.is_zero' _ (lt_of_lt_of_le hn (min_le_left n‚ÇÅ n‚ÇÉ))) _ _)
        (is_zero.eq_of_tgt (hn‚ÇÉ.is_zero' _ (lt_of_lt_of_le hn (min_le_right n‚ÇÅ n‚ÇÉ))) _ _)‚ü©‚ü©,
  end, }

abbreviation plus := full_subcategory (Œª (K : derived_category C), K.is_plus)
abbreviation minus := full_subcategory (Œª (K : derived_category C), K.is_minus)

namespace plus

instance : pretriangulated (plus C) := infer_instance

variable {C}

def mk (K : derived_category C) (n : ‚Ñ§) [hn : K.is_ge n] :
  derived_category.plus C :=
‚ü®K, n, hn‚ü©

def mk' (K : derived_category C) (hK : K.is_plus) :
  derived_category.plus C :=
‚ü®K, hK‚ü©

abbreviation Œπ : plus C ‚•§ derived_category C :=
full_subcategory_inclusion _

end plus

end derived_category

namespace cochain_complex

def is_plus (K : cochain_complex C ‚Ñ§) : Prop :=
  ‚àÉ (n : ‚Ñ§), K.is_strictly_ge n

def is_minus (K : cochain_complex C ‚Ñ§) : Prop :=
  ‚àÉ (n : ‚Ñ§), K.is_strictly_le n

lemma is_plus.Q {K : cochain_complex C ‚Ñ§} (h : K.is_plus) :
  (derived_category.Q.obj K).is_plus :=
begin
  obtain ‚ü®n, hn‚ü© := h,
  haveI := hn,
  exact ‚ü®n, infer_instance‚ü©,
end

instance zero_is_strictly_ge (n : ‚Ñ§) : is_strictly_ge (0 : cochain_complex C ‚Ñ§) n :=
‚ü®Œª k hk, is_zero.of_iso (is_zero_zero _)
  (homological_complex.eval C (complex_shape.up ‚Ñ§) k).map_zero_object‚ü©

instance zero_is_strictly_le (n : ‚Ñ§) : is_strictly_le (0 : cochain_complex C ‚Ñ§) n :=
‚ü®Œª k hk, is_zero.of_iso (is_zero_zero _)
  (homological_complex.eval C (complex_shape.up ‚Ñ§) k).map_zero_object‚ü©

lemma mapping_cone_is_strictly_le {K L : cochain_complex C ‚Ñ§} (f : K ‚ü∂ L) (n k l : ‚Ñ§)
  [K.is_strictly_le k] [L.is_strictly_le l] (hk : k ‚â§ n+1) (hl : l ‚â§ n) :
  (mapping_cone f).is_strictly_le n :=
‚ü®Œª i hi, begin
  simp only [mapping_cone.X_is_zero_iff],
  split,
  { exact is_strictly_le.is_zero K k (i+1) (by linarith), },
  { exact is_strictly_le.is_zero L l i (by linarith), },
end‚ü©

lemma mapping_cone_is_strictly_ge {K L : cochain_complex C ‚Ñ§} (f : K ‚ü∂ L) (n k l : ‚Ñ§)
  [K.is_strictly_ge k] [L.is_strictly_ge l] (hk : n+1 ‚â§ k) (hl : n ‚â§ l) :
  (mapping_cone f).is_strictly_ge n :=
‚ü®Œª i hi, begin
  simp only [mapping_cone.X_is_zero_iff],
  split,
  { exact is_strictly_ge.is_zero K k (i+1) (by linarith), },
  { exact is_strictly_ge.is_zero L l i (by linarith), },
end‚ü©

lemma mapping_cone_is_plus {K L : cochain_complex C ‚Ñ§} (f : K ‚ü∂ L)
  (hK : K.is_plus) (hL : L.is_plus) : (mapping_cone f).is_plus :=
begin
  obtain ‚ü®k, hK‚ü© := hK,
  obtain ‚ü®l, hL‚ü© := hL,
  haveI := hK,
  haveI := hL,
  exact ‚ü®min (k-1) l, mapping_cone_is_strictly_ge f _ k l
    (by linarith [min_le_left (k-1) l]) (min_le_right _ _)‚ü©,
end

variable (C)
abbreviation plus :=
full_subcategory (Œª (K : cochain_complex C ‚Ñ§), cochain_complex.is_plus K)
abbreviation minus :=
full_subcategory (Œª (K : cochain_complex C ‚Ñ§), cochain_complex.is_minus K)

namespace plus

variable {C}

abbreviation Œπ : plus C ‚•§ cochain_complex C ‚Ñ§ :=
full_subcategory_inclusion _

variable (C)

def shift_functor (k : ‚Ñ§) : plus C ‚•§ plus C :=
full_subcategory.lift _ (Œπ ‚ãô shift_functor _ k) (Œª K, begin
  obtain ‚ü®n, hn‚ü© := K.2,
  haveI := hn,
  refine ‚ü®n-k, _‚ü©,
  dsimp,
  exact shift_is_strict_ge K.1 n k (n-k) (by linarith),
end)

instance : has_shift (plus C) ‚Ñ§ :=
has_shift_of_fully_faithful Œπ (shift_functor C)
  (Œª n, full_subcategory.lift_comp_inclusion _ _ _)

end plus

namespace minus

variable {C}

abbreviation Œπ : minus C ‚•§ cochain_complex C ‚Ñ§ :=
full_subcategory_inclusion _

end minus

end cochain_complex

open category_theory.triangulated

namespace homotopy_category

variable (C)

def is_plus : set (homotopy_category C (complex_shape.up ‚Ñ§)) :=
Œª K, cochain_complex.is_plus K.1

abbreviation plus :=
full_subcategory (homotopy_category.is_plus C)

instance plus_is_triangulated_subcategory' :
  category_theory.triangulated.is_triangulated_subcategory' (is_plus C) :=
{ zero := begin
    refine ‚ü®‚ü®0‚ü©, _, ‚ü®0, infer_instance‚ü©‚ü©,
    rw is_zero.iff_id_eq_zero,
    change (homotopy_category.quotient _ _).map (ùüô 0) = 0,
    simp only [id_zero, functor.map_zero],
  end,
  shift := begin
    rintro ‚ü®X‚ü© n hX,
    exact ((cochain_complex.plus.shift_functor C n).obj ‚ü®X, hX‚ü©).2,
  end,
  distinguished_cocone_triangle' := begin
    rintro ‚ü®X‚ü© ‚ü®Y‚ü© hX hY ‚ü®f : X ‚ü∂ Y‚ü©,
    refine ‚ü®_, _, _, _, ‚ü®_, _, f, ‚ü®iso.refl _‚ü©‚ü©‚ü©,
    exact cochain_complex.mapping_cone_is_plus f hX hY,
  end, }

namespace plus

variable {C}

abbreviation Œπ : plus C ‚•§ homotopy_category C (complex_shape.up ‚Ñ§) :=
full_subcategory_inclusion _

variable (C)

abbreviation homology_functor (n : ‚Ñ§) : plus C ‚•§ C :=
Œπ ‚ãô homotopy_category.homology_functor C (complex_shape.up ‚Ñ§) n

def shift_homology_functor_iso (n k m : ‚Ñ§) (h : k + n = m):
  shift_functor _ n ‚ãô homology_functor C k ‚âÖ homology_functor C m :=
(functor.associator _ _ _).symm ‚â™‚â´ iso_whisker_right (Œπ.comm_shift_iso n) _ ‚â™‚â´
  functor.associator _ _ _ ‚â™‚â´
  iso_whisker_left Œπ (homotopy_category.shift_homology_functor_iso C n k m h)

abbreviation acyclic : set (plus C) :=
(homology_functor C 0).kernel_of_is_homological

variable {C}

lemma mem_acyclic_W_iff {K L : plus C} (œÜ : K ‚ü∂ L) :
  (subcategory.W (acyclic C)) œÜ ‚Üî ‚àÄ (n : ‚Ñ§), is_iso ((homology_functor C n).map œÜ) :=
by simpa only [functor.kernel_of_is_homological_W,
  ‚Üê Œª n, nat_iso.is_iso_map_iff (shift_homology_functor_iso C _ _ _ (zero_add n)) œÜ]

variable (C)

lemma homology_functor_is_inverted_by (n : ‚Ñ§) :
  (subcategory.W (acyclic C)).is_inverted_by (homology_functor C n) :=
Œª K L f hf, begin
  rw mem_acyclic_W_iff f at hf,
  exact hf n,
end

variable {C}

lemma mem_W_iff_Œπ_map_mem {K L : homotopy_category.plus C} (f : K ‚ü∂ L) :
  subcategory.W (homotopy_category.acyclic C) (homotopy_category.plus.Œπ.map f) ‚Üî
  subcategory.W (homotopy_category.plus.acyclic C) f :=
by simpa only [homotopy_category.mem_acyclic_W_iff, homotopy_category.plus.mem_acyclic_W_iff]

variable (C)

def single_functor (n : ‚Ñ§) : C ‚•§ homotopy_category.plus C :=
full_subcategory.lift _ (homological_complex.single C (complex_shape.up ‚Ñ§) n ‚ãô
  homotopy_category.quotient _ _) (Œª X, ‚ü®n, by { dsimp, apply_instance, }‚ü©)

def single_functor_factors (n : ‚Ñ§) :
  single_functor C n ‚ãô homotopy_category.plus.Œπ ‚âÖ
  (homological_complex.single C (complex_shape.up ‚Ñ§) n ‚ãô homotopy_category.quotient _ _) :=
full_subcategory.lift_comp_inclusion _ _ _

instance single_functor_additive (n : ‚Ñ§) : (single_functor C n).additive :=
‚ü®Œª K L f‚ÇÅ f‚ÇÇ, homotopy_category.plus.Œπ.map_injective begin
  dsimp only [single_functor],
  simp only [full_subcategory.lift_map, functor.map_add],
end‚ü©

end plus

end homotopy_category

namespace derived_category

namespace plus

abbreviation Qh : homotopy_category.plus C ‚•§ derived_category.plus C :=
full_subcategory.lift _ (homotopy_category.plus.Œπ ‚ãô derived_category.Qh)
begin
  rintro ‚ü®‚ü®K‚ü©, n, hn‚ü©,
  refine ‚ü®n, (_ : (Q.obj K).is_ge n)‚ü©,
  rw ‚Üê cochain_complex.is_ge_iff_Q_obj_is_ge,
  dsimp at hn,
  haveI := hn,
  exact cochain_complex.is_ge_of_is_strictly_ge K n,
end

variable (C)

def Qh_comp_Œπ_iso : (Qh : _ ‚•§ derived_category.plus C) ‚ãô derived_category.plus.Œπ ‚âÖ
  homotopy_category.plus.Œπ ‚ãô derived_category.Qh :=
full_subcategory.lift_comp_inclusion _ _ _

namespace Qh_is_localization

lemma inverts :
  (subcategory.W (homotopy_category.plus.acyclic C)).is_inverted_by Qh :=
Œª K L f hf, begin
  haveI : is_iso (derived_category.plus.Œπ.map (Qh.map f)),
  { erw [is_iso_map_iff_of_nat_iso (Qh_comp_Œπ_iso C) f],
    dsimp only [functor.comp_map],
    apply localization.inverts derived_category.Qh (subcategory.W (homotopy_category.acyclic C)),
    simpa only [homotopy_category.plus.mem_W_iff_Œπ_map_mem] using hf, },
  exact is_iso_of_reflects_iso (Qh.map f) Œπ,
end

abbreviation L := localization.lift _ (inverts C) (subcategory.W (homotopy_category.plus.acyclic C)).Q

def L_iso : (subcategory.W (homotopy_category.plus.acyclic C)).Q ‚ãô L C ‚âÖ Qh :=
localization.lifting.iso (subcategory.W (homotopy_category.plus.acyclic C)).Q
  (subcategory.W (homotopy_category.plus.acyclic C)) _ _

lemma full_L : full (L C) :=
begin
  let F := (subcategory.W (homotopy_category.plus.acyclic C)).Q,
  haveI := localization.ess_surj F
    (subcategory.W (homotopy_category.plus.acyclic C)), -- should be an instance
  have hF : (subcategory.W (homotopy_category.plus.acyclic C)).is_inverted_by F :=
    localization.inverts _ _,
  apply category_theory.full_of_comp_ess_surj F,
  rintros ‚ü®‚ü®K‚ÇÅ : cochain_complex C ‚Ñ§‚ü©, hK‚ÇÅ‚ü© ‚ü®‚ü®K‚ÇÇ : cochain_complex C ‚Ñ§‚ü©, hK‚ÇÇ‚ü© f,
  have hK‚ÇÅ' := hK‚ÇÅ,
  have hK‚ÇÇ' := hK‚ÇÇ,
  obtain ‚ü®n‚ÇÅ, hn‚ÇÅ‚ü© := hK‚ÇÅ',
  obtain ‚ü®n‚ÇÇ, hn‚ÇÇ‚ü© := hK‚ÇÇ',
  let n := min n‚ÇÅ n‚ÇÇ,
  haveI : K‚ÇÅ.is_strictly_ge n,
  { haveI := hn‚ÇÅ, exact cochain_complex.is_strictly_ge_of_le _ _ _ (min_le_left n‚ÇÅ n‚ÇÇ), },
  haveI : K‚ÇÇ.is_strictly_ge n,
  { haveI := hn‚ÇÇ, exact cochain_complex.is_strictly_ge_of_le _ _ _ (min_le_right n‚ÇÅ n‚ÇÇ), },
  let f' : Qh.obj ‚ü®‚ü®K‚ÇÅ‚ü©, hK‚ÇÅ‚ü© ‚ü∂ Qh.obj ‚ü®‚ü®K‚ÇÇ‚ü©, hK‚ÇÇ‚ü© :=
    (L_iso C).inv.app _ ‚â´ f ‚â´ (L_iso C).hom.app _,
  let f'' : derived_category.Q.obj K‚ÇÅ ‚ü∂ derived_category.Q.obj K‚ÇÇ := f',
  obtain ‚ü®K‚ÇÉ, hK‚ÇÉ', s, g, hs, fac‚ü© := right_factorisation_of_is_strictly_ge f'' n,
  replace fac := (Q.map s) ‚â´= fac,
  rw is_iso.hom_inv_id_assoc at fac,
  haveI := hK‚ÇÉ',
  haveI := hs,
  have hK‚ÇÉ : homotopy_category.is_plus C ‚ü®K‚ÇÉ‚ü© := ‚ü®n, hK‚ÇÉ'‚ü©,
  let s' : (‚ü®_, hK‚ÇÉ‚ü© : homotopy_category.plus C) ‚ü∂ ‚ü®_, hK‚ÇÅ‚ü© := (homotopy_category.quotient _ _).map s,
  let g' : (‚ü®_, hK‚ÇÉ‚ü© : homotopy_category.plus C) ‚ü∂ ‚ü®_, hK‚ÇÇ‚ü© := (homotopy_category.quotient _ _).map g,
  haveI : is_iso (F.map s') := hF _ begin
    rw ‚Üê homotopy_category.plus.mem_W_iff_Œπ_map_mem,
    erw homotopy_category.map_quotient_W_iff,
    exact hs,
  end,
  refine ‚ü®inv (F.map s') ‚â´ F.map g', _‚ü©,
  dsimp only,
  erw [functor.map_comp, ‚Üê cancel_epi ((L C).map (F.map s')), ‚Üê functor.map_comp_assoc,
    is_iso.hom_inv_id, (L C).map_id, id_comp, ‚Üê cancel_epi ((L_iso C).inv.app ‚ü®_, hK‚ÇÉ‚ü©),
    ‚Üê (L_iso C).inv.naturality g', ‚Üê fac],
  dsimp only [f'', f'],
  erw [assoc, ‚Üê (L_iso C).inv.naturality_assoc s'],
  dsimp,
  conv_lhs { congr, skip, erw assoc, congr, skip, erw assoc, },
  erw [(L_iso C).hom_inv_id_app, comp_id],
  refl,
end

instance faithful_L : faithful (L C) :=
begin
  let F := (subcategory.W (homotopy_category.plus.acyclic C)).Q,
  haveI := localization.ess_surj F
    (subcategory.W (homotopy_category.plus.acyclic C)), -- should be an instance
  have hF : (subcategory.W (homotopy_category.plus.acyclic C)).is_inverted_by F :=
    localization.inverts _ _,
  apply category_theory.faithful_of_comp_ess_surj F,
  rintros ‚ü®‚ü®K‚ÇÅ : cochain_complex C ‚Ñ§‚ü©, hK‚ÇÅ‚ü© ‚ü®‚ü®K‚ÇÇ : cochain_complex C ‚Ñ§‚ü©, hK‚ÇÇ‚ü©,
  suffices : ‚àÄ (f : F.obj {obj := {as := K‚ÇÅ}, property := hK‚ÇÅ} ‚ü∂ F.obj {obj := {as := K‚ÇÇ}, property := hK‚ÇÇ})
    (hf : (L C).map f = 0), f = 0,
  { intros f‚ÇÅ f‚ÇÇ hf,
    rw [‚Üê sub_eq_zero],
    apply this,
    simpa only [functor.map_sub, sub_eq_zero] using hf, },
  intros f hf,
  obtain ‚ü®‚ü®‚ü®‚ü®K‚ÇÅ'‚ü©, hK‚ÇÅ'‚ü©, s, g, hs‚ü©, hz‚ü© := right_calculus_of_fractions.L_map_fac F
    (subcategory.W (homotopy_category.plus.acyclic C)) f,
  dsimp [right_calculus_of_fractions.map_roof] at hz,
  simp only [hz, preadditive.is_iso.comp_left_eq_zero],
  obtain ‚ü®g, rfl‚ü© := (homotopy_category.quotient _ _).map_surjective g,
  let g' : (‚ü®‚ü®K‚ÇÅ'‚ü©, hK‚ÇÅ'‚ü© : homotopy_category.plus C) ‚ü∂ ‚ü®‚ü®K‚ÇÇ‚ü©, hK‚ÇÇ‚ü© :=
    (homotopy_category.quotient _ _).map g,
  have hg : derived_category.Qh.map g' = derived_category.Qh.map 0,
  { rw [hz, functor.map_comp, preadditive.is_iso.comp_left_eq_zero] at hf,
    simpa only [functor.comp_map, functor.map_zero, hf, zero_comp,
      preadditive.is_iso.comp_left_eq_zero] using ((L_iso C).hom.naturality g').symm, },
  rw left_calculus_of_fractions.L_map_eq_iff derived_category.Qh
    (subcategory.W (homotopy_category.acyclic C)) at hg,
  obtain ‚ü®‚ü®K‚ÇÇ' : cochain_complex C ‚Ñ§‚ü©, s, hs, fac‚ü© := hg,
  obtain ‚ü®s, rfl‚ü© := (homotopy_category.quotient _ _).map_surjective s,
  have hK‚ÇÇ' := hK‚ÇÇ,
  obtain ‚ü®n, hn : K‚ÇÇ.is_strictly_ge n‚ü© := hK‚ÇÇ',
  rw zero_comp at fac,
  let t : (‚ü®‚ü®K‚ÇÇ‚ü©, hK‚ÇÇ‚ü© : homotopy_category.plus C) ‚ü∂ ‚ü®‚ü®K‚ÇÇ'.trunc_ge n‚ü©, ‚ü®n, infer_instance‚ü©‚ü© :=
    (homotopy_category.quotient _ _).map (s ‚â´ cochain_complex.trunc_ge.œÄ K‚ÇÇ' n),
  haveI : is_iso (F.map t),
  { apply hF,
    erw [‚Üê homotopy_category.plus.mem_W_iff_Œπ_map_mem, homotopy_category.map_quotient_W_iff],
    haveI : quasi_iso s,
    { simpa only [‚Üê homotopy_category.map_quotient_W_iff] using hs, },
    haveI : quasi_iso (cochain_complex.trunc_ge.œÄ K‚ÇÇ' n),
    { rw [cochain_complex.quasi_iso_trunc_ge_œÄ_iff, ‚Üê cochain_complex.is_ge_iff_of_quasi_iso s],
      apply_instance, },
    apply_instance, },
  simp only [‚Üê cancel_mono (F.map t), zero_comp, ‚Üê F.map_comp, ‚Üê F.map_zero],
  congr' 1,
  dsimp [t],
  erw [functor.map_comp, ‚Üê assoc, fac, zero_comp],
end

instance : ess_surj (L C) :=
‚ü®begin
  rintro ‚ü®K, hK‚ü©,
  let K' := Q.obj_preimage K,
  let e : Q.obj K' ‚âÖ K := Q.obj_obj_preimage_iso K,
  obtain ‚ü®n, hn‚ü© := hK,
  haveI := hn,
  haveI := (cochain_complex.is_ge_iff_Q_obj_is_ge K' n).2 (derived_category.is_ge.of_iso e.symm n),
  exact ‚ü®(morphism_property.Q _).obj ‚ü®‚ü®K'.trunc_ge n‚ü©, ‚ü®n, infer_instance‚ü©‚ü©,
    ‚ü®derived_category.plus.Œπ.preimage_iso (Œπ.map_iso ((L_iso C).app _) ‚â™‚â´
      (as_iso (Q.map (cochain_complex.trunc_ge.œÄ K' n))).symm ‚â™‚â´ e)‚ü©‚ü©,
end‚ü©

lemma is_equivalence : is_equivalence (L C) :=
begin
  haveI := full_L C,
  exact equivalence.of_fully_faithfully_ess_surj _
end

instance : ess_surj (Qh : _ ‚•§ derived_category.plus C) :=
ess_surj.of_iso (L_iso C)

end Qh_is_localization

instance Qh_is_localization :
  (Qh : _ ‚•§ derived_category.plus C).is_localization
  (triangulated.subcategory.W (homotopy_category.plus.acyclic C)) :=
begin
  haveI := Qh_is_localization.is_equivalence C,
  refine functor.is_localization.of_equivalence
    (triangulated.subcategory.W (homotopy_category.plus.acyclic C)).Q
    (triangulated.subcategory.W (homotopy_category.plus.acyclic C)) Qh
    (Qh_is_localization.L C).as_equivalence _,
  dsimp only [functor.as_equivalence],
  exact localization.lifting.iso _ (subcategory.W (homotopy_category.plus.acyclic C)) _ _,
end

abbreviation single_functor (n : ‚Ñ§) : C ‚•§ derived_category.plus C :=
homotopy_category.plus.single_functor C n ‚ãô derived_category.plus.Qh

def homology_functor (n : ‚Ñ§) : derived_category.plus C ‚•§ C :=
derived_category.plus.Œπ ‚ãô derived_category.homology_functor C n

instance homology_functor_additive (n : ‚Ñ§) : (homology_functor C n).additive :=
by { dsimp only [homology_functor], apply_instance, }

instance homology_functor_is_homological (n : ‚Ñ§) : (homology_functor C n).is_homological :=
by { dsimp only [homology_functor], apply_instance, }

variable {C}

def triangle_of_ses {S : short_complex (cochain_complex C ‚Ñ§)} (ex : S.short_exact)
  (h‚ÇÅ : S.X‚ÇÅ.is_plus) (h‚ÇÇ : S.X‚ÇÇ.is_plus) (h‚ÇÉ : S.X‚ÇÉ.is_plus) :
    pretriangulated.triangle (derived_category.plus C) :=
pretriangulated.full_subcategory_lift_triangle _ (derived_category.triangle_of_ses ex)
  h‚ÇÅ.Q h‚ÇÇ.Q h‚ÇÉ.Q

lemma triangle_of_ses_dist {S : short_complex (cochain_complex C ‚Ñ§)} (ex : S.short_exact)
  (h‚ÇÅ : S.X‚ÇÅ.is_plus) (h‚ÇÇ : S.X‚ÇÇ.is_plus) (h‚ÇÉ : S.X‚ÇÉ.is_plus) :
  triangle_of_ses ex h‚ÇÅ h‚ÇÇ h‚ÇÉ ‚àà dist_triang (derived_category.plus C) :=
begin
  change (full_subcategory_inclusion _).map_triangle.obj (triangle_of_ses ex h‚ÇÅ h‚ÇÇ h‚ÇÉ)
    ‚àà dist_triang (derived_category C),
  refine pretriangulated.isomorphic_distinguished _ (derived_category.triangle_of_ses_dist ex) _
    (pretriangulated.full_subcategory_lift_triangle_iso derived_category.is_plus
    (derived_category.triangle_of_ses ex) _ _ _),
end

end plus

end derived_category
