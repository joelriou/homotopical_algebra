import for_mathlib.algebra.homology.trunc

noncomputable theory

open category_theory category_theory.category category_theory.limits
open_locale zero_object

variables {C : Type*} [category C] [abelian C]

namespace derived_category

instance zero_is_le (n : ‚Ñ§) : (0 : derived_category C).is_le n :=
‚ü®Œª i hi, is_zero.of_iso (is_zero_zero _)
  (derived_category.homology_functor C i).map_zero_object‚ü©

instance zero_is_ge (n : ‚Ñ§) : (0 : derived_category C).is_ge n :=
‚ü®Œª i hi, is_zero.of_iso (is_zero_zero _)
  (derived_category.homology_functor C i).map_zero_object‚ü©

def is_plus (K : derived_category C) : Prop := ‚àÉ (n : ‚Ñ§), K.is_ge n

variable (C)
open category_theory.triangulated

instance plus_is_triangulated_subcategory :
  is_triangulated_subcategory (Œª (K : derived_category C), K.is_plus) :=
{ zero := ‚ü®0, infer_instance‚ü©,
  shift := begin
    rintros K k ‚ü®n, hn‚ü©,
    haveI := hn,
    exact ‚ü®n-k, shift_is_ge K n k (n-k) (by linarith)‚ü©,
  end,
  ext‚ÇÇ := begin
    rintros T hT ‚ü®n‚ÇÅ, hn‚ÇÅ‚ü© ‚ü®n‚ÇÉ, hn‚ÇÉ‚ü©,
    exact ‚ü®min n‚ÇÅ n‚ÇÉ,
      ‚ü®Œª n hn, short_complex.exact.is_zero_of_both_zeros (homology_sequence.ex‚ÇÇ hT n)
        (is_zero.eq_of_src (hn‚ÇÅ.is_zero' _ (lt_of_lt_of_le hn (min_le_left n‚ÇÅ n‚ÇÉ))) _ _)
        (is_zero.eq_of_tgt (hn‚ÇÉ.is_zero' _ (lt_of_lt_of_le hn (min_le_right n‚ÇÅ n‚ÇÉ))) _ _)‚ü©‚ü©,
  end, }

abbreviation plus := full_subcategory (Œª (K : derived_category C), K.is_plus)

namespace plus

instance : pretriangulated (plus C) := infer_instance

def mk (K : derived_category C) (n : ‚Ñ§) [hn : K.is_ge n] :
  derived_category.plus C :=
‚ü®K, n, hn‚ü©

variable {C}

def Œπ : plus C ‚•§ derived_category C :=
full_subcategory_inclusion _

end plus

end derived_category

namespace cochain_complex

def is_plus (K : cochain_complex C ‚Ñ§) : Prop :=
  ‚àÉ (n : ‚Ñ§), K.is_strictly_ge n

instance zero_is_strictly_ge (n : ‚Ñ§) : is_strictly_ge (0 : cochain_complex C ‚Ñ§) n :=
‚ü®Œª k hk, is_zero.of_iso (is_zero_zero _)
  (homological_complex.eval C (complex_shape.up ‚Ñ§) k).map_zero_object‚ü©

instance zero_is_strictly_le (n : ‚Ñ§) : is_strictly_le (0 : cochain_complex C ‚Ñ§) n :=
‚ü®Œª k hk, is_zero.of_iso (is_zero_zero _)
  (homological_complex.eval C (complex_shape.up ‚Ñ§) k).map_zero_object‚ü©

lemma mapping_cone_is_strictly_le {K L : cochain_complex C ‚Ñ§} (f : K ‚ü∂ L) (n k l : ‚Ñ§)
  [K.is_strictly_le k] [L.is_strictly_le l] (hk : k ‚â§ n+1) (hl : l ‚â§ n) :
  (mapping_cone f).is_strictly_le n :=
‚ü®Œª i hi, begin
  simp only [mapping_cone.X_is_zero_iff],
  split,
  { exact is_strictly_le.is_zero K k (i+1) (by linarith), },
  { exact is_strictly_le.is_zero L l i (by linarith), },
end‚ü©

lemma mapping_cone_is_strictly_ge {K L : cochain_complex C ‚Ñ§} (f : K ‚ü∂ L) (n k l : ‚Ñ§)
  [K.is_strictly_ge k] [L.is_strictly_ge l] (hk : n+1 ‚â§ k) (hl : n ‚â§ l) :
  (mapping_cone f).is_strictly_ge n :=
‚ü®Œª i hi, begin
  simp only [mapping_cone.X_is_zero_iff],
  split,
  { exact is_strictly_ge.is_zero K k (i+1) (by linarith), },
  { exact is_strictly_ge.is_zero L l i (by linarith), },
end‚ü©

lemma mapping_cone_is_plus {K L : cochain_complex C ‚Ñ§} (f : K ‚ü∂ L)
  (hK : K.is_plus) (hL : L.is_plus) : (mapping_cone f).is_plus :=
begin
  obtain ‚ü®k, hK‚ü© := hK,
  obtain ‚ü®l, hL‚ü© := hL,
  haveI := hK,
  haveI := hL,
  exact ‚ü®min (k-1) l, mapping_cone_is_strictly_ge f _ k l
    (by linarith [min_le_left (k-1) l]) (min_le_right _ _)‚ü©,
end

variable (C)
abbreviation plus :=
full_subcategory (Œª (K : cochain_complex C ‚Ñ§), cochain_complex.is_plus K)

namespace plus

variable {C}

abbreviation Œπ : plus C ‚•§ cochain_complex C ‚Ñ§ :=
full_subcategory_inclusion _

variable (C)

def shift_functor (k : ‚Ñ§) : plus C ‚•§ plus C :=
full_subcategory.lift _ (Œπ ‚ãô shift_functor _ k) (Œª K, begin
  obtain ‚ü®n, hn‚ü© := K.2,
  haveI := hn,
  refine ‚ü®n-k, _‚ü©,
  dsimp,
  exact shift_is_strict_ge K.1 n k (n-k) (by linarith),
end)

instance : has_shift (plus C) ‚Ñ§ :=
has_shift_of_fully_faithful Œπ (shift_functor C)
  (Œª n, full_subcategory.lift_comp_inclusion _ _ _)

end plus

end cochain_complex

open category_theory.triangulated

namespace homotopy_category

variable (C)

def is_plus : set (homotopy_category C (complex_shape.up ‚Ñ§)) :=
Œª K, cochain_complex.is_plus K.1

abbreviation plus :=
full_subcategory (homotopy_category.is_plus C)

instance plus_is_triangulated_subcategory' :
  category_theory.triangulated.is_triangulated_subcategory' (is_plus C) :=
{ zero := begin
    refine ‚ü®‚ü®0‚ü©, _, ‚ü®0, infer_instance‚ü©‚ü©,
    rw is_zero.iff_id_eq_zero,
    change (homotopy_category.quotient _ _).map (ùüô 0) = 0,
    simp only [id_zero, functor.map_zero],
  end,
  shift := begin
    rintro ‚ü®X‚ü© n hX,
    exact ((cochain_complex.plus.shift_functor C n).obj ‚ü®X, hX‚ü©).2,
  end,
  distinguished_cocone_triangle' := begin
    rintro ‚ü®X‚ü© ‚ü®Y‚ü© hX hY ‚ü®f : X ‚ü∂ Y‚ü©,
    refine ‚ü®_, _, _, _, ‚ü®_, _, f, ‚ü®iso.refl _‚ü©‚ü©‚ü©,
    exact cochain_complex.mapping_cone_is_plus f hX hY,
  end, }

namespace plus

variable {C}

abbreviation Œπ : plus C ‚•§ homotopy_category C (complex_shape.up ‚Ñ§) :=
full_subcategory_inclusion _

variable (C)

def homology_functor (n : ‚Ñ§) : plus C ‚•§ C :=
Œπ ‚ãô homotopy_category.homology_functor C (complex_shape.up ‚Ñ§) n

def quasi_isomorphisms : morphism_property (plus C) :=
  Œª K L œÜ, ‚àÄ (n : ‚Ñ§), is_iso ((homology_functor C n).map œÜ)

end plus

end homotopy_category

namespace derived_category

namespace plus

def Qh : homotopy_category.plus C ‚•§ derived_category.plus C :=
full_subcategory.lift _ (homotopy_category.plus.Œπ ‚ãô Qh)
begin
  rintro ‚ü®‚ü®K‚ü©, n, hn‚ü©,
  refine ‚ü®n, (_ : (Q.obj K).is_ge n)‚ü©,
  rw ‚Üê cochain_complex.is_ge_iff_Q_obj_is_ge,
  dsimp at hn,
  haveI := hn,
  exact cochain_complex.is_ge_of_is_strictly_ge K n,
end

end plus

end derived_category
