--import algebra.category.Module.abelian
--import algebra.category.Module.subobject
import algebra.homology.short_complex.homology
import algebra.homology.short_complex.preadditive
import algebra.homology.short_complex.abelian
import linear_algebra.quotient
import algebra.category.Group.abelian

noncomputable theory

open category_theory category_theory.category AddCommGroup category_theory.limits

universes u

instance : category_with_homology (AddCommGroup.{u}) := infer_instance

lemma AddCommGroup.is_zero_iff (M : AddCommGroup.{u}) : is_zero M ‚Üî ‚àÄ (x : M), x = 0 :=
begin
  rw is_zero.iff_id_eq_zero,
  split,
  { intros h x,
    change (ùüô M : M ‚Üí M) x = 0,
    simp only [h, AddCommGroup.zero_apply], },
  { intro h,
    ext x,
    exact h x, },
end

namespace category_theory

namespace short_complex

variables (S : short_complex (AddCommGroup.{u}))

lemma AddCommGroup_image_le_kernel : add_monoid_hom.range S.f ‚â§ add_monoid_hom.ker S.g :=
begin
  rintros x‚ÇÇ ‚ü®x‚ÇÅ, h‚ü©,
  simp only [add_monoid_hom.mem_ker, ‚Üê h, ‚Üê comp_apply, S.zero, add_monoid_hom.zero_apply],
end

def AddCommGroup_f' : S.X‚ÇÅ ‚ü∂ of (add_monoid_hom.ker S.g) :=
add_monoid_hom.cod_restrict S.f _ (Œª x, S.AddCommGroup_image_le_kernel (by simp))

def AddCommGroup_homology := of ((add_monoid_hom.ker S.g) ‚ß∏ add_monoid_hom.range S.AddCommGroup_f')

def AddCommGroup_homology_œÄ' : of (add_monoid_hom.ker S.g) ‚ü∂ S.AddCommGroup_homology :=
quotient_add_group.mk' (add_monoid_hom.range S.AddCommGroup_f')

@[simp, reassoc, elementwise]
lemma AddCommGroup_f'_comp_homology_œÄ' : S.AddCommGroup_f' ‚â´ S.AddCommGroup_homology_œÄ' = 0 :=
begin
  ext,
  dsimp [AddCommGroup_f', AddCommGroup_homology_œÄ'],
  simp only [comp_apply, quotient_add_group.mk'_apply, quotient_add_group.eq_zero_iff,
    add_monoid_hom.mem_range, exists_apply_eq_apply],
end

namespace AddCommGroup_left_homology_data

def i : AddCommGroup.of (add_monoid_hom.ker S.g) ‚ü∂ S.X‚ÇÇ :=
(add_monoid_hom.ker S.g).subtype

lemma wi : i S ‚â´ S.g = 0 := by { ext x‚ÇÇ, exact x‚ÇÇ.2, }

@[simps]
def _root_.AddCommGroup.kernel_cone {X Y : AddCommGroup.{u}} (f : X ‚ü∂ Y) :
  kernel_fork f := @kernel_fork.of_Œπ _ _ _ _ _ f (AddCommGroup.of _) (add_monoid_hom.ker f).subtype
    (by tidy)

def _root_.AddCommGroup.kernel_is_limit {X Y : AddCommGroup.{u}} (f : X ‚ü∂ Y) :
  is_limit (AddCommGroup.kernel_cone f) :=
limits.kernel_fork.is_limit.of_Œπ _ _
  (Œª A x hx,
    { to_fun := Œª a, ‚ü®x a, by rw [add_monoid_hom.mem_ker, ‚Üê comp_apply, hx, zero_apply]‚ü©,
      map_zero' := by tidy,
      map_add' := by tidy, })
  (Œª A x hx, begin
    ext,
    refl,
  end)
  (Œª A x hx b hb, begin
    ext x,
    convert congr_arg (Œª (œÜ : A ‚Üí+ X), œÜ x) hb,
  end)

def hi : is_limit (kernel_fork.of_Œπ (i S) (wi S)) := AddCommGroup.kernel_is_limit S.g

lemma f'_eq_AddCommGroup_f' : (hi S).lift (kernel_fork.of_Œπ S.f S.zero) = S.AddCommGroup_f' := rfl

lemma wœÄ : (hi S).lift (kernel_fork.of_Œπ S.f S.zero) ‚â´ S.AddCommGroup_homology_œÄ' = 0 :=
by simp only [f'_eq_AddCommGroup_f', AddCommGroup_f'_comp_homology_œÄ']

@[simps]
def _root_.AddCommGroup.cokernel_cocone {X Y : AddCommGroup.{u}} (f : X ‚ü∂ Y) :
  cokernel_cofork f :=
@cokernel_cofork.of_œÄ _ _ _ _ _ f (AddCommGroup.of (Y ‚ß∏ add_monoid_hom.range f))
    (quotient_add_group.mk' (add_monoid_hom.range f)) (by tidy)

def _root_.AddCommGroup.cokernel_is_colimit {X Y : AddCommGroup.{u}} (f : X ‚ü∂ Y) :
  is_colimit (AddCommGroup.cokernel_cocone f) :=
limits.cokernel_cofork.is_colimit.of_œÄ _ _
  (Œª A x hx, quotient_add_group.lift _ x (Œª y hy, begin
    obtain ‚ü®z, rfl‚ü© := hy,
    rw [‚Üê comp_apply, hx, zero_apply],
  end))
  (Œª A x hx, by { ext, refl, })
  (Œª A x hx b hb, begin
    ext y,
    obtain ‚ü®z, rfl‚ü© := quotient_add_group.mk'_surjective _ y,
    simpa only [‚Üê comp_apply, hb],
  end)

def hœÄ : is_colimit (cokernel_cofork.of_œÄ _ (wœÄ S)) :=
is_colimit.of_iso_colimit (AddCommGroup.cokernel_is_colimit S.AddCommGroup_f')
  (cofork.ext (iso.refl _) (by tidy))

end AddCommGroup_left_homology_data

@[simps]
def AddCommGroup_left_homology_data : S.left_homology_data :=
{ K := AddCommGroup.of (add_monoid_hom.ker S.g),
  H := AddCommGroup.of S.AddCommGroup_homology,
  i := AddCommGroup_left_homology_data.i S,
  œÄ := S.AddCommGroup_homology_œÄ',
  wi := AddCommGroup_left_homology_data.wi S,
  hi := AddCommGroup_left_homology_data.hi S,
  wœÄ := AddCommGroup_left_homology_data.wœÄ S,
  hœÄ := AddCommGroup_left_homology_data.hœÄ S, }

@[simp]
lemma AddCommGroup_left_homology_data_f' :
  S.AddCommGroup_left_homology_data.f' = S.AddCommGroup_f' := rfl

def AddCommGroup_homology_iso : S.homology ‚âÖ S.AddCommGroup_homology :=
S.AddCommGroup_left_homology_data.homology_iso

lemma AddCommGroup_bijective_homology_iso_inv :
  function.bijective S.AddCommGroup_homology_iso.inv :=
concrete_category.bijective_of_is_iso ((forget AddCommGroup).map S.AddCommGroup_homology_iso.inv)

lemma AddCommGroup_bijective_homology_iso_hom :
  function.bijective S.AddCommGroup_homology_iso.hom :=
concrete_category.bijective_of_is_iso ((forget AddCommGroup).map S.AddCommGroup_homology_iso.hom)

def AddCommGroup_homology_œÄ : of (add_monoid_hom.ker S.g) ‚ü∂ S.homology :=
S.AddCommGroup_homology_œÄ' ‚â´ S.AddCommGroup_homology_iso.inv

@[simp, reassoc, elementwise]
lemma AddCommGroup_homology_œÄ'_comp_homology_iso_inv :
  S.AddCommGroup_homology_œÄ' ‚â´ S.AddCommGroup_homology_iso.inv = S.AddCommGroup_homology_œÄ := rfl

@[simp, reassoc, elementwise]
lemma AddCommGroup_f'_comp_homology_œÄ : S.AddCommGroup_f' ‚â´ S.AddCommGroup_homology_œÄ = 0 :=
begin
  ext,
  dsimp only [AddCommGroup_homology_œÄ],
  rw [AddCommGroup_f'_comp_homology_œÄ'_assoc, zero_comp],
end

lemma AddCommGroup_surjective_homology_œÄ' : function.surjective S.AddCommGroup_homology_œÄ' :=
quotient_add_group.mk'_surjective _

lemma AddCommGroup_surjective_homology_œÄ : function.surjective S.AddCommGroup_homology_œÄ  :=
function.surjective.comp S.AddCommGroup_bijective_homology_iso_inv.2
  S.AddCommGroup_surjective_homology_œÄ'

lemma AddCommGroup_ker_homology_œÄ'_eq_range_f' :
  add_monoid_hom.ker S.AddCommGroup_homology_œÄ' = add_monoid_hom.range S.AddCommGroup_f' :=
quotient_add_group.ker_mk _

lemma AddCommGroup_homology_œÄ'_eq_zero_iff (z : add_monoid_hom.ker S.g) :
  S.AddCommGroup_homology_œÄ' z = 0 ‚Üî z.1 ‚àà (add_monoid_hom.range S.f) :=
begin
  change z ‚àà add_monoid_hom.ker S.AddCommGroup_homology_œÄ' ‚Üî _,
  rw AddCommGroup_ker_homology_œÄ'_eq_range_f',
  split,
  { rintro ‚ü®x‚ÇÅ, hx‚ÇÅ‚ü©,
    rw ‚Üê hx‚ÇÅ,
    exact ‚ü®x‚ÇÅ, rfl‚ü©, },
  { rintro ‚ü®x‚ÇÅ, hx‚ÇÅ‚ü©,
    exact ‚ü®x‚ÇÅ, by { ext, exact hx‚ÇÅ, }‚ü©, },
end

lemma AddCommGroup_ker_homology_œÄ_eq_ker_homology_œÄ' :
  add_monoid_hom.ker S.AddCommGroup_homology_œÄ = add_monoid_hom.ker S.AddCommGroup_homology_œÄ' :=
begin
  dsimp only [AddCommGroup_homology_œÄ],
  ext x‚ÇÇ,
  split,
  { intro hx‚ÇÇ,
    apply S.AddCommGroup_bijective_homology_iso_inv.1,
    simpa only [map_zero S.AddCommGroup_homology_iso.inv] using hx‚ÇÇ, },
  { intro hx‚ÇÇ,
    simp only [add_monoid_hom.mem_ker] at hx‚ÇÇ ‚ä¢,
    rw [comp_apply, hx‚ÇÇ, map_zero S.AddCommGroup_homology_iso.inv], },
end

lemma AddCommGroup_homology_œÄ_eq_zero_iff (z : add_monoid_hom.ker S.g) :
  S.AddCommGroup_homology_œÄ z = 0 ‚Üî z.1 ‚àà (add_monoid_hom.range S.f) :=
begin
  change z ‚àà add_monoid_hom.ker S.AddCommGroup_homology_œÄ ‚Üî _,
  rw S.AddCommGroup_ker_homology_œÄ_eq_ker_homology_œÄ',
  exact S.AddCommGroup_homology_œÄ'_eq_zero_iff z,
end

lemma AddCommGroup_homology_ext_iff (z z' : add_monoid_hom.ker S.g) :
  S.AddCommGroup_homology_œÄ z = S.AddCommGroup_homology_œÄ z' ‚Üî ‚àÉ (x‚ÇÅ : S.X‚ÇÅ), z.1 = z'.1 + S.f x‚ÇÅ :=
begin
  split,
  { intro h,
    have eq : S.AddCommGroup_homology_œÄ (z - z') = 0,
    { simp only [map_sub, h, sub_self], },
    rw S.AddCommGroup_homology_œÄ_eq_zero_iff at eq,
    obtain ‚ü®x‚ÇÅ, hx‚ÇÅ‚ü© := eq,
    use x‚ÇÅ,
    simp only [hx‚ÇÅ, subtype.val_eq_coe, add_subgroup_class.coe_sub, add_sub_cancel'_right], },
  { rintro ‚ü®x‚ÇÅ, hx‚ÇÅ‚ü©,
    rw [show z = z' + S.AddCommGroup_f' x‚ÇÅ, by { ext, exact hx‚ÇÅ, }],
    simp only [map_add, AddCommGroup_f'_comp_homology_œÄ_apply, add_monoid_hom.zero_apply, add_zero], },
end

--@[ext]
lemma AddCommGroup_homology_ext (z z' : add_monoid_hom.ker S.g)
  (h : ‚àÉ (x‚ÇÅ : S.X‚ÇÅ), z.1 = z'.1 + S.f x‚ÇÅ) :
    S.AddCommGroup_homology_œÄ z = S.AddCommGroup_homology_œÄ z' :=
by simp only [S.AddCommGroup_homology_ext_iff, h]

variable (S)

lemma AddCommGroup_element_homology_is_zero_iff' (z : S.AddCommGroup_homology) :
  z = 0 ‚Üî ‚àÉ (x‚ÇÅ : S.X‚ÇÅ), z = S.AddCommGroup_homology_œÄ' (S.AddCommGroup_f' x‚ÇÅ) :=
begin
  split,
  { rintro rfl,
    exact ‚ü®0, by simp only [map_zero]‚ü©, },
  { rintro ‚ü®x‚ÇÅ, hx‚ÇÅ‚ü©,
    simp only [hx‚ÇÅ, AddCommGroup_f'_comp_homology_œÄ'_apply, zero_apply], },
end

lemma AddCommGroup_element_homology_is_zero_iff (z : S.homology) :
  z = 0 ‚Üî ‚àÉ (x‚ÇÅ : S.X‚ÇÅ), z = S.AddCommGroup_homology_œÄ (S.AddCommGroup_f' x‚ÇÅ) :=
by simp only [AddCommGroup_f'_comp_homology_œÄ_apply, add_monoid_hom.zero_apply, exists_const]

lemma AddCommGroup_exact_iff : S.exact ‚Üî
  ‚àÄ (x‚ÇÇ : S.X‚ÇÇ) (hx‚ÇÇ : S.g x‚ÇÇ = 0), ‚àÉ (x‚ÇÅ : S.X‚ÇÅ), S.f x‚ÇÅ = x‚ÇÇ :=
begin
  rw [S.AddCommGroup_left_homology_data.exact_iff, AddCommGroup.is_zero_iff],
  split,
  { intros h x‚ÇÇ hx‚ÇÇ,
    have eq : S.AddCommGroup_homology_œÄ' ‚ü®x‚ÇÇ, hx‚ÇÇ‚ü© = 0 := h _,
    rw AddCommGroup_homology_œÄ'_eq_zero_iff at eq,
    obtain ‚ü®x‚ÇÅ, hx‚ÇÅ‚ü© := eq,
    exact ‚ü®x‚ÇÅ, hx‚ÇÅ‚ü©, },
  { intros h Œ≥,
    obtain ‚ü®‚ü®x‚ÇÇ, hx‚ÇÇ‚ü©, rfl‚ü© := S.AddCommGroup_surjective_homology_œÄ' Œ≥,
    obtain ‚ü®x‚ÇÅ, rfl‚ü© := h x‚ÇÇ hx‚ÇÇ,
    simp only [S.AddCommGroup_homology_œÄ'_eq_zero_iff, add_monoid_hom.mem_range, exists_apply_eq_apply], },
end

variables {S}

lemma AddCommGroup_map_from_homology_ext {A : AddCommGroup.{u}} (f f' : S.homology ‚ü∂ A)
  (eq : ‚àÄ (x‚ÇÇ : add_monoid_hom.ker S.g), f (S.AddCommGroup_homology_œÄ x‚ÇÇ) = f' (S.AddCommGroup_homology_œÄ x‚ÇÇ)) :
  f = f' :=
begin
  ext,
  obtain ‚ü®x‚ÇÇ, rfl‚ü© := S.AddCommGroup_surjective_homology_œÄ x,
  exact eq x‚ÇÇ,
end

variables {S‚ÇÅ S‚ÇÇ : short_complex AddCommGroup.{u}} (œÜ œÜ' : S‚ÇÅ ‚ü∂ S‚ÇÇ)

@[simps]
def AddCommGroup_map_ker : of (add_monoid_hom.ker S‚ÇÅ.g) ‚ü∂ of (add_monoid_hom.ker S‚ÇÇ.g) :=
add_monoid_hom.cod_restrict (œÜ.œÑ‚ÇÇ.comp (add_monoid_hom.ker S‚ÇÅ.g).subtype) _
  (begin
    rintro ‚ü®x‚ÇÅ, hx‚ÇÅ‚ü©,
    dsimp,
    rw add_monoid_hom.mem_ker at hx‚ÇÅ,
    rw [add_monoid_hom.mem_ker, ‚Üê comp_apply, œÜ.comm‚ÇÇ‚ÇÉ, comp_apply, hx‚ÇÅ, map_zero œÜ.œÑ‚ÇÉ],
  end)

/-@[simps]
def AddCommGroup_map_homology : S‚ÇÅ.AddCommGroup_homology ‚ü∂ S‚ÇÇ.AddCommGroup_homology :=
submodule.liftq _ (AddCommGroup_map_ker œÜ ‚â´ S‚ÇÇ.AddCommGroup_homology_œÄ')
begin
  rintros _ ‚ü®x‚ÇÅ, rfl‚ü©,
  simp only [linear_map.mem_ker, AddCommGroup.coe_comp, function.comp_app,
    AddCommGroup_homology_œÄ'_eq_zero_iff],
  refine ‚ü®œÜ.œÑ‚ÇÅ x‚ÇÅ, _‚ü©,
  dsimp [AddCommGroup_f'],
  simp only [‚Üê comp_apply, œÜ.comm‚ÇÅ‚ÇÇ],
end

@[simps]
def AddCommGroup_left_homology_map_data : left_homology_map_data œÜ S‚ÇÅ.AddCommGroup_left_homology_data
  S‚ÇÇ.AddCommGroup_left_homology_data :=
{ œÜK := AddCommGroup_map_ker œÜ,
  œÜH := AddCommGroup_map_homology œÜ,
  commi' := rfl,
  commf'' := begin
    simp only [AddCommGroup_left_homology_data_f'],
    ext x‚ÇÅ,
    dsimp [AddCommGroup_f'],
    simp only [‚Üê comp_apply, œÜ.comm‚ÇÅ‚ÇÇ],
  end,
  commœÄ' := by { ext x‚ÇÅ, rcases x‚ÇÅ with ‚ü®x‚ÇÅ, hx‚ÇÅ‚ü©, refl, }, }

@[simp, reassoc, elementwise]
lemma AddCommGroup_homology_œÄ_comp_homology_map :
  S‚ÇÅ.AddCommGroup_homology_œÄ ‚â´ homology_map œÜ = AddCommGroup_map_ker œÜ ‚â´ S‚ÇÇ.AddCommGroup_homology_œÄ :=
begin
  dsimp only [AddCommGroup_homology_œÄ],
  rw (AddCommGroup_left_homology_map_data œÜ).homology_map_eq,
  have eq := (AddCommGroup_left_homology_map_data œÜ).commœÄ,
  dsimp only [AddCommGroup_left_homology_map_data, AddCommGroup_left_homology_data_œÄ,
    AddCommGroup_homology_iso] at ‚ä¢ eq,
  simp only [‚Üê reassoc_of eq, assoc, iso.inv_hom_id_assoc],
end -/

end short_complex

end category_theory
