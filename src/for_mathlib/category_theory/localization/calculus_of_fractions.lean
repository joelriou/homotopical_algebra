import for_mathlib.category_theory.localization.predicate

noncomputable theory

namespace category_theory

open category

variables {C : Type*} [category C] {W : morphism_property C}

structure left_calculus_of_fractions.to_sq
  {X' X Y : C} (s : X ‚ü∂ X') (hs : W s) (f : X ‚ü∂ Y) :=
(obj : C)
(g : X' ‚ü∂ obj)
(s' : Y ‚ü∂ obj)
(hs' : W s')
(fac : f ‚â´ s' = s ‚â´ g)

variable (W)

class left_calculus_of_fractions :=
(id : ‚àÄ (X : C), W (ùüô X))
(comp : W.stable_under_composition)
(ex : ‚àÄ ‚¶ÉX' X Y : C‚¶Ñ (s : X ‚ü∂ X') (hs : W s) (u : X ‚ü∂ Y),
  nonempty (left_calculus_of_fractions.to_sq s hs u))
(ext : ‚àÄ ‚¶ÉX' X Y : C‚¶Ñ (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (s : X' ‚ü∂ X) (hs : W s) (eq : s ‚â´ f‚ÇÅ = s ‚â´ f‚ÇÇ),
  ‚àÉ (Y' : C) (t : Y ‚ü∂ Y') (ht : W t), f‚ÇÅ ‚â´ t = f‚ÇÇ ‚â´ t)

namespace left_calculus_of_fractions

variables (W) [left_calculus_of_fractions W]

structure zigzag (X Y : C) :=
(Z : C) (f : X ‚ü∂ Z) (s : Y ‚ü∂ Z) (hs : W s)

def zigzag.of_hom {X Y : C} (f : X ‚ü∂ Y) : zigzag W X Y :=
‚ü®Y, f, ùüô Y, left_calculus_of_fractions.id _‚ü©

def zigzag.id (X : C) := zigzag.of_hom W (ùüô X)

variable {W}

def zigzag_rel ‚¶ÉX Y : C‚¶Ñ (z‚ÇÅ z‚ÇÇ : zigzag W X Y) : Prop :=
‚àÉ (Z‚ÇÉ : C) (t‚ÇÅ : z‚ÇÅ.Z ‚ü∂ Z‚ÇÉ) (t‚ÇÇ : z‚ÇÇ.Z ‚ü∂ Z‚ÇÉ) (hst : z‚ÇÅ.s ‚â´ t‚ÇÅ = z‚ÇÇ.s ‚â´ t‚ÇÇ)
  (hft : z‚ÇÅ.f ‚â´ t‚ÇÅ = z‚ÇÇ.f ‚â´ t‚ÇÇ), W (z‚ÇÅ.s ‚â´ t‚ÇÅ)

instance is_equiv_zigzag_rel (X Y : C) :
  is_equiv (zigzag W X Y) (Œª z‚ÇÅ z‚ÇÇ, zigzag_rel z‚ÇÅ z‚ÇÇ) :=
{ refl := Œª z, ‚ü®z.Z, ùüô _, ùüô _, rfl, rfl, by simpa only [comp_id] using z.hs‚ü©,
  symm := Œª z‚ÇÅ z‚ÇÇ h, begin
    rcases h with ‚ü®Z‚ÇÉ, t‚ÇÅ, t‚ÇÇ, hst, hft, ht‚ü©,
    refine ‚ü®Z‚ÇÉ, t‚ÇÇ, t‚ÇÅ, hst.symm, hft.symm, by simpa only [‚Üê hst] using ht‚ü©,
  end,
  trans := Œª z‚ÇÅ z‚ÇÇ z‚ÇÉ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ, begin
    rcases h‚ÇÅ‚ÇÇ with ‚ü®Z‚ÇÑ, t‚ÇÅ, t‚ÇÇ, hst, hft, ht‚ü©,
    rcases h‚ÇÇ‚ÇÉ with ‚ü®Z‚ÇÖ, u‚ÇÇ, u‚ÇÉ, hsu, hfu, hu‚ü©,
    rcases left_calculus_of_fractions.ex (z‚ÇÅ.s ‚â´ t‚ÇÅ) ht (z‚ÇÉ.s ‚â´ u‚ÇÉ) with ‚ü®Z‚ÇÜ, v‚ÇÑ, v‚ÇÖ, hv‚ÇÖ, fac‚ü©,
    simp only [assoc] at fac,
    have eq : z‚ÇÇ.s ‚â´ u‚ÇÇ ‚â´ v‚ÇÖ = z‚ÇÇ.s ‚â´ t‚ÇÇ ‚â´ v‚ÇÑ,
    { simpa only [‚Üê reassoc_of hsu, reassoc_of hst] using fac, },
    rcases left_calculus_of_fractions.ext _ _ _ z‚ÇÇ.hs eq with ‚ü®Z‚Çá, w, hw, fac'‚ü©,
    simp only [assoc] at fac',
    refine ‚ü®Z‚Çá, t‚ÇÅ ‚â´ v‚ÇÑ ‚â´ w, u‚ÇÉ ‚â´ v‚ÇÖ ‚â´ w, _, _, _‚ü©,
    { rw reassoc_of fac, },
    { rw [reassoc_of hft, ‚Üê fac', reassoc_of hfu], },
    { rw [‚Üê reassoc_of fac, ‚Üê reassoc_of hsu, ‚Üê assoc],
      exact left_calculus_of_fractions.comp _ _ hu
        (left_calculus_of_fractions.comp _ _ hv‚ÇÖ hw), },
  end, }

variable {W}

def zigzag.comp‚ÇÄ {X‚ÇÅ X‚ÇÇ X‚ÇÉ : C} (z‚ÇÅ‚ÇÇ : zigzag W X‚ÇÅ X‚ÇÇ) (z‚ÇÇ‚ÇÉ : zigzag W X‚ÇÇ X‚ÇÉ)
  (sq : to_sq z‚ÇÅ‚ÇÇ.s z‚ÇÅ‚ÇÇ.hs z‚ÇÇ‚ÇÉ.f) :
  zigzag W X‚ÇÅ X‚ÇÉ :=
‚ü®sq.obj, z‚ÇÅ‚ÇÇ.f ‚â´ sq.g , z‚ÇÇ‚ÇÉ.s ‚â´ sq.s', left_calculus_of_fractions.comp _ _ z‚ÇÇ‚ÇÉ.hs sq.hs'‚ü©

lemma zigzag.comp‚ÇÄ_rel {X‚ÇÅ X‚ÇÇ X‚ÇÉ : C} (z‚ÇÅ‚ÇÇ : zigzag W X‚ÇÅ X‚ÇÇ) (z‚ÇÇ‚ÇÉ : zigzag W X‚ÇÇ X‚ÇÉ)
  (sq sq' : to_sq z‚ÇÅ‚ÇÇ.s z‚ÇÅ‚ÇÇ.hs z‚ÇÇ‚ÇÉ.f) :
  zigzag_rel (zigzag.comp‚ÇÄ z‚ÇÅ‚ÇÇ z‚ÇÇ‚ÇÉ sq) (zigzag.comp‚ÇÄ z‚ÇÅ‚ÇÇ z‚ÇÇ‚ÇÉ sq') :=
begin
  let H := (left_calculus_of_fractions.ex sq.s' sq.hs' sq'.s').some,
  have eq : z‚ÇÅ‚ÇÇ.s ‚â´ sq.g ‚â´ H.g = z‚ÇÅ‚ÇÇ.s ‚â´ sq'.g ‚â´ H.s',
  { rw [‚Üê reassoc_of sq.fac, ‚Üê reassoc_of sq'.fac, H.fac], },
  rcases left_calculus_of_fractions.ext _ _ _ (z‚ÇÅ‚ÇÇ.hs) eq with ‚ü®Y, t, ht, fac‚ü©,
  refine ‚ü®Y, H.g ‚â´ t, H.s' ‚â´ t, _, _, _‚ü©,
  { dsimp [zigzag.comp‚ÇÄ],
    simp only [assoc, reassoc_of H.fac], },
  { dsimp [zigzag.comp‚ÇÄ],
    simp only [assoc] at ‚ä¢ fac,
    rw ‚Üê fac, },
  { dsimp [zigzag.comp‚ÇÄ],
    simp only [assoc, ‚Üê reassoc_of H.fac],
    refine left_calculus_of_fractions.comp _ _ z‚ÇÇ‚ÇÉ.hs
      (left_calculus_of_fractions.comp _ _ sq'.hs'
        (left_calculus_of_fractions.comp _ _ H.hs' ht)), }
end

variable (W)

def hom (X Y : C) := quot ((Œª (z‚ÇÅ z‚ÇÇ : zigzag W X Y), zigzag_rel z‚ÇÅ z‚ÇÇ))

variable {W}

def zigzag.comp {X‚ÇÅ X‚ÇÇ X‚ÇÉ : C} (z‚ÇÅ‚ÇÇ : zigzag W X‚ÇÅ X‚ÇÇ) (z‚ÇÇ‚ÇÉ : zigzag W X‚ÇÇ X‚ÇÉ) :
  hom W X‚ÇÅ X‚ÇÉ :=
quot.mk _ (zigzag.comp‚ÇÄ z‚ÇÅ‚ÇÇ z‚ÇÇ‚ÇÉ (left_calculus_of_fractions.ex z‚ÇÅ‚ÇÇ.s z‚ÇÅ‚ÇÇ.hs z‚ÇÇ‚ÇÉ.f).some)

lemma zigzag.comp_eq {X‚ÇÅ X‚ÇÇ X‚ÇÉ : C} (z‚ÇÅ‚ÇÇ : zigzag W X‚ÇÅ X‚ÇÇ) (z‚ÇÇ‚ÇÉ : zigzag W X‚ÇÇ X‚ÇÉ)
  (sq : to_sq z‚ÇÅ‚ÇÇ.s z‚ÇÅ‚ÇÇ.hs z‚ÇÇ‚ÇÉ.f) :
  zigzag.comp z‚ÇÅ‚ÇÇ z‚ÇÇ‚ÇÉ = quot.mk _ (zigzag.comp‚ÇÄ z‚ÇÅ‚ÇÇ z‚ÇÇ‚ÇÉ sq) :=
quot.sound (zigzag.comp‚ÇÄ_rel z‚ÇÅ‚ÇÇ z‚ÇÇ‚ÇÉ _ _)

def hom.comp {X‚ÇÅ X‚ÇÇ X‚ÇÉ : C} : hom W X‚ÇÅ X‚ÇÇ ‚Üí hom W X‚ÇÇ X‚ÇÉ ‚Üí hom W X‚ÇÅ X‚ÇÉ :=
begin
  refine quot.lift‚ÇÇ (Œª z‚ÇÅ‚ÇÇ z‚ÇÇ‚ÇÉ, zigzag.comp z‚ÇÅ‚ÇÇ z‚ÇÇ‚ÇÉ) (Œª z‚ÇÅ‚ÇÇ z‚ÇÇ‚ÇÉ z‚ÇÇ‚ÇÉ' h‚ÇÇ‚ÇÉ, _)
    (Œª z‚ÇÅ‚ÇÇ z‚ÇÅ‚ÇÇ' z‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÇ, _),
  { sorry, },
  { sorry, },
end

end left_calculus_of_fractions

end category_theory
