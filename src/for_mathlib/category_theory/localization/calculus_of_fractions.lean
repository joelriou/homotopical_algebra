import for_mathlib.category_theory.localization.opposite
import for_mathlib.category_theory.functor_misc
import for_mathlib.category_theory.localization.products

noncomputable theory

namespace category_theory

open category

variables {C : Type*} [category C] {W : morphism_property C}

structure left_calculus_of_fractions.to_sq {X' X Y : C} (s : X ‚ü∂ X') (hs : W s) (f : X ‚ü∂ Y) :=
(obj : C)
(g : X' ‚ü∂ obj)
(s' : Y ‚ü∂ obj)
(hs' : W s')
(fac : f ‚â´ s' = s ‚â´ g)

variable (W)

class left_calculus_of_fractions : Prop :=
(id : W.contains_identities)
(comp : W.stable_under_composition)
(ex : ‚àÄ ‚¶ÉX' X Y : C‚¶Ñ (s : X ‚ü∂ X') (hs : W s) (u : X ‚ü∂ Y),
  nonempty (left_calculus_of_fractions.to_sq s hs u))
(ext : ‚àÄ ‚¶ÉX' X Y : C‚¶Ñ (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (s : X' ‚ü∂ X) (hs : W s) (eq : s ‚â´ f‚ÇÅ = s ‚â´ f‚ÇÇ),
  ‚àÉ (Y' : C) (t : Y ‚ü∂ Y') (ht : W t), f‚ÇÅ ‚â´ t = f‚ÇÇ ‚â´ t)

instance left_calculus_of_fractions.contains_identities
  [h : left_calculus_of_fractions W] : W.contains_identities := h.id

namespace left_calculus_of_fractions

variables (W)

structure zigzag (X Y : C) :=
(Z : C) (f : X ‚ü∂ Z) (s : Y ‚ü∂ Z) (hs : W s)

variable {W}
def zigzag_rel ‚¶ÉX Y : C‚¶Ñ (z‚ÇÅ z‚ÇÇ : zigzag W X Y) : Prop :=
‚àÉ (Z‚ÇÉ : C) (t‚ÇÅ : z‚ÇÅ.Z ‚ü∂ Z‚ÇÉ) (t‚ÇÇ : z‚ÇÇ.Z ‚ü∂ Z‚ÇÉ) (hst : z‚ÇÅ.s ‚â´ t‚ÇÅ = z‚ÇÇ.s ‚â´ t‚ÇÇ)
  (hft : z‚ÇÅ.f ‚â´ t‚ÇÅ = z‚ÇÇ.f ‚â´ t‚ÇÇ), W (z‚ÇÅ.s ‚â´ t‚ÇÅ)

variables [left_calculus_of_fractions W] (W)

@[simps]
def zigzag.of_hom {X Y : C} (f : X ‚ü∂ Y) : zigzag W X Y :=
‚ü®Y, f, ùüô Y, morphism_property.contains_identities.id W Y‚ü©

@[simps]
def zigzag.id (X : C) := zigzag.of_hom W (ùüô X)

namespace zigzag_rel

variables {W}

lemma refl {X Y : C} (z : zigzag W X Y) : zigzag_rel z z :=
‚ü®z.Z, ùüô _, ùüô _, rfl, rfl, by simpa only [comp_id] using z.hs‚ü©

lemma symm {X Y : C} {z‚ÇÅ z‚ÇÇ : zigzag W X Y} (h : zigzag_rel z‚ÇÅ z‚ÇÇ) : zigzag_rel z‚ÇÇ z‚ÇÅ :=
begin
  rcases h with ‚ü®Z‚ÇÉ, t‚ÇÅ, t‚ÇÇ, hst, hft, ht‚ü©,
  refine ‚ü®Z‚ÇÉ, t‚ÇÇ, t‚ÇÅ, hst.symm, hft.symm, by simpa only [‚Üê hst] using ht‚ü©,
end

lemma trans {X Y : C} {z‚ÇÅ z‚ÇÇ z‚ÇÉ : zigzag W X Y} (h‚ÇÅ‚ÇÇ : zigzag_rel z‚ÇÅ z‚ÇÇ)
  (h‚ÇÇ‚ÇÉ : zigzag_rel z‚ÇÇ z‚ÇÉ) : zigzag_rel z‚ÇÅ z‚ÇÉ :=
begin
  rcases h‚ÇÅ‚ÇÇ with ‚ü®Z‚ÇÑ, t‚ÇÅ, t‚ÇÇ, hst, hft, ht‚ü©,
  rcases h‚ÇÇ‚ÇÉ with ‚ü®Z‚ÇÖ, u‚ÇÇ, u‚ÇÉ, hsu, hfu, hu‚ü©,
  rcases left_calculus_of_fractions.ex (z‚ÇÅ.s ‚â´ t‚ÇÅ) ht (z‚ÇÉ.s ‚â´ u‚ÇÉ) with ‚ü®Z‚ÇÜ, v‚ÇÑ, v‚ÇÖ, hv‚ÇÖ, fac‚ü©,
  simp only [assoc] at fac,
  have eq : z‚ÇÇ.s ‚â´ u‚ÇÇ ‚â´ v‚ÇÖ = z‚ÇÇ.s ‚â´ t‚ÇÇ ‚â´ v‚ÇÑ,
  { simpa only [‚Üê reassoc_of hsu, reassoc_of hst] using fac, },
  rcases left_calculus_of_fractions.ext _ _ _ z‚ÇÇ.hs eq with ‚ü®Z‚Çá, w, hw, fac'‚ü©,
  simp only [assoc] at fac',
  refine ‚ü®Z‚Çá, t‚ÇÅ ‚â´ v‚ÇÑ ‚â´ w, u‚ÇÉ ‚â´ v‚ÇÖ ‚â´ w, _, _, _‚ü©,
  { rw reassoc_of fac, },
  { rw [reassoc_of hft, ‚Üê fac', reassoc_of hfu], },
  { rw [‚Üê reassoc_of fac, ‚Üê reassoc_of hsu, ‚Üê assoc],
    exact left_calculus_of_fractions.comp _ _ hu
      (left_calculus_of_fractions.comp _ _ hv‚ÇÖ hw), },
end

end zigzag_rel

instance is_equiv_zigzag_rel (X Y : C) :
  is_equiv (zigzag W X Y) (Œª z‚ÇÅ z‚ÇÇ, zigzag_rel z‚ÇÅ z‚ÇÇ) :=
{ refl := zigzag_rel.refl,
  symm := Œª z‚ÇÅ z‚ÇÇ, zigzag_rel.symm,
  trans := Œª z‚ÇÅ z‚ÇÇ z‚ÇÉ, zigzag_rel.trans, }

variable {W}

def zigzag.comp‚ÇÄ {X‚ÇÅ X‚ÇÇ X‚ÇÉ : C} (z‚ÇÅ‚ÇÇ : zigzag W X‚ÇÅ X‚ÇÇ) (z‚ÇÇ‚ÇÉ : zigzag W X‚ÇÇ X‚ÇÉ)
  (sq : to_sq z‚ÇÅ‚ÇÇ.s z‚ÇÅ‚ÇÇ.hs z‚ÇÇ‚ÇÉ.f) :
  zigzag W X‚ÇÅ X‚ÇÉ :=
‚ü®sq.obj, z‚ÇÅ‚ÇÇ.f ‚â´ sq.g , z‚ÇÇ‚ÇÉ.s ‚â´ sq.s', left_calculus_of_fractions.comp _ _ z‚ÇÇ‚ÇÉ.hs sq.hs'‚ü©

lemma zigzag.comp‚ÇÄ_rel {X‚ÇÅ X‚ÇÇ X‚ÇÉ : C} (z‚ÇÅ‚ÇÇ : zigzag W X‚ÇÅ X‚ÇÇ) (z‚ÇÇ‚ÇÉ : zigzag W X‚ÇÇ X‚ÇÉ)
  (sq sq' : to_sq z‚ÇÅ‚ÇÇ.s z‚ÇÅ‚ÇÇ.hs z‚ÇÇ‚ÇÉ.f) :
  zigzag_rel (zigzag.comp‚ÇÄ z‚ÇÅ‚ÇÇ z‚ÇÇ‚ÇÉ sq) (zigzag.comp‚ÇÄ z‚ÇÅ‚ÇÇ z‚ÇÇ‚ÇÉ sq') :=
begin
  let H := (left_calculus_of_fractions.ex sq.s' sq.hs' sq'.s').some,
  have eq : z‚ÇÅ‚ÇÇ.s ‚â´ sq.g ‚â´ H.g = z‚ÇÅ‚ÇÇ.s ‚â´ sq'.g ‚â´ H.s',
  { rw [‚Üê reassoc_of sq.fac, ‚Üê reassoc_of sq'.fac, H.fac], },
  rcases left_calculus_of_fractions.ext _ _ _ (z‚ÇÅ‚ÇÇ.hs) eq with ‚ü®Y, t, ht, fac‚ü©,
  refine ‚ü®Y, H.g ‚â´ t, H.s' ‚â´ t, _, _, _‚ü©,
  { dsimp [zigzag.comp‚ÇÄ],
    simp only [assoc, reassoc_of H.fac], },
  { dsimp [zigzag.comp‚ÇÄ],
    simp only [assoc] at ‚ä¢ fac,
    rw ‚Üê fac, },
  { dsimp [zigzag.comp‚ÇÄ],
    simp only [assoc, ‚Üê reassoc_of H.fac],
    refine left_calculus_of_fractions.comp _ _ z‚ÇÇ‚ÇÉ.hs
      (left_calculus_of_fractions.comp _ _ sq'.hs'
        (left_calculus_of_fractions.comp _ _ H.hs' ht)), }
end

variable (W)

def hom (X Y : C) := quot ((Œª (z‚ÇÅ z‚ÇÇ : zigzag W X Y), zigzag_rel z‚ÇÅ z‚ÇÇ))

variable {W}

def zigzag.comp {X‚ÇÅ X‚ÇÇ X‚ÇÉ : C} (z‚ÇÅ‚ÇÇ : zigzag W X‚ÇÅ X‚ÇÇ) (z‚ÇÇ‚ÇÉ : zigzag W X‚ÇÇ X‚ÇÉ) :
  hom W X‚ÇÅ X‚ÇÉ :=
quot.mk _ (zigzag.comp‚ÇÄ z‚ÇÅ‚ÇÇ z‚ÇÇ‚ÇÉ (left_calculus_of_fractions.ex z‚ÇÅ‚ÇÇ.s z‚ÇÅ‚ÇÇ.hs z‚ÇÇ‚ÇÉ.f).some)

lemma zigzag.comp_eq {X‚ÇÅ X‚ÇÇ X‚ÇÉ : C} (z‚ÇÅ‚ÇÇ : zigzag W X‚ÇÅ X‚ÇÇ) (z‚ÇÇ‚ÇÉ : zigzag W X‚ÇÇ X‚ÇÉ)
  (sq : to_sq z‚ÇÅ‚ÇÇ.s z‚ÇÅ‚ÇÇ.hs z‚ÇÇ‚ÇÉ.f) :
  zigzag.comp z‚ÇÅ‚ÇÇ z‚ÇÇ‚ÇÉ = quot.mk _ (zigzag.comp‚ÇÄ z‚ÇÅ‚ÇÇ z‚ÇÇ‚ÇÉ sq) :=
quot.sound (zigzag.comp‚ÇÄ_rel z‚ÇÅ‚ÇÇ z‚ÇÇ‚ÇÉ _ _)

def hom.comp {X‚ÇÅ X‚ÇÇ X‚ÇÉ : C} : hom W X‚ÇÅ X‚ÇÇ ‚Üí hom W X‚ÇÇ X‚ÇÉ ‚Üí hom W X‚ÇÅ X‚ÇÉ :=
begin
  refine quot.lift‚ÇÇ (Œª z‚ÇÅ‚ÇÇ z‚ÇÇ‚ÇÉ, zigzag.comp z‚ÇÅ‚ÇÇ z‚ÇÇ‚ÇÉ) (Œª z‚ÇÅ‚ÇÇ z‚ÇÇ‚ÇÉ z‚ÇÇ‚ÇÉ' h‚ÇÇ‚ÇÉ, _)
    (Œª z‚ÇÅ‚ÇÇ z‚ÇÅ‚ÇÇ' z‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÇ, _),
  { dsimp,
    let sq := (left_calculus_of_fractions.ex z‚ÇÅ‚ÇÇ.s z‚ÇÅ‚ÇÇ.hs z‚ÇÇ‚ÇÉ.f).some,
    let sq' := (left_calculus_of_fractions.ex z‚ÇÅ‚ÇÇ.s z‚ÇÅ‚ÇÇ.hs z‚ÇÇ‚ÇÉ'.f).some,
    rw [zigzag.comp_eq _ _ sq, zigzag.comp_eq _ _ sq'],
    apply quot.sound,
    rcases h‚ÇÇ‚ÇÉ with ‚ü®Y, t, t', hst, hft, ht‚ü©,
    let H‚ÇÄ := (left_calculus_of_fractions.ex sq.s' sq.hs' t).some,
    let H‚ÇÄ' := (left_calculus_of_fractions.ex sq'.s' sq'.hs' t').some,
    have h : W (z‚ÇÇ‚ÇÉ.s ‚â´ sq.s' ‚â´ H‚ÇÄ.g),
    { rw [‚Üê H‚ÇÄ.fac, ‚Üê assoc],
      exact left_calculus_of_fractions.comp _ _ ht H‚ÇÄ.hs', },
    let H‚ÇÅ := (left_calculus_of_fractions.ex H‚ÇÄ.s' H‚ÇÄ.hs' H‚ÇÄ'.s').some,
    have eq : z‚ÇÅ‚ÇÇ.s ‚â´ sq.g ‚â´ H‚ÇÄ.g ‚â´ H‚ÇÅ.g = z‚ÇÅ‚ÇÇ.s ‚â´ sq'.g ‚â´ H‚ÇÄ'.g ‚â´ H‚ÇÅ.s',
    { simp only [‚Üê reassoc_of sq.fac, ‚Üê reassoc_of sq'.fac,‚Üê reassoc_of H‚ÇÄ.fac,
        ‚Üê reassoc_of H‚ÇÄ'.fac, reassoc_of hft, H‚ÇÅ.fac], },
    rcases left_calculus_of_fractions.ext _ _ _ z‚ÇÅ‚ÇÇ.hs eq with ‚ü®Z, u, hu, fac‚ü©,
    simp only [assoc] at fac,
    refine ‚ü®Z, H‚ÇÄ.g ‚â´ H‚ÇÅ.g ‚â´ u, H‚ÇÄ'.g ‚â´ H‚ÇÅ.s' ‚â´ u, _, _, _‚ü©; dsimp [zigzag.comp‚ÇÄ],
    { simp only [assoc, ‚Üê reassoc_of H‚ÇÄ.fac, ‚Üê reassoc_of H‚ÇÄ'.fac,
        reassoc_of hst, reassoc_of H‚ÇÅ.fac], },
    { simp only [assoc, fac], },
    { simp only [assoc],
      rw [‚Üê reassoc_of H‚ÇÄ.fac, ‚Üê reassoc_of H‚ÇÅ.fac, ‚Üê assoc],
      refine left_calculus_of_fractions.comp _ _ ht
        (left_calculus_of_fractions.comp _ _ H‚ÇÄ'.hs'
          (left_calculus_of_fractions.comp _ _ H‚ÇÅ.hs' hu)), }, },
  { dsimp,
    let sq := (left_calculus_of_fractions.ex z‚ÇÅ‚ÇÇ.s z‚ÇÅ‚ÇÇ.hs z‚ÇÇ‚ÇÉ.f).some,
    let sq' := (left_calculus_of_fractions.ex z‚ÇÅ‚ÇÇ'.s z‚ÇÅ‚ÇÇ'.hs z‚ÇÇ‚ÇÉ.f).some,
    rw [zigzag.comp_eq _ _ sq, zigzag.comp_eq _ _ sq'],
    apply quot.sound,
    rcases h‚ÇÅ‚ÇÇ with ‚ü®Y, t, t', hst, hft, ht‚ü©,
    let H := (left_calculus_of_fractions.ex (z‚ÇÅ‚ÇÇ.s ‚â´ t) ht (z‚ÇÇ‚ÇÉ.f ‚â´ sq.s')).some,
    let H' := (left_calculus_of_fractions.ex (z‚ÇÅ‚ÇÇ'.s ‚â´ t') (by { rw ‚Üê hst, exact ht, })
      (z‚ÇÇ‚ÇÉ.f ‚â´ sq'.s')).some,
    let z : zigzag W X‚ÇÅ X‚ÇÉ := ‚ü®H.obj, z‚ÇÅ‚ÇÇ.f ‚â´ t ‚â´ H.g, z‚ÇÇ‚ÇÉ.s ‚â´ sq.s' ‚â´ H.s',
      left_calculus_of_fractions.comp _ _ z‚ÇÇ‚ÇÉ.hs
        (left_calculus_of_fractions.comp _ _ sq.hs' H.hs')‚ü©,
    let z' : zigzag W X‚ÇÅ X‚ÇÉ := ‚ü®H'.obj, z‚ÇÅ‚ÇÇ'.f ‚â´ t' ‚â´ H'.g, z‚ÇÇ‚ÇÉ.s ‚â´ sq'.s' ‚â´ H'.s',
      left_calculus_of_fractions.comp _ _ z‚ÇÇ‚ÇÉ.hs
        (left_calculus_of_fractions.comp _ _ sq'.hs' H'.hs')‚ü©,
    refine trans _ (trans (_ : zigzag_rel z z') (symm _)),
    { have eq : z‚ÇÅ‚ÇÇ.s ‚â´ sq.g ‚â´ H.s' = z‚ÇÅ‚ÇÇ.s ‚â´ t ‚â´ H.g,
      { have h := H.fac,
        simp only [assoc] at h,
        rw [‚Üê h, reassoc_of sq.fac], },
      rcases left_calculus_of_fractions.ext _ _ _ z‚ÇÅ‚ÇÇ.hs eq with ‚ü®Z, u, hu, fac‚ü©,
      simp only [assoc] at fac,
      refine ‚ü®Z, H.s' ‚â´ u, u, _,_, _‚ü©; dsimp [zigzag.comp‚ÇÄ],
      { simp only [assoc, comp_id], },
      { simp only [assoc, comp_id, fac], },
      { simp only [assoc],
        refine left_calculus_of_fractions.comp _ _ z‚ÇÇ‚ÇÉ.hs
          (left_calculus_of_fractions.comp _ _ sq.hs'
          (left_calculus_of_fractions.comp _ _ H.hs' hu)), }, },
    { let T := (left_calculus_of_fractions.ex (sq.s' ‚â´ H.s')
        (left_calculus_of_fractions.comp _ _ sq.hs' H.hs') (sq'.s' ‚â´ H'.s')).some,
      have Tfac := T.fac,
      have fac := H.fac,
      have fac' := H'.fac,
      simp only [assoc] at Tfac fac fac',
      have eq : z‚ÇÅ‚ÇÇ.s ‚â´ t ‚â´ H.g ‚â´ T.g = z‚ÇÅ‚ÇÇ.s ‚â´ t ‚â´ H'.g ‚â´ T.s',
      { simp only [reassoc_of hst, ‚Üê reassoc_of fac', Tfac, reassoc_of fac], },
      rcases left_calculus_of_fractions.ext _ _ _ z‚ÇÅ‚ÇÇ.hs eq with ‚ü®Z, u, hu, fac''‚ü©,
      simp only [assoc] at fac'',
      refine ‚ü®Z, T.g ‚â´ u, T.s' ‚â´ u, _, _, _‚ü©; dsimp [z, z'],
      { simp only [assoc, reassoc_of Tfac], },
      { rw [assoc, assoc, assoc, assoc, fac'', reassoc_of hft], },
      { simp only [assoc, ‚Üê reassoc_of Tfac],
        exact left_calculus_of_fractions.comp _ _ z‚ÇÇ‚ÇÉ.hs
          (left_calculus_of_fractions.comp _ _ sq'.hs'
          (left_calculus_of_fractions.comp _ _ H'.hs'
          (left_calculus_of_fractions.comp _ _ T.hs' hu))), }, },
    { have eq : z‚ÇÅ‚ÇÇ'.s ‚â´ sq'.g ‚â´ H'.s' = z‚ÇÅ‚ÇÇ'.s ‚â´ t' ‚â´ H'.g,
      { have h := H'.fac,
        simp only [assoc] at h,
        rw [‚Üê h, reassoc_of sq'.fac], },
      rcases left_calculus_of_fractions.ext _ _ _ z‚ÇÅ‚ÇÇ'.hs eq with ‚ü®Z, u, hu, fac‚ü©,
      simp only [assoc] at fac,
      refine ‚ü®Z, H'.s' ‚â´ u, u, _,_, _‚ü©; dsimp [zigzag.comp‚ÇÄ],
      { simp only [assoc, comp_id], },
      { simp only [assoc, comp_id, fac], },
      { simp only [assoc],
        refine left_calculus_of_fractions.comp _ _ z‚ÇÇ‚ÇÉ.hs
          (left_calculus_of_fractions.comp _ _ sq'.hs'
          (left_calculus_of_fractions.comp _ _ H'.hs' hu)), }, }, },
end

lemma hom.comp_eq {X‚ÇÅ X‚ÇÇ X‚ÇÉ : C} (z‚ÇÅ‚ÇÇ : zigzag W X‚ÇÅ X‚ÇÇ) (z‚ÇÇ‚ÇÉ : zigzag W X‚ÇÇ X‚ÇÉ)
  (sq : to_sq z‚ÇÅ‚ÇÇ.s z‚ÇÅ‚ÇÇ.hs z‚ÇÇ‚ÇÉ.f) : hom.comp (quot.mk _ z‚ÇÅ‚ÇÇ) (quot.mk _ z‚ÇÇ‚ÇÉ) =
  quot.mk _ (zigzag.comp‚ÇÄ z‚ÇÅ‚ÇÇ z‚ÇÇ‚ÇÉ sq) :=
begin
  let sq' := (left_calculus_of_fractions.ex z‚ÇÅ‚ÇÇ.s z‚ÇÅ‚ÇÇ.hs z‚ÇÇ‚ÇÉ.f).some,
  have eq : (quot.mk _ (z‚ÇÅ‚ÇÇ.comp‚ÇÄ z‚ÇÇ‚ÇÉ sq) : hom W _ _) = quot.mk _ (z‚ÇÅ‚ÇÇ.comp‚ÇÄ z‚ÇÇ‚ÇÉ sq'),
  { rw [‚Üê zigzag.comp_eq, ‚Üê zigzag.comp_eq], },
  simpa only [eq],
end

include W

variable (W)

structure localization :=
(obj : C)

instance : category (localization W) :=
{ hom := Œª X Y, hom W X.obj Y.obj,
  id := Œª X, quot.mk _ (zigzag.id W X.obj),
  comp := Œª X‚ÇÅ X‚ÇÇ X‚ÇÉ, hom.comp,
  id_comp' := Œª X Y f, begin
    cases surjective_quot_mk _ f with g hg,
    subst hg,
    dsimp [hom.comp],
    let sq : to_sq (ùüô X.obj) (morphism_property.contains_identities.id W X.obj) g.f :=
      ‚ü®g.Z, g.f, ùüô g.Z, morphism_property.contains_identities.id W g.Z, by rw [id_comp, comp_id]‚ü©,
    rw zigzag.comp_eq (zigzag.id W X.obj) g sq,
    congr' 1,
    dsimp [zigzag.comp‚ÇÄ],
    cases g,
    tidy,
  end,
  comp_id' := Œª X Y f, begin
    cases surjective_quot_mk _ f with g hg,
    subst hg,
    dsimp [hom.comp],
    let sq : to_sq g.s g.hs (ùüô Y.obj) := ‚ü®g.Z, ùüô g.Z, g.s, g.hs, by rw [id_comp, comp_id]‚ü©,
    rw zigzag.comp_eq g (zigzag.id W Y.obj) sq,
    congr' 1,
    dsimp [zigzag.comp‚ÇÄ],
    cases g,
    tidy,
  end,
  assoc' := Œª X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ f‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÑ, begin
    cases surjective_quot_mk _ f‚ÇÅ‚ÇÇ with z‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ,
    cases surjective_quot_mk _ f‚ÇÇ‚ÇÉ with z‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ,
    cases surjective_quot_mk _ f‚ÇÉ‚ÇÑ with z‚ÇÉ‚ÇÑ h‚ÇÉ‚ÇÑ,
    let sq‚ÇÅ‚ÇÉ := (left_calculus_of_fractions.ex z‚ÇÅ‚ÇÇ.s z‚ÇÅ‚ÇÇ.hs z‚ÇÇ‚ÇÉ.f).some,
    let sq‚ÇÇ‚ÇÑ := (left_calculus_of_fractions.ex z‚ÇÇ‚ÇÉ.s z‚ÇÇ‚ÇÉ.hs z‚ÇÉ‚ÇÑ.f).some,
    dsimp,
    let H := (left_calculus_of_fractions.ex sq‚ÇÅ‚ÇÉ.s' sq‚ÇÅ‚ÇÉ.hs' sq‚ÇÇ‚ÇÑ.g).some,
    let sq : to_sq (z‚ÇÅ‚ÇÇ.comp‚ÇÄ z‚ÇÇ‚ÇÉ sq‚ÇÅ‚ÇÉ).s (z‚ÇÅ‚ÇÇ.comp‚ÇÄ z‚ÇÇ‚ÇÉ sq‚ÇÅ‚ÇÉ).hs z‚ÇÉ‚ÇÑ.f := begin
      refine ‚ü®H.obj, H.g, sq‚ÇÇ‚ÇÑ.s' ‚â´ H.s', left_calculus_of_fractions.comp _ _ sq‚ÇÇ‚ÇÑ.hs' H.hs', _‚ü©,
      dsimp [zigzag.comp‚ÇÄ],
      rw [assoc, ‚Üê H.fac, reassoc_of sq‚ÇÇ‚ÇÑ.fac],
    end,
    let sq' : to_sq z‚ÇÅ‚ÇÇ.s z‚ÇÅ‚ÇÇ.hs (z‚ÇÇ‚ÇÉ.comp‚ÇÄ z‚ÇÉ‚ÇÑ sq‚ÇÇ‚ÇÑ).f := begin
      refine ‚ü®H.obj, sq‚ÇÅ‚ÇÉ.g ‚â´ H.g, H.s', H.hs', _‚ü©,
      dsimp [zigzag.comp‚ÇÄ],
      rw [assoc, H.fac, reassoc_of sq‚ÇÅ‚ÇÉ.fac],
    end,
    simp only [‚Üê h‚ÇÅ‚ÇÇ, ‚Üê h‚ÇÇ‚ÇÉ, ‚Üê h‚ÇÉ‚ÇÑ],
    rw [hom.comp_eq z‚ÇÅ‚ÇÇ z‚ÇÇ‚ÇÉ sq‚ÇÅ‚ÇÉ, hom.comp_eq z‚ÇÇ‚ÇÉ z‚ÇÉ‚ÇÑ sq‚ÇÇ‚ÇÑ,
      hom.comp_eq (z‚ÇÅ‚ÇÇ.comp‚ÇÄ z‚ÇÇ‚ÇÉ sq‚ÇÅ‚ÇÉ) z‚ÇÉ‚ÇÑ sq, hom.comp_eq z‚ÇÅ‚ÇÇ (z‚ÇÇ‚ÇÉ.comp‚ÇÄ z‚ÇÉ‚ÇÑ sq‚ÇÇ‚ÇÑ) sq'],
    congr' 1,
    dsimp [zigzag.comp‚ÇÄ],
    tidy,
  end, }

variable {W}

def zigzag.hom {X Y : localization W} (z : zigzag W X.obj Y.obj) : X ‚ü∂ Y := quot.mk _ z

def map_zigzag {D : Type*} [category D] (F : C ‚•§ D) (hF : W.is_inverted_by F)
  {X Y : C} (z : zigzag W X Y) : F.obj X ‚ü∂ F.obj Y :=
F.map z.f ‚â´ by { haveI := hF z.s z.hs, exact inv (F.map z.s), }

namespace localization

lemma comp_eq {X‚ÇÅ X‚ÇÇ X‚ÇÉ : localization W} (z‚ÇÅ‚ÇÇ : zigzag W X‚ÇÅ.obj X‚ÇÇ.obj) (z‚ÇÇ‚ÇÉ : zigzag W X‚ÇÇ.obj X‚ÇÉ.obj)
  (sq : to_sq z‚ÇÅ‚ÇÇ.s z‚ÇÅ‚ÇÇ.hs z‚ÇÇ‚ÇÉ.f) : z‚ÇÅ‚ÇÇ.hom ‚â´ z‚ÇÇ‚ÇÉ.hom = (zigzag.comp‚ÇÄ z‚ÇÅ‚ÇÇ z‚ÇÇ‚ÇÉ sq).hom :=
hom.comp_eq z‚ÇÅ‚ÇÇ z‚ÇÇ‚ÇÉ sq

variable (W)

def hom_obj {X Y : C} (f : X ‚ü∂ Y) :
  (‚ü®X‚ü© : localization W).obj ‚ü∂ (‚ü®Y‚ü© : localization W).obj := f

@[simps]
def Q : C ‚•§ localization W :=
{ obj := Œª X, ‚ü®X‚ü©,
  map := Œª X Y f, (zigzag.of_hom W (hom_obj W f)).hom,
  map_comp' := Œª X‚ÇÅ X‚ÇÇ X‚ÇÉ f g, begin
    dsimp,
    rw localization.comp_eq (zigzag.of_hom W (hom_obj W f)) (zigzag.of_hom W (hom_obj W g))
      ‚ü®X‚ÇÉ, g, ùüô X‚ÇÉ, morphism_property.contains_identities.id W X‚ÇÉ, by tidy‚ü©,
    dsimp [zigzag.of_hom, zigzag.comp‚ÇÄ],
    congr' 1,
    tidy,
  end, }

variable {W}

@[simps]
def zigzag.inv {X Y : C} (s : X ‚ü∂ Y) (hs : W s) :
  zigzag W (‚ü®Y‚ü© : localization W).obj (‚ü®X‚ü© : localization W).obj := ‚ü®Y, ùüô Y, s, hs‚ü©

def inv_Q_map {X Y : C} (s : X ‚ü∂ Y) (hs : W s) : (Q W).obj Y ‚ü∂ (Q W).obj X :=
zigzag.hom (zigzag.inv s hs)

lemma comp_inv_Q_map {X Y : C} (s : X ‚ü∂ Y) (hs : W s) :
  (Q W).map s ‚â´ inv_Q_map s hs = ùüô _ :=
begin
  dsimp only [Q, inv_Q_map],
  rw localization.comp_eq (zigzag.of_hom W (hom_obj W s)) (zigzag.inv s hs)
    ‚ü®Y, ùüô Y, ùüô Y, morphism_property.contains_identities.id W Y, rfl‚ü©,
  dsimp [zigzag.comp‚ÇÄ],
  exact quot.sound ‚ü®Y, ùüô Y, s, by tidy, by tidy, by tidy‚ü©,
end

lemma inv_Q_map_comp {X Y : C} (s : X ‚ü∂ Y) (hs : W s) :
   inv_Q_map s hs ‚â´ (Q W).map s = ùüô _ :=
begin
  dsimp [Q, inv_Q_map],
  rw localization.comp_eq (zigzag.inv s hs) (zigzag.of_hom W (hom_obj W s))
    ‚ü®Y, ùüô Y, ùüô Y, morphism_property.contains_identities.id W Y, rfl‚ü©,
  dsimp [zigzag.comp‚ÇÄ],
  exact quot.sound ‚ü®Y, ùüô Y, ùüô Y, by tidy, by tidy,
    by { dsimp, simp only [comp_id], exact morphism_property.contains_identities.id W _, }‚ü©,
end

variable (W)

lemma Q_inverts_W : W.is_inverted_by (Q W) :=
Œª X Y s hs, ‚ü®‚ü®inv_Q_map s hs, comp_inv_Q_map s hs, inv_Q_map_comp s hs‚ü©‚ü©

lemma inv_Q_map_eq {X Y : C} (s : X ‚ü∂ Y) (hs : W s) :
  inv_Q_map s hs = (by { haveI := Q_inverts_W W s hs, exact inv ((Q W).map s), }) :=
begin
  haveI := Q_inverts_W W s hs,
  simp only [‚Üê cancel_mono ((Q W).map s), is_iso.inv_hom_id, inv_Q_map_comp],
end

instance {X Y : C} (s : X ‚ü∂ Y) (hs : W s) : is_iso (inv_Q_map s hs) :=
by { rw inv_Q_map_eq, apply_instance, }

variables {W}

@[simp]
lemma id_eq (X : localization W) : ùüô X = quot.mk _ (zigzag.id W X.obj) := rfl

instance {X Y : C} (z : zigzag W X Y) : is_iso ((Q W).map z.s) :=
Q_inverts_W W z.s z.hs


lemma map_zigzag_eq {X Y : C} (z : zigzag W X Y) :
  map_zigzag (localization.Q W) (Q_inverts_W W) z = quot.mk _ z :=
begin
  dsimp only [map_zigzag],
  rw ‚Üê inv_Q_map_eq W z.s z.hs,
  dsimp only [Q, inv_Q_map],
  rw comp_eq (zigzag.of_hom W (hom_obj W z.f)) (zigzag.inv z.s z.hs)
    ‚ü®z.Z, ùüô _, ùüô _, morphism_property.contains_identities.id W _, rfl‚ü©,
  dsimp [zigzag.of_hom, zigzag.comp‚ÇÄ, hom_obj, zigzag.hom],
  simp only [comp_id],
  cases z,
  refl,
end

variable (W)
lemma hom_fac {X Y : C} (f : (Q W).obj X ‚ü∂ (Q W).obj Y) :
  ‚àÉ (z : zigzag W X Y), f = map_zigzag (Q W) (Q_inverts_W W) z :=
begin
  cases surjective_quot_mk _ f with z hz,
  subst hz,
  exact ‚ü®z, (map_zigzag_eq z).symm‚ü©,
end

variable {W}

def lift {D : Type*} [category D] (F : C ‚•§ D) (hF : W.is_inverted_by F) :
  localization W ‚•§ D :=
{ obj := Œª X, F.obj X.obj,
  map := Œª X Y, quot.lift (Œª (f : zigzag W X.obj Y.obj),
    by { haveI := hF f.s f.hs, exact F.map f.f ‚â´ inv (F.map f.s)})
    (Œª z z' (h : zigzag_rel z z'), begin
      dsimp,
      rcases h with ‚ü®Y, t‚ÇÅ, t‚ÇÇ, hst, hft, ht‚ü©,
      haveI := hF _ ht,
      rw [‚Üê cancel_mono (F.map (z.s ‚â´ t‚ÇÅ)), assoc, assoc],
      nth_rewrite 0 F.map_comp,
      rw [is_iso.inv_hom_id_assoc, hst, F.map_comp, is_iso.inv_hom_id_assoc,
        ‚Üê F.map_comp z'.f, ‚Üê hft, F.map_comp],
    end),
  map_comp' := Œª X‚ÇÅ X‚ÇÇ X‚ÇÉ f‚ÇÅ f‚ÇÇ, begin
    dsimp,
    cases surjective_quot_mk _ f‚ÇÅ with g‚ÇÅ h‚ÇÅ,
    cases surjective_quot_mk _ f‚ÇÇ with g‚ÇÇ h‚ÇÇ,
    substs h‚ÇÅ h‚ÇÇ,
    let sq := (left_calculus_of_fractions.ex g‚ÇÅ.s g‚ÇÅ.hs g‚ÇÇ.f).some,
    erw comp_eq g‚ÇÅ g‚ÇÇ sq,
    dsimp [zigzag.comp‚ÇÄ, zigzag.hom],
    simp only [functor.map_comp, assoc],
    haveI := hF g‚ÇÅ.s g‚ÇÅ.hs,
    haveI := hF g‚ÇÇ.s g‚ÇÇ.hs,
    haveI := hF sq.s' sq.hs',
    rw is_iso.inv_comp,
    congr' 1,
    simp only [‚Üê cancel_mono (F.map g‚ÇÇ.s), ‚Üê cancel_mono (F.map sq.s'), ‚Üê cancel_epi (F.map g‚ÇÅ.s),
      assoc, is_iso.inv_hom_id, comp_id, is_iso.hom_inv_id_assoc, ‚Üê F.map_comp, sq.fac],
  end, }

lemma fac {D : Type*} [category D] (F : C ‚•§ D) (hF : W.is_inverted_by F) :
  Q W ‚ãô lift F hF = F :=
functor.ext (Œª X, rfl) (Œª X Y f, begin
  dsimp [lift, zigzag.hom, hom_obj],
  simp only [functor.map_id, is_iso.inv_id, id_comp],
end)

lemma uniq {D : Type*} [category D] (F‚ÇÅ F‚ÇÇ : localization W ‚•§ D) (h : Q W ‚ãô F‚ÇÅ = Q W ‚ãô F‚ÇÇ) :
  F‚ÇÅ = F‚ÇÇ :=
begin
  have eq : ‚àÄ (X : localization W), F‚ÇÅ.obj X = F‚ÇÇ.obj X,
  { intro X,
    cases X,
    apply functor.congr_obj h X, },
  apply functor.ext eq,
  intros X Y f,
  cases X,
  cases Y,
  rcases hom_fac W f with ‚ü®œÜ, hœÜ‚ü©,
  subst f,
  have eq‚ÇÅ := functor.congr_map_conjugate h œÜ.f,
  have eq‚ÇÇ := functor.congr_map_conjugate h œÜ.s,
  dsimp only [functor.comp_map] at eq‚ÇÅ eq‚ÇÇ,
  dsimp only [map_zigzag],
  simpa only [functor.map_comp, functor.map_inv, eq‚ÇÅ, eq‚ÇÇ, assoc, is_iso.inv_comp,
    inv_eq_to_hom, eq_to_hom_trans_assoc, eq_to_hom_refl, id_comp],
end

def universal_property (D : Type*) [category D] :
  localization.strict_universal_property_fixed_target (Q W) W D :=
{ inverts := Q_inverts_W W,
  lift := lift,
  fac := fac,
  uniq := uniq, }

instance Q_is_localization : (Q W).is_localization W :=
functor.is_localization.mk' (Q W) W (universal_property _) (universal_property _)

end localization

lemma map_zigzag_compatibility {D E : Type*} [category D] [category E]
  (L‚ÇÅ : C ‚•§ D) (hL‚ÇÅ : W.is_inverted_by L‚ÇÅ) (L‚ÇÇ : C ‚•§ E) (hL‚ÇÇ : W.is_inverted_by L‚ÇÇ)
  (M : D ‚•§ E) (e : L‚ÇÅ ‚ãô M ‚âÖ L‚ÇÇ) {X Y : C} (z : zigzag W X Y) :
  map_zigzag L‚ÇÇ hL‚ÇÇ z = e.inv.app X ‚â´ M.map (map_zigzag L‚ÇÅ hL‚ÇÅ z) ‚â´ e.hom.app Y :=
begin
  dsimp [map_zigzag],
  simp only [M.map_comp, assoc],
  erw ‚Üê e.inv.naturality_assoc,
  congr' 1,
  haveI := hL‚ÇÇ z.s z.hs,
  simp only [‚Üê cancel_mono (L‚ÇÇ.map z.s), is_iso.inv_hom_id, functor.map_inv, assoc,
    ‚Üê cancel_epi (e.hom.app z.Z), comp_id, iso.hom_inv_id_app_assoc, is_iso.eq_inv_comp],
  apply e.hom.naturality,
end

lemma map_zigzag_compatibility_imp {D E : Type*} [category D] [category E]
  (L‚ÇÅ : C ‚•§ D) (hL‚ÇÅ : W.is_inverted_by L‚ÇÅ) (L‚ÇÇ : C ‚•§ E) (hL‚ÇÇ : W.is_inverted_by L‚ÇÇ)
  (M : D ‚•§ E) (e : L‚ÇÅ ‚ãô M ‚âÖ L‚ÇÇ) {X Y : C} (z z' : zigzag W X Y)
  (eq : map_zigzag L‚ÇÅ hL‚ÇÅ z = map_zigzag L‚ÇÅ hL‚ÇÅ z') :
  map_zigzag L‚ÇÇ hL‚ÇÇ z = map_zigzag L‚ÇÇ hL‚ÇÇ z' :=
by simp only [map_zigzag_compatibility L‚ÇÅ hL‚ÇÅ L‚ÇÇ hL‚ÇÇ M e, eq]

lemma L_map_fac {D : Type*} [category D] (L : C ‚•§ D) (W : morphism_property C)
  [left_calculus_of_fractions W] [L.is_localization W] {X Y : C} (f : L.obj X ‚ü∂ L.obj Y) :
  ‚àÉ (z : zigzag W X Y), f = map_zigzag L (localization.inverts L W) z :=
begin
  let E := (localization.uniq_equivalence W (localization.Q W) L),
  let e : localization.Q W ‚ãô E.functor ‚âÖ L :=
    localization.comp_uniq_equivalence_functor_iso W (localization.Q W) L,
  let f' := e.hom.app X ‚â´ f ‚â´ e.inv.app Y,
  cases localization.hom_fac W (E.functor.preimage f') with z hz,
  change E.functor.preimage f' =
    map_zigzag (localization.Q W) (localization.inverts _ W) z at hz,
  replace hz := congr_arg E.functor.map hz,
  refine ‚ü®z, _‚ü©,
  simp only [map_zigzag_compatibility (localization.Q W) (localization.inverts _ W)
    L (localization.inverts _ W) E.functor e, ‚Üê hz, functor.image_preimage, assoc,
    iso.inv_hom_id_app, comp_id, iso.inv_hom_id_app_assoc],
end

lemma L_map_zigzag_eq_iff {D : Type*} [category D] (L : C ‚•§ D) {W : morphism_property C}
  [left_calculus_of_fractions W] [L.is_localization W] {X Y : C} (z‚ÇÅ z‚ÇÇ : zigzag W X Y) :
  map_zigzag L (localization.inverts L W) z‚ÇÅ =
    map_zigzag L (localization.inverts L W) z‚ÇÇ ‚Üî zigzag_rel z‚ÇÅ z‚ÇÇ :=
begin
  have eq : map_zigzag L (localization.inverts _ W) z‚ÇÅ =
      map_zigzag L (localization.inverts _ W) z‚ÇÇ ‚Üî
    map_zigzag (localization.Q W) (localization.inverts _ W) z‚ÇÅ =
      map_zigzag (localization.Q W) (localization.inverts _ W) z‚ÇÇ,
  { split,
    all_goals { exact map_zigzag_compatibility_imp _ _ _ _ _
      (localization.comp_uniq_equivalence_functor_iso W _ _)  _ _, }, },
  simp only [eq, localization.map_zigzag_eq],
  split,
  { rw quot.eq,
    clear eq,
    intro h,
    induction h with s‚ÇÅ s‚ÇÇ h s s‚ÇÅ s‚ÇÇ h' h s‚ÇÅ s‚ÇÇ s‚ÇÉ h'‚ÇÅ h'‚ÇÇ h‚ÇÅ h‚ÇÇ,
    exacts [h, zigzag_rel.refl _, h.symm, h‚ÇÅ.trans h‚ÇÇ], },
  { exact quot.sound, },
end

section

variables {D : Type*} [category D] (L : C ‚•§ D) (W' : morphism_property C)
  [left_calculus_of_fractions W'] [L.is_localization W']
omit W
include L W'

lemma exists_lift_arrow (f : arrow D) :
  ‚àÉ (g : arrow C), nonempty (f ‚âÖ L.map_arrow.obj g) :=
begin
  haveI : ess_surj L := localization.ess_surj L W',
  let e‚ÇÅ := L.obj_obj_preimage_iso _,
  let e‚ÇÇ := L.obj_obj_preimage_iso _,
  let f' := e‚ÇÅ.hom ‚â´ f.hom ‚â´ e‚ÇÇ.inv,
  rcases L_map_fac L W' f' with ‚ü®z, hz‚ü©,
  refine ‚ü®arrow.mk z.f, nonempty.intro _‚ü©,
  haveI := localization.inverts L W' z.s z.hs,
  refine arrow.iso_mk e‚ÇÅ.symm (e‚ÇÇ.symm ‚â™‚â´ as_iso (L.map z.s)) _,
  dsimp [map_zigzag] at hz ‚ä¢,
  simp only [‚Üê cancel_mono (inv (L.map z.s)), assoc, ‚Üê hz, is_iso.hom_inv_id, comp_id,
    ‚Üê cancel_epi e‚ÇÅ.hom, e‚ÇÅ.hom_inv_id_assoc],
end

def lift_map‚ÇÅ {X Y : D} (f : X ‚ü∂ Y) : C := (exists_lift_arrow L W' (arrow.mk f)).some.left
def lift_map‚ÇÇ {X Y : D} (f : X ‚ü∂ Y) : C := (exists_lift_arrow L W' (arrow.mk f)).some.right
def lift_map {X Y : D} (f : X ‚ü∂ Y) : lift_map‚ÇÅ L W' f ‚ü∂ lift_map‚ÇÇ L W' f :=
(exists_lift_arrow L W' (arrow.mk f)).some.hom
def map_lift_map_iso {X Y : D} (f : X ‚ü∂ Y) :
  arrow.mk f ‚âÖ arrow.mk (L.map (lift_map L W' f)) :=
(exists_lift_arrow L W' (arrow.mk f)).some_spec.some
def lift_map_iso‚ÇÅ {X Y : D} (f : X ‚ü∂ Y) : X ‚âÖ L.obj (lift_map‚ÇÅ L W' f) :=
arrow.left_func.map_iso (map_lift_map_iso L W' f)
def lift_map_iso‚ÇÇ {X Y : D} (f : X ‚ü∂ Y) : Y ‚âÖ L.obj (lift_map‚ÇÇ L W' f) :=
arrow.right_func.map_iso (map_lift_map_iso L W' f)

lemma lift_map_fac {X Y : D} (f : X ‚ü∂ Y) : f ‚â´ (lift_map_iso‚ÇÇ L W' f).hom =
  (lift_map_iso‚ÇÅ L W' f).hom ‚â´ L.map (lift_map L W' f) :=
(map_lift_map_iso L W' f).hom.w.symm

end

end left_calculus_of_fractions

variable {W}

structure right_calculus_of_fractions.to_sq {X Y Y' : C} (s : Y' ‚ü∂ Y) (hs : W s) (f : X ‚ü∂ Y) :=
(obj : C)
(g : obj ‚ü∂ Y')
(s' : obj ‚ü∂ X)
(hs' : W s')
(fac : s' ‚â´ f = g ‚â´ s)

variable (W)

class right_calculus_of_fractions : Prop :=
(id : W.contains_identities)
(comp : W.stable_under_composition)
(ex : ‚àÄ ‚¶ÉX Y Y' : C‚¶Ñ (s : Y' ‚ü∂ Y) (hs : W s) (u : X ‚ü∂ Y),
  nonempty (right_calculus_of_fractions.to_sq s hs u))
(ext : ‚àÄ ‚¶ÉX Y Y' : C‚¶Ñ (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (s : Y ‚ü∂ Y') (hs : W s) (eq : f‚ÇÅ ‚â´ s = f‚ÇÇ ‚â´ s),
  ‚àÉ (X' : C) (t : X' ‚ü∂ X) (ht : W t), t ‚â´ f‚ÇÅ = t ‚â´ f‚ÇÇ)

instance right_calculus_of_fractions.contains_identities
  [h : right_calculus_of_fractions W] : W.contains_identities := h.id

variable {W}

def left_calculus_of_fractions.op
  (h : left_calculus_of_fractions W) : right_calculus_of_fractions W.op :=
{ id := h.id.op,
  comp := h.comp.op,
  ex := Œª X Y Y' s hs u, begin
    let sq := (h.ex s.unop hs u.unop).some,
    exact nonempty.intro ‚ü®opposite.op sq.obj, sq.g.op, sq.s'.op, sq.hs',
      quiver.hom.unop_inj sq.fac‚ü©,
  end,
  ext := Œª X Y Y' f‚ÇÅ f‚ÇÇ s hs eq, begin
    rcases h.ext f‚ÇÅ.unop f‚ÇÇ.unop s.unop hs (by simp only [‚Üê unop_comp, eq])
      with ‚ü®X', t, ht, fac‚ü©,
    exact ‚ü®opposite.op X', t.op, ht, quiver.hom.unop_inj fac‚ü©,
  end, }

def left_calculus_of_fractions.unop {W : morphism_property C·µí·µñ}
  (h : left_calculus_of_fractions W) :
  right_calculus_of_fractions W.unop :=
{ id := h.id.unop,
  comp := h.comp.unop,
  ex := Œª X Y Y' s hs u, begin
    let sq := (h.ex s.op hs u.op).some,
    exact nonempty.intro ‚ü®opposite.unop sq.obj, sq.g.unop, sq.s'.unop, sq.hs',
      quiver.hom.op_inj sq.fac‚ü©,
  end,
  ext := Œª X Y Y' f‚ÇÅ f‚ÇÇ s hs eq, begin
    rcases h.ext f‚ÇÅ.op f‚ÇÇ.op s.op hs (by simp only [‚Üê op_comp, eq])
      with ‚ü®X', t, ht, fac‚ü©,
    exact ‚ü®opposite.unop X', t.unop, ht, quiver.hom.op_inj fac‚ü©,
  end, }

def right_calculus_of_fractions.op
  (h : right_calculus_of_fractions W) : left_calculus_of_fractions W.op :=
{ id := h.id.op,
  comp := h.comp.op,
  ex := Œª X' X Y s hs u, begin
    let sq := (h.ex s.unop hs u.unop).some,
    exact nonempty.intro ‚ü®opposite.op sq.obj, sq.g.op, sq.s'.op, sq.hs',
      quiver.hom.unop_inj sq.fac‚ü©,
  end,
  ext := Œª X' X Y f‚ÇÅ f‚ÇÇ s hs eq, begin
    have pif := h.ext f‚ÇÅ.unop f‚ÇÇ.unop s.unop hs (by simp only [‚Üê unop_comp, eq]),
    rcases h.ext f‚ÇÅ.unop f‚ÇÇ.unop s.unop hs (by simp only [‚Üê unop_comp, eq])
      with ‚ü®Y', t, ht, fac‚ü©,
    exact ‚ü®opposite.op Y', t.op, ht, quiver.hom.unop_inj fac‚ü©,
  end, }

def right_calculus_of_fractions.unop {W : morphism_property C·µí·µñ}
  (h : right_calculus_of_fractions W) :
  left_calculus_of_fractions W.unop :=
{ id := h.id.unop,
  comp := h.comp.unop,
  ex := Œª X' X Y s hs u, begin
    let sq := (h.ex s.op hs u.op).some,
    exact nonempty.intro ‚ü®opposite.unop sq.obj, sq.g.unop, sq.s'.unop, sq.hs',
      quiver.hom.op_inj sq.fac‚ü©,
  end,
  ext := Œª X' X Y f‚ÇÅ f‚ÇÇ s hs eq, begin
    have pif := h.ext f‚ÇÅ.op f‚ÇÇ.op s.op hs (by simp only [‚Üê op_comp, eq]),
    rcases h.ext f‚ÇÅ.op f‚ÇÇ.op s.op hs (by simp only [‚Üê op_comp, eq])
      with ‚ü®Y', t, ht, fac‚ü©,
    exact ‚ü®opposite.unop Y', t.unop, ht, quiver.hom.op_inj fac‚ü©,
  end, }

instance [h : right_calculus_of_fractions W] :
  left_calculus_of_fractions W.op := right_calculus_of_fractions.op h

instance [h : left_calculus_of_fractions W] :
  right_calculus_of_fractions W.op := left_calculus_of_fractions.op h

namespace right_calculus_of_fractions

variables (W)

structure zigzag (X Y : C) :=
(Z : C) (s : Z ‚ü∂ X) (f : Z ‚ü∂ Y) (hs : W s)

variable {W}

def zigzag.op {X Y : C} (z : zigzag W X Y) :
  left_calculus_of_fractions.zigzag W.op (opposite.op Y) (opposite.op X) :=
‚ü®opposite.op z.Z, z.f.op, z.s.op, z.hs‚ü©

def zigzag_rel ‚¶ÉX Y : C‚¶Ñ (z‚ÇÅ z‚ÇÇ : zigzag W X Y) : Prop :=
‚àÉ (Z‚ÇÉ : C) (t‚ÇÅ : Z‚ÇÉ ‚ü∂ z‚ÇÅ.Z) (t‚ÇÇ : Z‚ÇÉ ‚ü∂ z‚ÇÇ.Z) (hts : t‚ÇÅ ‚â´ z‚ÇÅ.s = t‚ÇÇ ‚â´ z‚ÇÇ.s)
  (htf : t‚ÇÅ ‚â´ z‚ÇÅ.f = t‚ÇÇ ‚â´ z‚ÇÇ.f), W (t‚ÇÅ ‚â´ z‚ÇÅ.s)

lemma zigzag_rel.iff_op {X Y : C} (z‚ÇÅ z‚ÇÇ : zigzag W X Y) :
  zigzag_rel z‚ÇÅ z‚ÇÇ ‚Üî left_calculus_of_fractions.zigzag_rel z‚ÇÅ.op z‚ÇÇ.op :=
begin
  split,
  { intro h,
    rcases h with ‚ü®Z‚ÇÉ, t‚ÇÅ, t‚ÇÇ, hts, htf, ht‚ü©,
    exact ‚ü®opposite.op Z‚ÇÉ, t‚ÇÅ.op, t‚ÇÇ.op, quiver.hom.unop_inj hts, quiver.hom.unop_inj htf, ht‚ü©, },
  { intro h,
    rcases h with ‚ü®Z‚ÇÉ, t‚ÇÅ, t‚ÇÇ, hst, hft, ht‚ü©,
    refine ‚ü®opposite.unop Z‚ÇÉ, t‚ÇÅ.unop, t‚ÇÇ.unop, quiver.hom.op_inj hst, quiver.hom.op_inj hft, ht‚ü©, },
end

variables (W) [right_calculus_of_fractions W]

@[simps]
def zigzag.of_hom {X Y : C} (f : X ‚ü∂ Y) : zigzag W X Y :=
‚ü®X, ùüô X, f, morphism_property.contains_identities.id W X‚ü©

@[simps]
def zigzag.id (X : C) := zigzag.of_hom W (ùüô X)

namespace zigzag_rel

variables {W}

lemma refl {X Y : C} (z : zigzag W X Y) : zigzag_rel z z :=
by { rw zigzag_rel.iff_op, apply left_calculus_of_fractions.zigzag_rel.refl, }

lemma symm {X Y : C} {z‚ÇÅ z‚ÇÇ : zigzag W X Y} (h : zigzag_rel z‚ÇÅ z‚ÇÇ) : zigzag_rel z‚ÇÇ z‚ÇÅ :=
by { rw zigzag_rel.iff_op at h ‚ä¢, exact h.symm, }

lemma trans {X Y : C} {z‚ÇÅ z‚ÇÇ z‚ÇÉ : zigzag W X Y} (h‚ÇÅ‚ÇÇ : zigzag_rel z‚ÇÅ z‚ÇÇ)
  (h‚ÇÇ‚ÇÉ : zigzag_rel z‚ÇÇ z‚ÇÉ) : zigzag_rel z‚ÇÅ z‚ÇÉ :=
by { rw zigzag_rel.iff_op at h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ ‚ä¢, exact h‚ÇÅ‚ÇÇ.trans h‚ÇÇ‚ÇÉ, }

end zigzag_rel

instance is_equiv_zigzag_rel (X Y : C) :
  is_equiv (zigzag W X Y) (Œª z‚ÇÅ z‚ÇÇ, zigzag_rel z‚ÇÅ z‚ÇÇ) :=
{ refl := zigzag_rel.refl,
  symm := Œª z‚ÇÅ z‚ÇÇ, zigzag_rel.symm,
  trans := Œª z‚ÇÅ z‚ÇÇ z‚ÇÉ, zigzag_rel.trans, }

end right_calculus_of_fractions

namespace left_calculus_of_fractions

variables {W} [morphism_property.contains_identities W] [right_calculus_of_fractions W]

def zigzag.unop {X Y : C} (z : zigzag W.op (opposite.op X) (opposite.op Y)) :
  right_calculus_of_fractions.zigzag W Y X :=
‚ü®opposite.unop z.Z, z.s.unop, z.f.unop, z.hs‚ü©

end left_calculus_of_fractions

namespace right_calculus_of_fractions

variables {W} [morphism_property.contains_identities W] [right_calculus_of_fractions W]

def map_zigzag {D : Type*} [category D] (F : C ‚•§ D) (hF : W.is_inverted_by F)
  {X Y : C} (z : zigzag W X Y) : F.obj X ‚ü∂ F.obj Y :=
by { haveI := hF z.s z.hs, exact inv (F.map z.s), } ‚â´ F.map z.f

lemma map_zigzag_eq_unop_map_zigzag_op {D : Type*} [category D] (F : C ‚•§ D)
  (hF : W.is_inverted_by F) {X Y : C} (z : zigzag W X Y) :
  map_zigzag F hF z = (left_calculus_of_fractions.map_zigzag F.op hF.op z.op).unop :=
begin
  dsimp [left_calculus_of_fractions.map_zigzag, map_zigzag, zigzag.op],
  simp only [quiver.hom.unop_op, unop_inv],
end

lemma L_map_fac {D : Type*} [category D] (L : C ‚•§ D) (W : morphism_property C)
  [right_calculus_of_fractions W]
  [L.is_localization W] {X Y : C} (f : L.obj X ‚ü∂ L.obj Y) :
  ‚àÉ (z : zigzag W X Y), f = map_zigzag L (localization.inverts L W) z :=
begin
  let f' : L.op.obj (opposite.op Y) ‚ü∂ L.op.obj (opposite.op X) := f.op,
  rcases left_calculus_of_fractions.L_map_fac L.op W.op f' with ‚ü®z, hz‚ü©,
  refine ‚ü®z.unop, _‚ü©,
  change f'.unop = _,
  simpa only [hz, map_zigzag_eq_unop_map_zigzag_op],
end

lemma L_map_zigzag_eq_iff {D : Type*} [category D] (L : C ‚•§ D) {W : morphism_property C}
  [right_calculus_of_fractions W] [L.is_localization W]
  {X Y : C} (z‚ÇÅ z‚ÇÇ : zigzag W X Y) :
  map_zigzag L (localization.inverts L W) z‚ÇÅ =
    map_zigzag L (localization.inverts L W) z‚ÇÇ ‚Üî zigzag_rel z‚ÇÅ z‚ÇÇ :=
begin
  simp only [zigzag_rel.iff_op, ‚Üê left_calculus_of_fractions.L_map_zigzag_eq_iff L.op z‚ÇÅ.op,
    map_zigzag_eq_unop_map_zigzag_op],
  exact ‚ü®Œª h, quiver.hom.unop_inj h, Œª h, quiver.hom.op_inj h‚ü©,
end

end right_calculus_of_fractions

variable (W)

class morphism_property.is_saturated : Prop :=
(condition' : ‚àÄ ‚¶ÉX Y Z T : C‚¶Ñ (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ T) (hfg : W (f ‚â´ g))
  (hgh : W (g ‚â´ h)), W g)

lemma morphism_property.is_saturated.condition [W.is_saturated] {X Y Z T : C}
  (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ T) (hfg : W (f ‚â´ g))
  (hgh : W (g ‚â´ h)) : W g :=
morphism_property.is_saturated.condition' f g h hfg hgh

namespace localization

lemma is_iso_map_iff_of_calculus_of_fractions {D : Type*} [category D] (L : C ‚•§ D)
  (W : morphism_property C) [L.is_localization W] [W.is_saturated]
  [left_calculus_of_fractions W] [right_calculus_of_fractions W] {X Y : C} (f : X ‚ü∂ Y) :
  is_iso (L.map f) ‚Üî W f :=
begin
  refine ‚ü®_ ,Œª hf, localization.inverts L W f hf‚ü©,
  introI,
  rcases left_calculus_of_fractions.L_map_fac L W (inv (L.map f)) with ‚ü®z‚ÇÅ, h‚ÇÅ‚ü©,
  rcases right_calculus_of_fractions.L_map_fac L W (inv (L.map f)) with ‚ü®z‚ÇÇ, h‚ÇÇ‚ü©,
  dsimp [left_calculus_of_fractions.map_zigzag] at h‚ÇÅ,
  dsimp [right_calculus_of_fractions.map_zigzag] at h‚ÇÇ,
  rcases (left_calculus_of_fractions.L_map_zigzag_eq_iff L
    (left_calculus_of_fractions.zigzag.mk _ (f ‚â´ z‚ÇÅ.f) z‚ÇÅ.s z‚ÇÅ.hs)
    (left_calculus_of_fractions.zigzag.id W X)).mp begin
      dsimp [left_calculus_of_fractions.map_zigzag],
      simp only [L.map_comp, assoc, ‚Üê h‚ÇÅ, is_iso.hom_inv_id],
    end with ‚ü®Z, t‚ÇÅ, t‚ÇÅ', hst, hft, H‚ÇÅ‚ü©,
  rcases (right_calculus_of_fractions.L_map_zigzag_eq_iff L
    (right_calculus_of_fractions.zigzag.mk _ z‚ÇÇ.s (z‚ÇÇ.f ‚â´ f) z‚ÇÇ.hs)
    (right_calculus_of_fractions.zigzag.id W Y)).mp begin
      dsimp [right_calculus_of_fractions.map_zigzag],
      simp only [L.map_comp, assoc, ‚Üê reassoc_of h‚ÇÇ, is_iso.inv_hom_id],
    end with ‚ü®Z', t‚ÇÇ, t‚ÇÇ', hts, htf, H‚ÇÇ‚ü©,
  dsimp at t‚ÇÅ t‚ÇÅ' hst hft H‚ÇÅ t‚ÇÇ t‚ÇÇ' hts htf H‚ÇÇ,
  simp only [assoc, id_comp, comp_id] at hst hft hts htf,
  rw ‚Üê hft at hst,
  rw ‚Üê htf at hts,
  exact morphism_property.is_saturated.condition W (t‚ÇÇ ‚â´ z‚ÇÇ.f)
    f (z‚ÇÅ.f ‚â´ t‚ÇÅ) (by simpa only [assoc, ‚Üê hts] using H‚ÇÇ)
    (by simpa only [‚Üê hst] using H‚ÇÅ),
end

end localization

end category_theory
