import for_mathlib.category_theory.localization.derived_functor_shift
import for_mathlib.category_theory.triangulated.is_triangulated_subcategory

open category_theory category_theory.category category_theory.limits

noncomputable theory

namespace category_theory

namespace right_derivability_structure

variables {C‚ÇÄ C H D : Type*} [category C‚ÇÄ] [category C] [category D] [category H]
  {W‚ÇÄ : morphism_property C‚ÇÄ} {W : morphism_property C} {Œ¶ : localizor_morphism W‚ÇÄ W}
  [localizor_morphism.is_localization_equivalence Œ¶]
  [morphism_property.multiplicative W‚ÇÄ] [morphism_property.multiplicative W]
  (Œ≤ : right_derivability_structure.basic Œ¶)
  (F : C ‚•§ D) (L : C ‚•§ H)
  (hF : W‚ÇÄ.is_inverted_by (Œ¶.functor ‚ãô F))
  [has_shift C‚ÇÄ ‚Ñ§] [has_shift C ‚Ñ§] [has_shift H ‚Ñ§] [has_shift D ‚Ñ§]
  [F.has_comm_shift ‚Ñ§] [L.has_comm_shift ‚Ñ§] [Œ¶.functor.has_comm_shift ‚Ñ§]
  [preadditive C‚ÇÄ] [preadditive C] [preadditive H] [preadditive D]
  [has_zero_object C‚ÇÄ] [has_zero_object C] [has_zero_object H] [has_zero_object D]
  [‚àÄ (n : ‚Ñ§ ), (shift_functor C‚ÇÄ n).additive]
  [‚àÄ (n : ‚Ñ§ ), (shift_functor C n).additive]
  [‚àÄ (n : ‚Ñ§ ), (shift_functor H n).additive]
  [‚àÄ (n : ‚Ñ§ ), (shift_functor D n).additive]
  [L.is_localization W]
  [pretriangulated C‚ÇÄ] [pretriangulated C] [pretriangulated H] [pretriangulated D]
  [functor.ess_surj_on_dist_triang (Œ¶.functor ‚ãô L)]
  [functor.is_triangulated F] [functor.is_triangulated Œ¶.functor]

namespace basic

include Œ≤ hF

lemma derived_functor_is_triangulated' [F.has_right_derived_functor W] :
  (F.right_derived_functor L W).is_triangulated :=
‚ü®Œª T hT, begin
  obtain ‚ü®T', hT', ‚ü®e‚ü©‚ü© := functor.ess_surj_on_dist_triang.condition (Œ¶.functor ‚ãô L) T hT,
  have E' := (functor.map_triangle_comp (Œ¶.functor ‚ãô L) (F.right_derived_functor L W)).symm.app T',
  let œÑ : Œ¶.functor ‚ãô F ‚ü∂ (Œ¶.functor ‚ãô L) ‚ãô F.right_derived_functor L W :=
    whisker_left Œ¶.functor (F.right_derived_functor_Œ± L W) ‚â´ (functor.associator _ _ _).inv,
  haveI : ‚àÄ (X‚ÇÄ : C‚ÇÄ), is_iso (œÑ.app X‚ÇÄ) := Œª X‚ÇÄ, begin
    dsimp [œÑ],
    rw [comp_id],
    apply Œ≤.is_iso_app L F hF,
  end,
  haveI := nat_iso.is_iso_of_is_iso_app œÑ,
  haveI : (as_iso œÑ).hom.respects_comm_shift ‚Ñ§ := by { dsimp [as_iso], apply_instance, },
  exact pretriangulated.isomorphic_distinguished _ (functor.map_distinguished _ _ hT') _
    ((F.right_derived_functor L W).map_triangle.map_iso e.symm ‚â™‚â´
    (functor.map_triangle_comp (Œ¶.functor ‚ãô L) (F.right_derived_functor L W)).symm.app T' ‚â™‚â´
    (functor.map_triangle_nat_iso (as_iso œÑ)).symm.app T'),
end‚ü©

lemma derived_functor_is_triangulated (RF : H ‚•§ D) (Œ± : F ‚ü∂ L ‚ãô RF)
  [RF.is_right_derived_functor Œ±] [RF.has_comm_shift ‚Ñ§] [Œ±.respects_comm_shift ‚Ñ§] :
  RF.is_triangulated :=
begin
  haveI := functor.is_right_derived_functor.has_right_derived_functor F RF L Œ± W,
  haveI := Œ≤.derived_functor_is_triangulated' F L hF,
  let e := nat_iso.right_derived (iso.refl F) (F.right_derived_functor_Œ± L W) Œ±,
  haveI : e.hom.respects_comm_shift ‚Ñ§,
  { refine ‚ü®Œª n, _‚ü©,
    apply functor.is_right_derived_functor_to_ext
      (shift_functor H n ‚ãô F.right_derived_functor L W)
      (functor.has_comm_shift.right_derived_shift_Œ± F L W n),
    ext X,
    simp only [nat_trans.comp_app, whisker_left_app, whisker_right_app],
    erw functor.has_comm_shift.right_derived_comm_shift_comm_assoc,
    simp only [nat_iso.right_derived_hom, iso.refl_hom,
      functor.has_comm_shift.right_derived_Œ±_shift_app, ‚Üê functor.map_comp,
      nat_trans.right_derived_app (ùüô F) (F.right_derived_functor_Œ± L W) Œ± X,
      nat_trans.id_app, id_comp,
      functor.has_comm_shift.right_derived_shift_Œ±_app,
      assoc, nat_trans.naturality_assoc, nat_trans.right_derived_app_assoc,
      nat_trans.respects_comm_shift.comm_app Œ± n X,
      functor.has_comm_shift.comp_hom_app], },
  exact functor.is_triangulated.of_iso e,
end

end basic

end right_derivability_structure

end category_theory
