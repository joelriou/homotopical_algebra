import for_mathlib.category_theory.localization.triangulated
import for_mathlib.category_theory.triangulated.pretriangulated_misc
import for_mathlib.category_theory.triangulated.shift_triangle

noncomputable theory

universes v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

open_locale zero_object

namespace set

open category_theory

class respects_iso {X : Type*} [category X] (A : set X) : Prop :=
(condition : ‚àÄ ‚¶Éx y : X‚¶Ñ (e : x ‚âÖ y) (hx : x ‚àà A), y ‚àà A)

end set

namespace category_theory

open limits category preadditive

namespace functor

@[simps]
def map_arrow_nat_trans_of_nat_trans {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} [category.{v‚ÇÅ} C] [category.{v‚ÇÇ} D]
  {F G : C ‚•§ D} (œÑ : F ‚ü∂ G) : F.map_arrow ‚ü∂ G.map_arrow :=
{ app := Œª f,
  { left := œÑ.app _,
    right := œÑ.app _, }, }

@[simps]
def map_arrow_nat_iso_of_nat_iso {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} [category.{v‚ÇÅ} C] [category.{v‚ÇÇ} D]
  {F G : C ‚•§ D} (e : F ‚âÖ G) : F.map_arrow ‚âÖ G.map_arrow :=
{ hom := map_arrow_nat_trans_of_nat_trans e.hom,
  inv := map_arrow_nat_trans_of_nat_trans e.inv, }

end functor

namespace triangulated

open pretriangulated

variables (C : Type*) [category C] [has_zero_object C] [has_shift C ‚Ñ§]
  [preadditive C] [‚àÄ (n : ‚Ñ§), functor.additive (shift_functor C n)]
  [pretriangulated C]

structure subcategory :=
(set : set C)
(zero : (0 : C) ‚àà set)
(shift : ‚àÄ (X : C) (n : ‚Ñ§) (hX : X ‚àà set), (shift_functor C n).obj X ‚àà set)
(ext‚ÇÇ : ‚àÄ (T : triangle C) (hT : T ‚àà dist_triang C) (h‚ÇÅ : T.obj‚ÇÅ ‚àà set) (h‚ÇÉ : T.obj‚ÇÉ ‚àà set), T.obj‚ÇÇ ‚àà set)

variable {C}

namespace subcategory

variable (A : subcategory C)
lemma respects_iso : A.set.respects_iso :=
‚ü®Œª X Y e hX, A.ext‚ÇÇ _ (pretriangulated.isomorphic_distinguished _
  (pretriangulated.contractible_distinguished X) (triangle.mk C e.hom (0 : Y ‚ü∂ 0) 0)
  (triangle.mk_iso _ _ (iso.refl _) e.symm (iso.refl _) (by tidy) (by tidy) (by tidy))) hX A.zero‚ü©

lemma ext‚ÇÅ
  (T : triangle C) (hT : T ‚àà dist_triang C) (h‚ÇÇ : T.obj‚ÇÇ ‚àà A.set) (h‚ÇÉ : T.obj‚ÇÉ ‚àà A.set) :
  T.obj‚ÇÅ ‚àà A.set :=
A.ext‚ÇÇ T.inv_rotate (pretriangulated.inv_rot_of_dist_triangle C T hT) (A.shift _ (-1 : ‚Ñ§) h‚ÇÉ) h‚ÇÇ

lemma ext‚ÇÉ
  (T : triangle C) (hT : T ‚àà dist_triang C) (h‚ÇÅ : T.obj‚ÇÅ ‚àà A.set) (h‚ÇÇ : T.obj‚ÇÇ ‚àà A.set) :
  T.obj‚ÇÉ ‚àà A.set :=
A.ext‚ÇÇ T.rotate (pretriangulated.rot_of_dist_triangle C T hT) h‚ÇÇ (A.shift _ (1 : ‚Ñ§) h‚ÇÅ)

def W : morphism_property C :=
Œª X Y f, ‚àÉ (Z : C) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ (shift_functor C (1 : ‚Ñ§)).obj X)
  (H : triangle.mk C f g h ‚àà dist_triang C), Z ‚àà A.set

def W' : morphism_property C :=
Œª Y Z g, ‚àÉ (X : C) (f : X ‚ü∂ Y) (h : Z ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß) (H : triangle.mk C f g h ‚àà dist_triang C),
    X ‚àà A.set

variable {A}

lemma W_eq_W' : W A = W' A :=
begin
  ext X Y f,
  split,
  { rintro ‚ü®Z, g, h, H, mem‚ü©,
    exact ‚ü®_, _, _, inv_rot_of_dist_triangle C _ H, subcategory.shift A _ (-1 : ‚Ñ§) mem‚ü©, },
  { rintro ‚ü®Z, g, h, H, mem‚ü©,
    refine ‚ü®_, _, _, rot_of_dist_triangle C _ H, subcategory.shift A _ (1 : ‚Ñ§) mem‚ü©, },
end

variable (A)

instance W_contains_identities : (W A).contains_identities :=
‚ü®Œª X, ‚ü®0, 0, 0, pretriangulated.contractible_distinguished X, subcategory.zero A‚ü©‚ü©

lemma W_respects_iso : (W A).respects_iso :=
begin
  split,
  { rintro X' X Y e f ‚ü®Z, g, h, mem, mem'‚ü©,
    refine ‚ü®Z, g, h ‚â´ (shift_functor C 1).map e.inv, _, mem'‚ü©,
    refine pretriangulated.isomorphic_distinguished _ mem _ _,
    refine triangle.mk_iso _ _ e (iso.refl _) (iso.refl _) (by tidy) (by tidy) _,
    dsimp,
    simp only [assoc, ‚Üê functor.map_comp, e.inv_hom_id, functor.map_id, comp_id, id_comp], },
  { rintro X Y Y' e f ‚ü®Z, g, h, mem, mem'‚ü©,
    refine ‚ü®Z, e.inv ‚â´ g, h, _, mem'‚ü©,
    refine pretriangulated.isomorphic_distinguished _ mem _ _,
    refine triangle.mk_iso _ _ (iso.refl _) e.symm (iso.refl _) (by tidy) (by tidy) (by tidy), },
end

instance : left_calculus_of_fractions (W A) :=
{ id := infer_instance,
  comp := sorry,
  ex := Œª X' X Y s hs u, begin
    obtain ‚ü®Z, f, g, H, mem‚ü© := hs,
    obtain ‚ü®Y', s', f', mem'‚ü© := pretriangulated.distinguished_cocone_triangle‚ÇÇ (g ‚â´ u‚ü¶1‚üß'),
    obtain ‚ü®b, ‚ü®hb‚ÇÅ, hb‚ÇÇ‚ü©‚ü© := pretriangulated.complete_distinguished_triangle_morphism‚ÇÇ _ _
      H mem' u (ùüô Z) (by { dsimp, rw id_comp, }),
    exact nonempty.intro ‚ü®Y', b, s', ‚ü®Z, f', g ‚â´ u‚ü¶1‚üß', mem', mem‚ü©, hb‚ÇÅ.symm‚ü©,
  end,
  ext := Œª X' X Y f‚ÇÅ f‚ÇÇ s hs hf‚ÇÅ, begin
    let f := f‚ÇÅ - f‚ÇÇ,
    have hf‚ÇÇ : s ‚â´ f = 0 := by { dsimp [f], rw [comp_sub, hf‚ÇÅ, sub_self], },
    obtain ‚ü®Z, g, h, H, mem‚ü© := hs,
    obtain ‚ü®q, hq‚ü© := contravariant_yoneda_exact‚ÇÇ _ H f hf‚ÇÇ,
    dsimp at q hq,
    obtain ‚ü®Y', r, t, mem'‚ü© := pretriangulated.distinguished_cocone_triangle _ _ q,
    refine ‚ü®Y', r, _, _‚ü©,
    { exact ‚ü®_, _, _, rot_of_dist_triangle C _ mem', subcategory.shift A _ 1 mem‚ü©, },
    { rw [‚Üê sub_eq_zero, ‚Üê sub_comp],
      change f ‚â´ r = 0,
      have eq := comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ C _ mem',
      dsimp at eq,
      rw [hq, assoc, eq, comp_zero], },
  end, }

instance : right_calculus_of_fractions (W A) :=
{ id := infer_instance,
  comp := left_calculus_of_fractions.comp (W A),
  ex := Œª X Y Y' s hs u, begin
    obtain ‚ü®Z, f, g, H, mem‚ü© := hs,
    obtain ‚ü®X', f', h', mem'‚ü© := pretriangulated.distinguished_cocone_triangle‚ÇÅ (u ‚â´ f),
    obtain ‚ü®a, ‚ü®ha‚ÇÅ, ha‚ÇÇ‚ü©‚ü© := pretriangulated.complete_distinguished_triangle_morphism‚ÇÅ _ _ mem' H u (ùüô Z)
      (comp_id _),
    exact nonempty.intro ‚ü®X', a, f', ‚ü®Z, u ‚â´ f, h', mem', mem‚ü©, ha‚ÇÅ‚ü©,
  end,
  ext := Œª Y Z Z' f‚ÇÅ f‚ÇÇ s hs hf‚ÇÅ, begin
    let f := f‚ÇÅ - f‚ÇÇ,
    have hf‚ÇÇ : f ‚â´ s = 0 := by { dsimp [f], rw [sub_comp, hf‚ÇÅ, sub_self], },
    rw W_eq_W' at hs,
    obtain ‚ü®X, g, h, H, mem‚ü© := hs,
    obtain ‚ü®q, hq‚ü© := covariant_yoneda_exact‚ÇÇ _ H f hf‚ÇÇ,
    dsimp at q hq,
    obtain ‚ü®Y', r, t, mem'‚ü© := pretriangulated.distinguished_cocone_triangle‚ÇÅ q,
    refine ‚ü®Y', r, _, _‚ü©,
    { exact ‚ü®_, _, _, mem', mem‚ü©, },
    { rw [‚Üê sub_eq_zero, ‚Üê comp_sub],
    change r ‚â´ f = 0,
    have eq := comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ C _ mem',
    dsimp at eq,
    rw [hq, ‚Üê assoc, eq, zero_comp], },
  end, }

lemma mul_mem_W_iff {X Y : C} (f : X ‚ü∂ Y) (n : ‚Ñ§) :
  (W A) ((‚Üë((-1 : units ‚Ñ§) ^ n) : ‚Ñ§) ‚Ä¢ f) ‚Üî (W A) f :=
(W_respects_iso A).arrow_mk_iso_iff
begin
  let e : X ‚âÖ X :=
  { hom := (‚Üë((-1 : units ‚Ñ§) ^ n) : ‚Ñ§) ‚Ä¢ ùüô X,
    inv := (‚Üë((-1 : units ‚Ñ§) ^ n) : ‚Ñ§) ‚Ä¢ ùüô X,
    hom_inv_id' := by simp only [zsmul_comp, id_comp, smul_smul, int.units_coe_mul_self, one_smul],
    inv_hom_id' := by simp only [zsmul_comp, id_comp, smul_smul, int.units_coe_mul_self, one_smul], },
  refine arrow.iso_mk e (iso.refl _) _,
  dsimp,
  rw [comp_id, zsmul_comp, id_comp],
end

instance W_compatible_with_shift : (W A).compatible_with_shift ‚Ñ§ :=
‚ü®begin
  have h : ‚àÄ (X Y : C) (f : X ‚ü∂ Y) (hf : (W A) f) (n : ‚Ñ§), (W A) (f‚ü¶n‚üß'),
  { rintro X Y f ‚ü®Z, g, h, H, mem‚ü© n,
    rw ‚Üê mul_mem_W_iff A _ n,
    exact ‚ü®_, _, _, triangle.shift_distinguished C _ H n, subcategory.shift A Z n mem‚ü©, },
  intro n,
  ext X Y f,
  refine ‚ü®Œª hf, _, Œª hf, h _ _ f hf n‚ü©,
   exact ((W_respects_iso A).arrow_mk_iso_iff
    ((functor.map_arrow_nat_iso_of_nat_iso
    (shift_functor_comp_shift_functor_neg C n)).app (arrow.mk f))).mp (h _ _ _ hf (-n)),
end‚ü©

instance W_stable_under_finite_products : (W A).stable_under_finite_products := sorry

instance W_compatible_with_triangulation : (W A).compatible_with_triangulation := sorry

instance W_is_saturated : (W A).is_saturated := sorry

lemma test [has_finite_products C] : pretriangulated (W A).localization := infer_instance

end subcategory

end triangulated

end category_theory
