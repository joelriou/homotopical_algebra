import for_mathlib.category_theory.localization.triangulated
import for_mathlib.category_theory.triangulated.pretriangulated_misc
import for_mathlib.category_theory.triangulated.shift_triangle
import for_mathlib.category_theory.triangulated.triangulated
import for_mathlib.category_theory.preadditive_subcategory
import for_mathlib.category_theory.triangulated.coproducts
import for_mathlib.category_theory.limits.products
import category_theory.limits.full_subcategory
import data.int.order.units

noncomputable theory

universes v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

open_locale zero_object

namespace set

open category_theory

class respects_iso {X : Type*} [category X] (A : set X) : Prop :=
(condition' : ‚àÄ ‚¶Éx y : X‚¶Ñ (e : x ‚âÖ y) (hx : x ‚àà A), y ‚àà A)

lemma respects_iso.condition {X : Type*} [category X] (A : set X) [A.respects_iso]
  {x y : X} (e : x ‚âÖ y) (hx : x ‚àà A) : y ‚àà A :=
respects_iso.condition' e hx

lemma respects_iso.mem_iff_of_iso {X : Type*} [category X] (A : set X) [A.respects_iso]
  {x y : X} (e : x ‚âÖ y) : x ‚àà A ‚Üî y ‚àà A :=
begin
  split,
  { exact respects_iso.condition A e, },
  { exact respects_iso.condition A e.symm, },
end

end set

open category_theory

namespace category_theory

open limits category preadditive category_theory

namespace functor

@[simps]
def map_arrow_nat_trans_of_nat_trans {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} [category.{v‚ÇÅ} C] [category.{v‚ÇÇ} D]
  {F G : C ‚•§ D} (œÑ : F ‚ü∂ G) : F.map_arrow ‚ü∂ G.map_arrow :=
{ app := Œª f,
  { left := œÑ.app _,
    right := œÑ.app _, }, }

@[simps]
def map_arrow_nat_iso_of_nat_iso {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} [category.{v‚ÇÅ} C] [category.{v‚ÇÇ} D]
  {F G : C ‚•§ D} (e : F ‚âÖ G) : F.map_arrow ‚âÖ G.map_arrow :=
{ hom := map_arrow_nat_trans_of_nat_trans e.hom,
  inv := map_arrow_nat_trans_of_nat_trans e.inv, }

end functor

namespace triangulated

open pretriangulated

variables (C : Type*) [category C] [has_zero_object C] [has_shift C ‚Ñ§]
  [preadditive C] [‚àÄ (n : ‚Ñ§), functor.additive (shift_functor C n)]
  [pretriangulated C]

structure subcategory :=
(set : set C)
(zero : (0 : C) ‚àà set)
(shift : ‚àÄ (X : C) (n : ‚Ñ§) (hX : X ‚àà set), (shift_functor C n).obj X ‚àà set)
(ext‚ÇÇ : ‚àÄ (T : triangle C) (hT : T ‚àà dist_triang C) (h‚ÇÅ : T.obj‚ÇÅ ‚àà set) (h‚ÇÉ : T.obj‚ÇÉ ‚àà set), T.obj‚ÇÇ ‚àà set)

variable {C}

namespace subcategory

variable (A : subcategory C)

instance set_respects_iso : A.set.respects_iso :=
‚ü®Œª X Y e hX, A.ext‚ÇÇ _ (pretriangulated.isomorphic_distinguished _
  (pretriangulated.contractible_distinguished X) (triangle.mk e.hom (0 : Y ‚ü∂ 0) 0)
  (triangle.mk_iso _ _ (iso.refl _) e.symm (iso.refl _) (by tidy) (by tidy) (by tidy))) hX A.zero‚ü©

lemma ext‚ÇÅ
  (T : triangle C) (hT : T ‚àà dist_triang C) (h‚ÇÇ : T.obj‚ÇÇ ‚àà A.set) (h‚ÇÉ : T.obj‚ÇÉ ‚àà A.set) :
  T.obj‚ÇÅ ‚àà A.set :=
A.ext‚ÇÇ T.inv_rotate (pretriangulated.inv_rot_of_dist_triangle C T hT) (A.shift _ (-1 : ‚Ñ§) h‚ÇÉ) h‚ÇÇ

lemma ext‚ÇÉ
  (T : triangle C) (hT : T ‚àà dist_triang C) (h‚ÇÅ : T.obj‚ÇÅ ‚àà A.set) (h‚ÇÇ : T.obj‚ÇÇ ‚àà A.set) :
  T.obj‚ÇÉ ‚àà A.set :=
A.ext‚ÇÇ T.rotate (pretriangulated.rot_of_dist_triangle C T hT) h‚ÇÇ (A.shift _ (1 : ‚Ñ§) h‚ÇÅ)

lemma shift_iff (X : C) (n : ‚Ñ§) : X ‚àà A.set ‚Üî (shift_functor C n).obj X ‚àà A.set :=
begin
  split,
  { intro h,
    exact A.shift X n h, },
  { intro h,
    exact set.respects_iso.condition A.set
      ((add_neg_equiv (shift_monoidal_functor C ‚Ñ§) n).unit_iso.symm.app X) (A.shift _ (-n) h), },
end

def W : morphism_property C :=
Œª X Y f, ‚àÉ (Z : C) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ (shift_functor C (1 : ‚Ñ§)).obj X)
  (H : triangle.mk f g h ‚àà dist_triang C), Z ‚àà A.set

def W' : morphism_property C :=
Œª Y Z g, ‚àÉ (X : C) (f : X ‚ü∂ Y) (h : Z ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß) (H : triangle.mk f g h ‚àà dist_triang C),
    X ‚àà A.set

variable {A}

def W.mk {T : triangle C} (hT : T ‚àà dist_triang C) (h : T.obj‚ÇÉ ‚àà A.set) :
  (W A) T.mor‚ÇÅ :=
‚ü®T.obj‚ÇÉ, T.mor‚ÇÇ, T.mor‚ÇÉ, (by { cases T, exact hT, }), h‚ü©

def W'.mk {T : triangle C} (hT : T ‚àà dist_triang C) (h : T.obj‚ÇÅ ‚àà A.set) :
  (W' A) T.mor‚ÇÇ :=
‚ü®T.obj‚ÇÅ, T.mor‚ÇÅ, T.mor‚ÇÉ, (by { cases T, exact hT, }), h‚ü©

def W.triangle {X Y : C} (f : X ‚ü∂ Y) (hf : (W A) f) : triangle C :=
triangle.mk f hf.some_spec.some hf.some_spec.some_spec.some

lemma W.triangle_distinguished {X Y : C} (f : X ‚ü∂ Y) (hf : (W A) f) :
  W.triangle f hf ‚àà dist_triang C := hf.some_spec.some_spec.some_spec.some

lemma W.triangle_obj‚ÇÉ_mem {X Y : C} (f : X ‚ü∂ Y) (hf : (W A) f) :
  (W.triangle f hf).obj‚ÇÉ ‚àà A.set :=
hf.some_spec.some_spec.some_spec.some_spec

variable (A)

lemma W_eq_W' : W A = W' A :=
begin
  ext X Y f,
  split,
  { rintro ‚ü®Z, g, h, H, mem‚ü©,
    exact ‚ü®_, _, _, inv_rot_of_dist_triangle C _ H, subcategory.shift A _ (-1 : ‚Ñ§) mem‚ü©, },
  { rintro ‚ü®Z, g, h, H, mem‚ü©,
    refine ‚ü®_, _, _, rot_of_dist_triangle C _ H, subcategory.shift A _ (1 : ‚Ñ§) mem‚ü©, },
end

variable {A}

def W.mk' {T : triangle C} (hT : T ‚àà dist_triang C) (h : T.obj‚ÇÅ ‚àà A.set) :
  (W A) T.mor‚ÇÇ :=
by simpa only [W_eq_W'] using W'.mk hT h

instance W_contains_identities : (W A).contains_identities :=
‚ü®Œª X, ‚ü®0, 0, 0, pretriangulated.contractible_distinguished X, subcategory.zero A‚ü©‚ü©

variable (A)

lemma W_stable_under_composition [is_triangulated C] : (W A).stable_under_composition :=
Œª X‚ÇÅ X‚ÇÇ X‚ÇÉ u‚ÇÅ‚ÇÇ u‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ,
begin
  rcases h‚ÇÅ‚ÇÇ with ‚ü®Z‚ÇÅ‚ÇÇ, v‚ÇÅ‚ÇÇ, w‚ÇÅ‚ÇÇ, H‚ÇÅ‚ÇÇ, mem‚ÇÅ‚ÇÇ‚ü©,
  rcases h‚ÇÇ‚ÇÉ with ‚ü®Z‚ÇÇ‚ÇÉ, v‚ÇÇ‚ÇÉ, w‚ÇÇ‚ÇÉ, H‚ÇÇ‚ÇÉ, mem‚ÇÇ‚ÇÉ‚ü©,
  rcases pretriangulated.distinguished_cocone_triangle _ _ (u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ) with ‚ü®Z‚ÇÅ‚ÇÉ, v‚ÇÅ‚ÇÉ, w‚ÇÅ‚ÇÉ, H‚ÇÅ‚ÇÉ‚ü©,
  refine ‚ü®_, _, _, H‚ÇÅ‚ÇÉ, _‚ü©,
  exact subcategory.ext‚ÇÇ A _ (is_triangulated.octahedron_axiom rfl H‚ÇÅ‚ÇÇ H‚ÇÇ‚ÇÉ H‚ÇÅ‚ÇÉ).some.mem
    mem‚ÇÅ‚ÇÇ mem‚ÇÇ‚ÇÉ,
end

lemma W_respects_iso : (W A).respects_iso :=
begin
  split,
  { rintro X' X Y e f ‚ü®Z, g, h, mem, mem'‚ü©,
    refine ‚ü®Z, g, h ‚â´ (shift_functor C 1).map e.inv, _, mem'‚ü©,
    refine pretriangulated.isomorphic_distinguished _ mem _ _,
    refine triangle.mk_iso _ _ e (iso.refl _) (iso.refl _) (by tidy) (by tidy) _,
    dsimp,
    simp only [assoc, ‚Üê functor.map_comp, e.inv_hom_id, functor.map_id, comp_id, id_comp], },
  { rintro X Y Y' e f ‚ü®Z, g, h, mem, mem'‚ü©,
    refine ‚ü®Z, e.inv ‚â´ g, h, _, mem'‚ü©,
    refine pretriangulated.isomorphic_distinguished _ mem _ _,
    refine triangle.mk_iso _ _ (iso.refl _) e.symm (iso.refl _) (by tidy) (by tidy) (by tidy), },
end

instance [is_triangulated C] : left_calculus_of_fractions (W A) :=
{ id := infer_instance,
  comp := W_stable_under_composition A,
  ex := Œª X' X Y s hs u, begin
    obtain ‚ü®Z, f, g, H, mem‚ü© := hs,
    obtain ‚ü®Y', s', f', mem'‚ü© := pretriangulated.distinguished_cocone_triangle‚ÇÇ (g ‚â´ u‚ü¶1‚üß'),
    obtain ‚ü®b, ‚ü®hb‚ÇÅ, hb‚ÇÇ‚ü©‚ü© := pretriangulated.complete_distinguished_triangle_morphism‚ÇÇ _ _
      H mem' u (ùüô Z) (by { dsimp, rw id_comp, }),
    exact nonempty.intro ‚ü®Y', b, s', ‚ü®Z, f', g ‚â´ u‚ü¶1‚üß', mem', mem‚ü©, hb‚ÇÅ.symm‚ü©,
  end,
  ext := Œª X' X Y f‚ÇÅ f‚ÇÇ s hs hf‚ÇÅ, begin
    let f := f‚ÇÅ - f‚ÇÇ,
    have hf‚ÇÇ : s ‚â´ f = 0 := by { dsimp [f], rw [comp_sub, hf‚ÇÅ, sub_self], },
    obtain ‚ü®Z, g, h, H, mem‚ü© := hs,
    obtain ‚ü®q, hq‚ü© := contravariant_yoneda_exact‚ÇÇ _ H f hf‚ÇÇ,
    dsimp at q hq,
    obtain ‚ü®Y', r, t, mem'‚ü© := pretriangulated.distinguished_cocone_triangle _ _ q,
    refine ‚ü®Y', r, _, _‚ü©,
    { exact ‚ü®_, _, _, rot_of_dist_triangle C _ mem', subcategory.shift A _ 1 mem‚ü©, },
    { rw [‚Üê sub_eq_zero, ‚Üê sub_comp],
      change f ‚â´ r = 0,
      have eq := comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ C _ mem',
      dsimp at eq,
      rw [hq, assoc, eq, comp_zero], },
  end, }

instance [is_triangulated C] : right_calculus_of_fractions (W A) :=
{ id := infer_instance,
  comp := W_stable_under_composition A,
  ex := Œª X Y Y' s hs u, begin
    obtain ‚ü®Z, f, g, H, mem‚ü© := hs,
    obtain ‚ü®X', f', h', mem'‚ü© := pretriangulated.distinguished_cocone_triangle‚ÇÅ (u ‚â´ f),
    obtain ‚ü®a, ‚ü®ha‚ÇÅ, ha‚ÇÇ‚ü©‚ü© := pretriangulated.complete_distinguished_triangle_morphism‚ÇÅ _ _ mem' H u (ùüô Z)
      (comp_id _),
    exact nonempty.intro ‚ü®X', a, f', ‚ü®Z, u ‚â´ f, h', mem', mem‚ü©, ha‚ÇÅ‚ü©,
  end,
  ext := Œª Y Z Z' f‚ÇÅ f‚ÇÇ s hs hf‚ÇÅ, begin
    let f := f‚ÇÅ - f‚ÇÇ,
    have hf‚ÇÇ : f ‚â´ s = 0 := by { dsimp [f], rw [sub_comp, hf‚ÇÅ, sub_self], },
    rw W_eq_W' at hs,
    obtain ‚ü®X, g, h, H, mem‚ü© := hs,
    obtain ‚ü®q, hq‚ü© := covariant_yoneda_exact‚ÇÇ _ H f hf‚ÇÇ,
    dsimp at q hq,
    obtain ‚ü®Y', r, t, mem'‚ü© := pretriangulated.distinguished_cocone_triangle‚ÇÅ q,
    refine ‚ü®Y', r, _, _‚ü©,
    { exact ‚ü®_, _, _, mem', mem‚ü©, },
    { rw [‚Üê sub_eq_zero, ‚Üê comp_sub],
    change r ‚â´ f = 0,
    have eq := comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ C _ mem',
    dsimp at eq,
    rw [hq, ‚Üê assoc, eq, zero_comp], },
  end, }

lemma mul_mem_W_iff {X Y : C} (f : X ‚ü∂ Y) (n : ‚Ñ§) :
  (W A) ((‚Üë((-1 : units ‚Ñ§) ^ n) : ‚Ñ§) ‚Ä¢ f) ‚Üî (W A) f :=
(W_respects_iso A).arrow_mk_iso_iff
begin
  let e : X ‚âÖ X :=
  { hom := (‚Üë((-1 : units ‚Ñ§) ^ n) : ‚Ñ§) ‚Ä¢ ùüô X,
    inv := (‚Üë((-1 : units ‚Ñ§) ^ n) : ‚Ñ§) ‚Ä¢ ùüô X,
    hom_inv_id' := by simp only [zsmul_comp, id_comp, smul_smul, int.units_coe_mul_self, one_smul],
    inv_hom_id' := by simp only [zsmul_comp, id_comp, smul_smul, int.units_coe_mul_self, one_smul], },
  refine arrow.iso_mk e (iso.refl _) _,
  dsimp,
  rw [comp_id, zsmul_comp, id_comp],
end

instance W_compatible_with_shift : (W A).compatible_with_shift ‚Ñ§ :=
‚ü®begin
  have h : ‚àÄ (X Y : C) (f : X ‚ü∂ Y) (hf : (W A) f) (n : ‚Ñ§), (W A) (f‚ü¶n‚üß'),
  { rintro X Y f ‚ü®Z, g, h, H, mem‚ü© n,
    rw ‚Üê mul_mem_W_iff A _ n,
    exact ‚ü®_, _, _, triangle.shift_distinguished C _ H n, subcategory.shift A Z n mem‚ü©, },
  intro n,
  ext X Y f,
  refine ‚ü®Œª hf, _, Œª hf, h _ _ f hf n‚ü©,
   exact ((W_respects_iso A).arrow_mk_iso_iff
    ((functor.map_arrow_nat_iso_of_nat_iso
    (shift_functor_comp_shift_functor_neg C n)).app (arrow.mk f))).mp (h _ _ _ hf (-n)),
end‚ü©

variable {A}

lemma W.shift {X‚ÇÅ X‚ÇÇ : C} {f : X‚ÇÅ ‚ü∂ X‚ÇÇ} (hf : (W A) f) (n : ‚Ñ§) :
  (W A) ((shift_functor C n).map f) :=
by simpa only [(morphism_property.compatible_with_shift.iff (W A) f n)] using hf

lemma W.unshift {X‚ÇÅ X‚ÇÇ : C} {f : X‚ÇÅ ‚ü∂ X‚ÇÇ} (n : ‚Ñ§) (hf : (W A) ((shift_functor C n).map f)) :
  (W A) f :=
by simpa only [‚Üê (morphism_property.compatible_with_shift.iff (W A) f n)] using hf

variable (A)

lemma binary_product_stable (X‚ÇÅ X‚ÇÇ : C) (hX‚ÇÅ : X‚ÇÅ ‚àà A.set)
  (hX‚ÇÇ : X‚ÇÇ ‚àà A.set) : (X‚ÇÅ ‚®Ø X‚ÇÇ) ‚àà A.set :=
A.ext‚ÇÇ _ (binary_product_triangle_distinguished X‚ÇÅ X‚ÇÇ) hX‚ÇÅ hX‚ÇÇ

lemma pi_finite_stable {J : Type} [finite J]
  (X : J ‚Üí C) (hX : ‚àÄ j, X j ‚àà A.set) : (‚àè X) ‚àà A.set :=
begin
  revert hX X,
  let P : Type ‚Üí Prop := Œª J,
    ‚àÄ [hJ : finite J] (X : J ‚Üí C) (hX : ‚àÄ j, X j ‚àà A.set),
      by { haveI := hJ, exact (‚àè X) ‚àà A.set, },
  suffices : P J,
  { exact this, },
  refine finite.induction_empty_option _ _ _ J,
  { intros J‚ÇÅ J‚ÇÇ e hJ‚ÇÅ, introI, intros X hX,
    haveI : finite J‚ÇÅ := finite.of_equiv _ e.symm,
    haveI := has_product_of_equiv X e,
    exact set.respects_iso.condition A.set(product_iso_of_equiv X e)
      (hJ‚ÇÅ (X ‚àò e) (Œª j‚ÇÅ, hX _)), },
  { introI, intros X hX,
    refine set.respects_iso.condition A.set  _ A.zero,
    refine (limits.is_zero.iso_zero _).symm,
    haveI : mono (0 : ‚àè X ‚ü∂ 0),
    { constructor,
      intros Z f‚ÇÅ f‚ÇÇ hf,
      ext,
      discrete_cases,
      induction j, },
    exact limits.is_zero.of_mono (0 : ‚àè X ‚ü∂ 0) (is_zero_zero C), },
  { intro J,
    introI,
    intros hJ hJ' X hX,
    exact set.respects_iso.condition _ (product_iso_option X).symm
      (binary_product_stable A _ _ (hJ (Œª j, X (some j)) (Œª j, hX _)) (hX none)), },
end

instance W_stable_under_finite_products : (W A).stable_under_finite_products :=
‚ü®Œª J, begin
  introI,
  refine morphism_property.stable_under_products_of_shape.mk _ _ (W_respects_iso A) _,
  intros X‚ÇÅ X‚ÇÇ f hf,
  let T := Œª j, W.triangle _ (hf j),
  exact W.mk (triangle.product_distinghished T (Œª j, W.triangle_distinguished _ (hf j)))
    (pi_finite_stable A (Œª j, (T j).obj‚ÇÉ) (Œª j, W.triangle_obj‚ÇÉ_mem _ (hf j))),
end‚ü©

instance W_compatible_with_triangulation [is_triangulated C] :
  (W A).compatible_with_triangulation :=
‚ü®Œª T‚ÇÅ T‚ÇÉ hT‚ÇÅ hT‚ÇÉ a b ha hb comm, begin
  let T'‚ÇÅ := triangle.mk T‚ÇÅ.mor‚ÇÅ T‚ÇÅ.mor‚ÇÇ T‚ÇÅ.mor‚ÇÉ,
  let T'‚ÇÉ := triangle.mk T‚ÇÉ.mor‚ÇÅ T‚ÇÉ.mor‚ÇÇ T‚ÇÉ.mor‚ÇÉ,
  have mem‚ÇÅ : T'‚ÇÅ ‚àà dist_triang C := by { cases T‚ÇÅ, exact hT‚ÇÅ, },
  have mem‚ÇÉ : T'‚ÇÉ ‚àà dist_triang C := by { cases T‚ÇÉ, exact hT‚ÇÉ, },
  rcases pretriangulated.distinguished_cocone_triangle _ _ (T‚ÇÅ.mor‚ÇÅ ‚â´ b) with ‚ü®Z‚ÇÇ, g‚ÇÇ, h‚ÇÇ, mem‚ÇÇ‚ü©,
  let T'‚ÇÇ := triangle.mk (T‚ÇÅ.mor‚ÇÅ ‚â´ b) g‚ÇÇ h‚ÇÇ,
  change T'‚ÇÇ ‚àà dist_triang C at mem‚ÇÇ,
  rcases hb with ‚ü®Z‚ÇÑ, g‚ÇÑ, h‚ÇÑ, mem‚ÇÑ, mem‚ÇÑ'‚ü©,
  let H := (is_triangulated.octahedron_axiom rfl mem‚ÇÅ mem‚ÇÑ mem‚ÇÇ).some,
  let œÜ‚ÇÅ‚ÇÇ : T'‚ÇÅ ‚ü∂ T'‚ÇÇ := H.triangle_morphism‚ÇÅ,
  have hœÜ‚ÇÅ‚ÇÇ : (W A) œÜ‚ÇÅ‚ÇÇ.hom‚ÇÉ := W.mk H.mem mem‚ÇÑ',
  rcases ha with ‚ü®Z‚ÇÖ, g‚ÇÖ, h‚ÇÖ, mem‚ÇÖ, mem‚ÇÖ'‚ü©,
  let H' := (is_triangulated.octahedron_axiom comm.symm mem‚ÇÖ mem‚ÇÉ mem‚ÇÇ).some,
  let œÜ‚ÇÇ‚ÇÉ : T'‚ÇÇ ‚ü∂ T'‚ÇÉ := H'.triangle_morphism‚ÇÇ,
  have hœÜ‚ÇÇ‚ÇÉ : (W A) œÜ‚ÇÇ‚ÇÉ.hom‚ÇÉ := W.mk' H'.mem mem‚ÇÖ',
  refine ‚ü®(œÜ‚ÇÅ‚ÇÇ ‚â´ œÜ‚ÇÇ‚ÇÉ).hom‚ÇÉ, W_stable_under_composition A _ _ hœÜ‚ÇÅ‚ÇÇ hœÜ‚ÇÇ‚ÇÉ, ‚ü®_, _‚ü©‚ü©,
  { have h := (œÜ‚ÇÅ‚ÇÇ ‚â´ œÜ‚ÇÇ‚ÇÉ).comm‚ÇÇ,
    dsimp at h,
    simpa only [comp_id] using h, },
  { have h := (œÜ‚ÇÅ‚ÇÇ ‚â´ œÜ‚ÇÇ‚ÇÉ).comm‚ÇÉ,
    dsimp at h,
    simpa only [triangle_category_comp, triangle_morphism.comp_hom‚ÇÉ, id_comp] using h, },
end‚ü©

class saturated : Prop :=
(condition : ‚àÄ ‚¶ÉX Y : C‚¶Ñ (i : Y ‚ü∂ X) [hi : is_split_mono i] (hX : X ‚àà A.set), Y ‚àà A.set)

instance W_is_saturated [A.saturated] [is_triangulated C] : (W A).is_saturated :=
‚ü®Œª X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ f‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÑ h‚ÇÅ‚ÇÉ h‚ÇÇ‚ÇÑ, begin
  obtain ‚ü®Y‚ÇÅ‚ÇÉ, g‚ÇÅ‚ÇÉ, h‚ÇÅ‚ÇÉ, H‚ÇÅ‚ÇÉ, mem‚ÇÅ‚ÇÉ‚ü© := h‚ÇÅ‚ÇÉ,
  obtain ‚ü®Y‚ÇÇ‚ÇÑ, g‚ÇÇ‚ÇÑ, h‚ÇÇ‚ÇÑ, H‚ÇÇ‚ÇÑ, mem‚ÇÇ‚ÇÑ‚ü© := h‚ÇÇ‚ÇÑ,
  obtain ‚ü®Y‚ÇÅ‚ÇÇ, g‚ÇÅ‚ÇÇ, h‚ÇÅ‚ÇÇ, H‚ÇÅ‚ÇÇ‚ü© := pretriangulated.distinguished_cocone_triangle _ _ f‚ÇÅ‚ÇÇ,
  obtain ‚ü®Y‚ÇÇ‚ÇÉ, g‚ÇÇ‚ÇÉ, h‚ÇÇ‚ÇÉ, H‚ÇÇ‚ÇÉ‚ü© := pretriangulated.distinguished_cocone_triangle _ _ f‚ÇÇ‚ÇÉ,
  obtain ‚ü®Y‚ÇÉ‚ÇÑ, g‚ÇÉ‚ÇÑ, h‚ÇÉ‚ÇÑ, H‚ÇÉ‚ÇÑ‚ü© := pretriangulated.distinguished_cocone_triangle _ _ f‚ÇÉ‚ÇÑ,
  refine ‚ü®Y‚ÇÇ‚ÇÉ, g‚ÇÇ‚ÇÉ, h‚ÇÇ‚ÇÉ, H‚ÇÇ‚ÇÉ, _‚ü©,
  have H‚ÇÅ‚ÇÇ‚ÇÉ := (is_triangulated.octahedron_axiom rfl H‚ÇÅ‚ÇÇ H‚ÇÇ‚ÇÉ H‚ÇÅ‚ÇÉ).some,
  have H‚ÇÇ‚ÇÉ‚ÇÑ := (is_triangulated.octahedron_axiom rfl H‚ÇÇ‚ÇÉ H‚ÇÉ‚ÇÑ H‚ÇÇ‚ÇÑ).some,
  let s := h‚ÇÇ‚ÇÉ ‚â´ g‚ÇÅ‚ÇÇ‚ü¶1‚üß',
  let t := h‚ÇÉ‚ÇÑ ‚â´ g‚ÇÇ‚ÇÉ‚ü¶1‚üß',
  have hs : (W A) s := W.mk (rot_of_dist_triangle _ _
    (rot_of_dist_triangle _ _ H‚ÇÅ‚ÇÇ‚ÇÉ.mem)) (A.shift _ 1 mem‚ÇÅ‚ÇÉ),
  have ht : (W A) t := W.mk (rot_of_dist_triangle _ _
    (rot_of_dist_triangle _ _ H‚ÇÇ‚ÇÉ‚ÇÑ.mem)) (A.shift _ 1 mem‚ÇÇ‚ÇÑ),
  let st := t ‚â´ s‚ü¶1‚üß',
  have hst : st = 0,
  { dsimp [st],
    have eq : g‚ÇÇ‚ÇÉ ‚â´ h‚ÇÇ‚ÇÉ = 0 := triangle.comp_zero‚ÇÇ‚ÇÉ _ H‚ÇÇ‚ÇÉ,
    simp only [assoc, ‚Üê functor.map_comp, reassoc_of eq,
      zero_comp, functor.map_zero, comp_zero], },
  have hst' := W_stable_under_composition A t (s‚ü¶1‚üß') ht (hs.shift 1),
  obtain ‚ü®Z, g, h, H, mem‚ü© := hst',
  let i := (triangle.mk (t ‚â´ (shift_functor C 1).map s) g h).mor‚ÇÇ,
  haveI : mono i := mono_of_dist_triang‚ÇÇ _ H hst,
  haveI : is_split_mono i := is_split_mono_of_mono i,
  have mem‚ÇÅ‚ÇÇ := subcategory.saturated.condition i mem,
  dsimp [triangle.mk] at mem‚ÇÅ‚ÇÇ,
  rw [‚Üê A.shift_iff, ‚Üê A.shift_iff] at mem‚ÇÅ‚ÇÇ,
  exact A.ext‚ÇÉ _ H‚ÇÅ‚ÇÇ‚ÇÉ.mem mem‚ÇÅ‚ÇÇ mem‚ÇÅ‚ÇÉ,
end‚ü©

lemma test [is_triangulated C] : pretriangulated (W A).localization := infer_instance

@[protected, derive category, derive preadditive]
def category := full_subcategory A.set

instance : has_zero_object (subcategory.category A) :=
‚ü®‚ü®‚ü®0, A.zero‚ü©, ‚ü®Œª X, nonempty.intro (unique_of_subsingleton 0),
  Œª X, nonempty.intro (unique_of_subsingleton 0)‚ü©‚ü©‚ü©

@[simps]
def category.shift_functor (n : ‚Ñ§) : A.category ‚•§ A.category :=
full_subcategory.lift A.set (full_subcategory_inclusion A.set ‚ãô shift_functor C n)
  (Œª X, (A.shift_iff X.obj n).mp X.property)

@[simps]
def category.comm_shift (n : ‚Ñ§) :
  category.shift_functor A n ‚ãô full_subcategory_inclusion A.set ‚âÖ
    full_subcategory_inclusion A.set ‚ãô shift_functor C n :=
    full_subcategory.lift_comp_inclusion _ _ _

@[simps]
instance : has_shift A.category ‚Ñ§ := has_shift_of_fully_faithful
  (full_subcategory_inclusion A.set) (category.shift_functor A)
  (category.comm_shift A)

lemma category_closed_under_finite_products (J : Type) [finite J] :
  closed_under_limits_of_shape (discrete J) A.set :=
Œª F c hc mem, begin
  let X := Œª j, F.obj ‚ü®j‚ü©,
  refine set.respects_iso.condition A.set _ (A.pi_finite_stable X (Œª j, mem ‚ü®j‚ü©)),
  exact
  { hom := hc.lift (cone.mk (‚àè X) (discrete.nat_trans (by { rintro ‚ü®i‚ü©, exact pi.œÄ _ i,}))),
    inv := pi.lift (Œª i, c.œÄ.app ‚ü®i‚ü©),
    hom_inv_id' := begin
      ext i,
      discrete_cases,
      simp only [assoc, limit.lift_œÄ, fan.mk_œÄ_app, is_limit.fac, discrete.nat_trans_app, id_comp],
    end,
    inv_hom_id' := hc.hom_ext begin
      rintro ‚ü®i‚ü©,
      simp only [assoc, is_limit.fac, discrete.nat_trans_app, limit.lift_œÄ, fan.mk_œÄ_app, id_comp],
    end, },
end

instance category_has_finite_products : has_finite_products (A.category) :=
‚ü®Œª n, has_limits_of_shape_of_closed_under_limits (category_closed_under_finite_products A _)‚ü©

instance shift_functor_additive (n : ‚Ñ§) : (shift_functor A.category n).additive := infer_instance

@[simps]
def category_inclusion' : triangulated_functor_struct A.category C :=
{ comm_shift := category.comm_shift A 1,
  .. full_subcategory_inclusion A.set }

instance category_inclusion_additive : (category_inclusion' A).additive := { }

namespace category_pretriangulated

@[simp]
def distinguished_triangles : _root_.set (triangle A.category) :=
Œª T, A.category_inclusion'.map_triangle.obj T ‚àà dist_triang C

variable {A}

lemma isomorphic_distinguished (T‚ÇÅ : triangle A.category)
  (hT‚ÇÅ : T‚ÇÅ ‚àà distinguished_triangles A) (T‚ÇÇ : triangle A.category) (e : T‚ÇÇ ‚âÖ T‚ÇÅ) :
  T‚ÇÇ ‚àà distinguished_triangles A :=
pretriangulated.isomorphic_distinguished _ hT‚ÇÅ _
      (A.category_inclusion'.map_triangle.map_iso e)

lemma contractible_distinguished (X : A.category) :
  triangle.mk (ùüô X) (0 : X ‚ü∂ 0) 0 ‚àà distinguished_triangles A :=
begin
  refine pretriangulated.isomorphic_distinguished _
    (pretriangulated.contractible_distinguished (A.category_inclusion'.obj X)) _ _,
  refine triangle.mk_iso _ _ (iso.refl _) (iso.refl _) A.category_inclusion'.map_zero_object _ _ _,
  tidy,
end

lemma distinguished_cocone_triangle (X Y : A.category) (f : X ‚ü∂ Y) :
  ‚àÉ (Z : A.category) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ (shift_functor A.category (1 : ‚Ñ§)).obj X),
  triangle.mk f g h ‚àà category_pretriangulated.distinguished_triangles A :=
begin
  obtain ‚ü®Z, g, h, mem‚ü© := pretriangulated.distinguished_cocone_triangle
    _ _ ((category_inclusion' A).map f),
  refine ‚ü®‚ü®Z, A.ext‚ÇÉ _ mem X.2 Y.2,‚ü©, g, h,
    pretriangulated.isomorphic_distinguished _ mem _ _‚ü©,
  refine triangle.mk_iso _ _ (iso.refl _) (iso.refl _) (iso.refl _) (by tidy) (by tidy) _,
  dsimp,
  simp only [functor.map_id, comp_id, id_comp],
  apply comp_id,
end

lemma rotate_distinguished_triangle (T : triangle A.category) :
  T ‚àà category_pretriangulated.distinguished_triangles A ‚Üî
    T.rotate ‚àà category_pretriangulated.distinguished_triangles A :=
begin
  change (A.category_inclusion'.map_triangle.obj T ‚àà dist_triang C) ‚Üî
    (A.category_inclusion'.map_triangle.obj T.rotate ‚àà dist_triang C),
  rw pretriangulated.rotate_distinguished_triangle,
  let e := (map_triangle_rotate A.category_inclusion').app T,
  split,
  { exact Œª h, pretriangulated.isomorphic_distinguished _ h _ e.symm, },
  { exact Œª h, pretriangulated.isomorphic_distinguished _ h _ e, },
end

lemma complete_distinguished_triangle_morphism (T‚ÇÅ T‚ÇÇ : triangle A.category)
  (hT‚ÇÅ : T‚ÇÅ ‚àà distinguished_triangles A) (hT‚ÇÇ : T‚ÇÇ ‚àà distinguished_triangles A)
  (a : T‚ÇÅ.obj‚ÇÅ ‚ü∂ T‚ÇÇ.obj‚ÇÅ) (b : T‚ÇÅ.obj‚ÇÇ ‚ü∂ T‚ÇÇ.obj‚ÇÇ) (h : T‚ÇÅ.mor‚ÇÅ ‚â´ b = a ‚â´ T‚ÇÇ.mor‚ÇÅ) :
  ‚àÉ (c : T‚ÇÅ.obj‚ÇÉ ‚ü∂ T‚ÇÇ.obj‚ÇÉ), T‚ÇÅ.mor‚ÇÇ ‚â´ c = b ‚â´ T‚ÇÇ.mor‚ÇÇ ‚àß T‚ÇÅ.mor‚ÇÉ ‚â´
    (shift_functor A.category 1).map a = c ‚â´ T‚ÇÇ.mor‚ÇÉ :=
begin
  obtain ‚ü®c, ‚ü®hc‚ÇÅ, hc‚ÇÇ‚ü©‚ü© := pretriangulated.complete_distinguished_triangle_morphism
    (A.category_inclusion'.map_triangle.obj T‚ÇÅ) (A.category_inclusion'.map_triangle.obj T‚ÇÇ)
    hT‚ÇÅ hT‚ÇÇ a b h,
  refine ‚ü®c, ‚ü®hc‚ÇÅ, _‚ü©‚ü©,
  dsimp at hc‚ÇÇ,
  erw [comp_id, comp_id] at hc‚ÇÇ,
  exact hc‚ÇÇ,
end

end category_pretriangulated

instance : pretriangulated A.category :=
{ distinguished_triangles := category_pretriangulated.distinguished_triangles A,
  isomorphic_distinguished := category_pretriangulated.isomorphic_distinguished,
  contractible_distinguished := category_pretriangulated.contractible_distinguished,
  distinguished_cocone_triangle := category_pretriangulated.distinguished_cocone_triangle,
  rotate_distinguished_triangle := category_pretriangulated.rotate_distinguished_triangle,
  complete_distinguished_triangle_morphism :=
    category_pretriangulated.complete_distinguished_triangle_morphism, }

lemma dist_triang_iff {X Y Z : A.category} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß) :
  (triangle.mk f g h ‚àà dist_triang A.category) ‚Üî
    (@triangle.mk C _ _ _ _ _ f g h ‚àà dist_triang C) :=
begin
  change (_ ‚àà dist_triang C) ‚Üî _,
  let e : A.category_inclusion'.map_triangle.obj (triangle.mk f g h) ‚âÖ
    @triangle.mk C _ _ _ _ _ f g h,
  { refine triangle.mk_iso _ _ (iso.refl _) (iso.refl _) (iso.refl _) (by tidy) (by tidy) _,
    dsimp,
    erw [id_comp, functor.map_id, comp_id, comp_id], },
  split,
  { exact Œª h, pretriangulated.isomorphic_distinguished _ h _ e.symm, },
  { exact Œª h, pretriangulated.isomorphic_distinguished _ h _ e, },
end

instance [is_triangulated C] : is_triangulated A.category :=
‚ü®Œª X‚ÇÅ X‚ÇÇ X‚ÇÉ Z‚ÇÅ‚ÇÇ Z‚ÇÇ‚ÇÉ Z‚ÇÅ‚ÇÉ u‚ÇÅ‚ÇÇ u‚ÇÇ‚ÇÉ u‚ÇÅ‚ÇÉ comm v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ h‚ÇÅ‚ÇÉ, begin
  have comm' := A.category_inclusion'.congr_map comm,
  rw [functor.map_comp] at comm',
  have H := (is_triangulated.octahedron_axiom comm' h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ).some,
  obtain ‚ü®m‚ÇÅ, m‚ÇÉ, comm‚ÇÅ, comm‚ÇÇ, comm‚ÇÉ, comm‚ÇÑ, H'‚ü© := H,
  refine nonempty.intro
  { m‚ÇÅ := m‚ÇÅ,
    m‚ÇÉ := m‚ÇÉ,
    comm‚ÇÅ := comm‚ÇÅ,
    comm‚ÇÇ := begin
      erw [comp_id, comp_id] at comm‚ÇÇ,
      exact comm‚ÇÇ,
    end,
    comm‚ÇÉ := comm‚ÇÉ,
    comm‚ÇÑ := begin
      erw [comp_id, comp_id] at comm‚ÇÑ,
      exact comm‚ÇÑ,
    end,
    mem := begin
      rw dist_triang_iff,
      refine pretriangulated.isomorphic_distinguished _ H' _ _,
      refine triangle.mk_iso _ _ (iso.refl _) (iso.refl _) (iso.refl _) (by tidy) (by tidy) _,
      dsimp,
      erw [functor.map_id, comp_id, comp_id, id_comp],
      refl,
    end, }
end‚ü©

@[simps]
def category_inclusion : triangulated_functor A.category C :=
{ map_distinguished' := Œª T hT, hT,
  ..A.category_inclusion' }

def Q [is_triangulated C] : triangulated_functor C A.W.localization :=
begin
  let F := localization_functor (W A).Q (W A),
  exact F,
end

/- TODO :
1) show a universal property for the triangulated functor `L` : if
`G : D ‚•§ E` is a functor which lifts a triangulated functor `F : C ‚•§ E`
then `G` is a triangulated functor.
 -/

instance Q_to_functor_is_localization [is_triangulated C] : A.Q.to_functor.is_localization A.W :=
(infer_instance : A.W.Q.is_localization A.W)

lemma is_iso_map_iff [A.saturated] [is_triangulated C] {X Y : C} (f : X ‚ü∂ Y) : is_iso (A.Q.map f) ‚Üî A.W f :=
by convert localization.is_iso_map_iff_of_calculus_of_fractions (W A).Q (W A) f

lemma is_zero_obj_iff' [is_triangulated C] (X : C) :
  is_zero (A.Q.obj X) ‚Üî ‚àÉ (Y : C) (i : X ‚ü∂ Y) [is_split_mono i], Y ‚àà A.set :=
begin
  rw limits.is_zero.iff_id_eq_zero,
  split,
  { intro h,
    have h' : A.W.Q.map (ùüô X) = A.W.Q.map 0 :=
      by simpa only [functor.map_id, functor.map_zero] using h,
    rw right_calculus_of_fractions.L_map_eq_iff A.W.Q A.W at h',
    obtain ‚ü®Z, s, hs, eq‚ü© := h',
    rw [comp_id, comp_zero] at eq,
    obtain ‚ü®Y, i, p, H, mem‚ü© := hs,
    haveI : mono i := mono_of_dist_triang‚ÇÇ _ H eq,
    exact ‚ü®Y, i, is_split_mono_of_mono i, mem‚ü©, },
  { rintro ‚ü®Y, i, hi, mem‚ü©,
    haveI : is_iso (A.W.Q.map (0 : Y ‚ü∂ 0)) := localization.inverts A.W.Q A.W _
      (W.mk' (contractible_distinguished Y) mem),
    rw [‚Üê cancel_mono (A.W.Q.map i), id_comp, zero_comp,
      ‚Üê cancel_mono (A.W.Q.map (0 : Y ‚ü∂ 0)), functor.map_zero, comp_zero, comp_zero], },
end

lemma is_zero_obj_iff [A.saturated] [is_triangulated C] (X : C) : is_zero (A.Q.obj X) ‚Üî X ‚àà A.set :=
begin
  rw is_zero_obj_iff',
  split,
  { intro h,
    obtain ‚ü®Y, i, hi, mem‚ü© := h,
    haveI := hi,
    exact saturated.condition i mem, },
  { exact Œª h, ‚ü®X, ùüô X, infer_instance, h‚ü©, },
end

def left_orthogonal : subcategory C :=
{ set := Œª X, ‚àÄ ‚¶ÉY : C‚¶Ñ (f : X ‚ü∂ Y) (hY : Y ‚àà A.set), f = 0,
  zero := by tidy,
  shift := Œª X n h Y f hY, begin
    let adj : shift_functor C n ‚ä£ shift_functor C (-n) :=
      (add_neg_equiv (shift_monoidal_functor C ‚Ñ§) n).to_adjunction,
    apply (adj.hom_equiv _ _).injective,
    rw [(h _ (A.shift Y (-n) hY) : adj.hom_equiv _ _ f = 0),
      adjunction.hom_equiv_unit, functor.map_zero, comp_zero],
  end,
  ext‚ÇÇ := Œª T hT h‚ÇÅ h‚ÇÉ Y f hY, begin
    obtain ‚ü®g, hg‚ü© := contravariant_yoneda_exact‚ÇÇ T hT f (h‚ÇÅ _ hY),
    rw [hg, h‚ÇÉ g hY, comp_zero],
  end, }

instance left_orthogonal_saturated : A.left_orthogonal.saturated :=
‚ü®Œª X Y i hi hX Z f hZ, begin
  haveI := hi,
  have pif := retraction i,
  rw [‚Üê cancel_epi (retraction i), comp_zero],
  exact hX _ hZ,
end‚ü©

lemma left_orthogonal_comp_W_bijective (X : C) (hX : X ‚àà A.left_orthogonal.set)
  {Y Z : C} (w : Y ‚ü∂ Z) (hw : A.W w) :
  function.bijective (Œª (f : X ‚ü∂ Y), f ‚â´ w) :=
begin
  rw W_eq_W' at hw,
  obtain ‚ü®U, f, g, H, mem‚ü© := hw,
  split,
  { intros y‚ÇÅ y‚ÇÇ hy,
    let y := y‚ÇÅ - y‚ÇÇ,
    suffices : y = 0,
    { rw ‚Üê sub_eq_zero,
      exact this, },
    dsimp at hy,
    obtain ‚ü®u, hu‚ü© := covariant_yoneda_exact‚ÇÇ _ H y
      (by { dsimp [y], rw [sub_comp, hy, sub_self], }),
    rw [hu, hX u mem, zero_comp], },
  { intro z,
    obtain ‚ü®y, hy‚ü© := covariant_yoneda_exact‚ÇÉ _ H z (hX _ (A.shift _ 1 mem)),
    exact ‚ü®y, hy.symm‚ü©, },
end

lemma left_orthogonal_bijective_L_map [is_triangulated C] {D : Type*} [category D]
  (L : C ‚•§ D) [L.is_localization A.W] (X Y : C) (hX : X ‚àà A.left_orthogonal.set) :
  function.bijective (Œª (f : X ‚ü∂ Y), L.map f) :=
begin
  split,
  { intros f‚ÇÅ f‚ÇÇ hf,
    dsimp at hf,
    rw left_calculus_of_fractions.L_map_eq_iff L A.W at hf,
    rcases hf with ‚ü®Z, s, hs, eq‚ü©,
    exact (A.left_orthogonal_comp_W_bijective _ hX s hs).1 eq, },
  { intro g,
    obtain ‚ü®z, hz‚ü© := left_calculus_of_fractions.L_map_fac L A.W g,
    dsimp [left_calculus_of_fractions.map_roof] at hz,
    obtain ‚ü®f, hf‚ü© := (A.left_orthogonal_comp_W_bijective _ hX z.s z.hs).2 z.f,
    refine ‚ü®f, _‚ü©,
    dsimp at hf ‚ä¢,
    rw [hz, ‚Üê hf, L.map_comp, assoc, is_iso.hom_inv_id, comp_id], },
end

lemma left_orthogonal_bijective_Q_map [is_triangulated C] (X Y : C) (hX : X ‚àà A.left_orthogonal.set) :
  function.bijective (Œª (f : X ‚ü∂ Y), A.Q.map f) :=
A.left_orthogonal_bijective_L_map A.W.Q _ _ hX

end subcategory

end triangulated

end category_theory
