import for_mathlib.category_theory.localization.triangulated
import for_mathlib.category_theory.triangulated.pretriangulated_misc

noncomputable theory

open_locale zero_object

namespace set

open category_theory

class respects_iso {X : Type*} [category X] (A : set X) : Prop :=
(condition : ‚àÄ ‚¶Éx y : X‚¶Ñ (e : x ‚âÖ y) (hx : x ‚àà A), y ‚àà A)

end set

namespace category_theory

open limits category

namespace triangulated

open pretriangulated

variables (C : Type*) [category C] [has_zero_object C] [has_shift C ‚Ñ§]
  [preadditive C] [‚àÄ (n : ‚Ñ§), functor.additive (shift_functor C n)]
  [pretriangulated C]

structure subcategory :=
(set : set C)
(zero : (0 : C) ‚àà set)
(shift : ‚àÄ (X : C) (n : ‚Ñ§) (hX : X ‚àà set), (shift_functor C n).obj X ‚àà set)
(ext‚ÇÇ : ‚àÄ (T : triangle C) (hT : T ‚àà dist_triang C) (h‚ÇÅ : T.obj‚ÇÅ ‚àà set) (h‚ÇÉ : T.obj‚ÇÉ ‚àà set), T.obj‚ÇÇ ‚àà set)

variable {C}

namespace subcategory

variable (A : subcategory C)
lemma respects_iso : A.set.respects_iso :=
‚ü®Œª X Y e hX, A.ext‚ÇÇ _ (pretriangulated.isomorphic_distinguished _
  (pretriangulated.contractible_distinguished X) (triangle.mk C e.hom (0 : Y ‚ü∂ 0) 0)
  (triangle.mk_iso _ _ (iso.refl _) e.symm (iso.refl _) (by tidy) (by tidy) (by tidy))) hX A.zero‚ü©

lemma ext‚ÇÅ
  (T : triangle C) (hT : T ‚àà dist_triang C) (h‚ÇÇ : T.obj‚ÇÇ ‚àà A.set) (h‚ÇÉ : T.obj‚ÇÉ ‚àà A.set) :
  T.obj‚ÇÅ ‚àà A.set :=
A.ext‚ÇÇ T.inv_rotate (pretriangulated.inv_rot_of_dist_triangle C T hT) (A.shift _ (-1 : ‚Ñ§) h‚ÇÉ) h‚ÇÇ

lemma ext‚ÇÉ
  (T : triangle C) (hT : T ‚àà dist_triang C) (h‚ÇÅ : T.obj‚ÇÅ ‚àà A.set) (h‚ÇÇ : T.obj‚ÇÇ ‚àà A.set) :
  T.obj‚ÇÉ ‚àà A.set :=
A.ext‚ÇÇ T.rotate (pretriangulated.rot_of_dist_triangle C T hT) h‚ÇÇ (A.shift _ (1 : ‚Ñ§) h‚ÇÅ)

def W : morphism_property C :=
Œª X Y f, ‚àÉ (Z : C) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ (shift_functor C (1 : ‚Ñ§)).obj X)
  (H : triangle.mk C f g h ‚àà dist_triang C), Z ‚àà A.set

instance W_contains_identities : (W A).contains_identities :=
‚ü®Œª X, ‚ü®0, 0, 0, pretriangulated.contractible_distinguished X, subcategory.zero A‚ü©‚ü©

lemma W_respects_iso : (W A).respects_iso :=
begin
  split,
  { rintro X' X Y e f ‚ü®Z, g, h, mem, mem'‚ü©,
    refine ‚ü®Z, g, h ‚â´ (shift_functor C 1).map e.inv, _, mem'‚ü©,
    refine pretriangulated.isomorphic_distinguished _ mem _ _,
    refine triangle.mk_iso _ _ e (iso.refl _) (iso.refl _) (by tidy) (by tidy) _,
    dsimp,
    simp only [assoc, ‚Üê functor.map_comp, e.inv_hom_id, functor.map_id, comp_id, id_comp], },
  { rintro X Y Y' e f ‚ü®Z, g, h, mem, mem'‚ü©,
    refine ‚ü®Z, e.inv ‚â´ g, h, _, mem'‚ü©,
    refine pretriangulated.isomorphic_distinguished _ mem _ _,
    refine triangle.mk_iso _ _ (iso.refl _) e.symm (iso.refl _) (by tidy) (by tidy) (by tidy), },
end

instance : left_calculus_of_fractions (W A) :=
{ id := infer_instance,
  comp := sorry,
  ex := Œª X' X Y s hs u, begin
    obtain ‚ü®Z, f, g, H, mem‚ü© := hs,
    obtain ‚ü®Y', s', f', mem'‚ü© := pretriangulated.distinguished_cocone_triangle‚ÇÇ (g ‚â´ u‚ü¶1‚üß'),
    obtain ‚ü®b, ‚ü®hb‚ÇÅ, hb‚ÇÇ‚ü©‚ü© := pretriangulated.complete_distinguished_triangle_morphism‚ÇÇ _ _
      H mem' u (ùüô Z) (by { dsimp, rw id_comp, }),
    exact nonempty.intro ‚ü®Y', b, s', ‚ü®Z, f', g ‚â´ u‚ü¶1‚üß', mem', mem‚ü©, hb‚ÇÅ.symm‚ü©,
  end,
  ext := sorry, }

instance : right_calculus_of_fractions (W A) := sorry
instance W_compatible_with_shift : (W A).compatible_with_shift ‚Ñ§ := sorry
instance W_stable_under_finite_products : (W A).stable_under_finite_products := sorry
instance W_compatible_with_triangulation : (W A).compatible_with_triangulation := sorry
instance W_is_saturated : (W A).is_saturated := sorry

lemma test [has_finite_products C] : pretriangulated (W A).localization := infer_instance

end subcategory

end triangulated

end category_theory
