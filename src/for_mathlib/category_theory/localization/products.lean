import for_mathlib.category_theory.localization.predicate
import category_theory.products.basic
import for_mathlib.category_theory.functor_misc

noncomputable theory

universes v v' u

namespace category_theory

variables {C‚ÇÅ D‚ÇÅ C‚ÇÇ D‚ÇÇ : Type*} [category C‚ÇÅ] [category C‚ÇÇ] [category D‚ÇÅ] [category D‚ÇÇ]
  (W‚ÇÅ : morphism_property C‚ÇÅ) (W‚ÇÇ : morphism_property C‚ÇÇ) {E : Type*} [category E]

@[simps]
def nat_iso.prod {F F' : C‚ÇÅ ‚•§ D‚ÇÅ} {G G' : C‚ÇÇ ‚•§ D‚ÇÇ} (Œ± : F ‚âÖ F') (Œ≤ : G ‚âÖ G') :
  F.prod G ‚âÖ F'.prod G' :=
{ hom := Œ±.hom.prod Œ≤.hom,
  inv := Œ±.inv.prod Œ≤.inv, }

namespace equivalence

def prod (E‚ÇÅ : C‚ÇÅ ‚âå D‚ÇÅ) (E‚ÇÇ : C‚ÇÇ ‚âå D‚ÇÇ) : C‚ÇÅ √ó C‚ÇÇ ‚âå D‚ÇÅ √ó D‚ÇÇ :=
{ functor := E‚ÇÅ.functor.prod E‚ÇÇ.functor,
  inverse := E‚ÇÅ.inverse.prod E‚ÇÇ.inverse,
  unit_iso := ((functor_prod_functor_equiv (C‚ÇÅ √ó C‚ÇÇ) C‚ÇÅ C‚ÇÇ).counit_iso.app (ùü≠ _)).symm
      ‚â™‚â´ nat_iso.prod E‚ÇÅ.unit_iso E‚ÇÇ.unit_iso,
  counit_iso := nat_iso.prod E‚ÇÅ.counit_iso E‚ÇÇ.counit_iso ‚â™‚â´
      ((functor_prod_functor_equiv (D‚ÇÅ √ó D‚ÇÇ) D‚ÇÅ D‚ÇÇ).counit_iso.app (ùü≠ _)), }

end equivalence

namespace functor

@[simps]
def prod_functor : (C‚ÇÅ ‚•§ D‚ÇÅ) √ó (C‚ÇÇ ‚•§ D‚ÇÇ) ‚•§ (C‚ÇÅ √ó C‚ÇÇ) ‚•§ (D‚ÇÅ √ó D‚ÇÇ) :=
{ obj := Œª F, F.1.prod F.2,
  map := Œª F G œÜ, œÜ.1.prod œÜ.2, }

lemma flip_flip (H : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ E) : H.flip.flip = H :=
functor.ext (Œª X‚ÇÅ, (functor.ext (Œª X‚ÇÇ, rfl) (by tidy))) (by tidy)

lemma comp_comp_curry_flip_flip_eq_curry (H : D‚ÇÅ √ó D‚ÇÇ ‚•§ E) (F‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (F‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) :
  F‚ÇÅ ‚ãô (F‚ÇÇ ‚ãô (curry.obj H).flip).flip = curry.obj (F‚ÇÅ.prod F‚ÇÇ ‚ãô H) :=
functor.ext (Œª X‚ÇÅ, (functor.ext (Œª Y‚ÇÅ, rfl) (by tidy))) (by tidy)

lemma uncurry_curry (H : D‚ÇÅ √ó D‚ÇÇ ‚•§ E) : uncurry.obj (curry.obj H) = H :=
functor.ext (Œª X, by { cases X, refl, }) (by tidy)

end functor

namespace morphism_property

class contains_identities {C : Type*} [category C] (W : morphism_property C) : Prop :=
(id : ‚àÄ (X : C), W (ùüô X))

def prod : morphism_property (C‚ÇÅ √ó C‚ÇÇ) := Œª X Y f, W‚ÇÅ f.fst ‚àß W‚ÇÇ f.snd

variables {W‚ÇÅ W‚ÇÇ}

lemma is_inverted_by.prod {F‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ} {F‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ} (h‚ÇÅ : W‚ÇÅ.is_inverted_by F‚ÇÅ)
  (h‚ÇÇ : W‚ÇÇ.is_inverted_by F‚ÇÇ) : (W‚ÇÅ.prod W‚ÇÇ).is_inverted_by (F‚ÇÅ.prod F‚ÇÇ) :=
Œª X Y f hf, by { rw is_iso_prod_iff, exact ‚ü®h‚ÇÅ f.1 hf.1,h‚ÇÇ f.2 hf.2‚ü©, }

end morphism_property

namespace localization

variables [hW‚ÇÅ : W‚ÇÅ.contains_identities] [hW‚ÇÇ : W‚ÇÇ.contains_identities]

namespace strict_universal_property_fixed_target

variables  (F : C‚ÇÅ √ó C‚ÇÇ ‚•§ E) (hF : (W‚ÇÅ.prod W‚ÇÇ).is_inverted_by F)

@[simps]
def prod.hom_mk {X‚ÇÅ Y‚ÇÅ : C‚ÇÅ} {X‚ÇÇ Y‚ÇÇ : C‚ÇÇ} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) :
  (‚ü®X‚ÇÅ, X‚ÇÇ‚ü© : C‚ÇÅ √ó C‚ÇÇ) ‚ü∂ ‚ü®Y‚ÇÅ, Y‚ÇÇ‚ü© := ‚ü®f‚ÇÅ, f‚ÇÇ‚ü©

namespace prod

include hF hW‚ÇÇ
def lift‚ÇÅ : W‚ÇÅ.localization ‚•§ C‚ÇÇ ‚•§ E :=
localization.construction.lift (curry.obj F) (Œª X‚ÇÅ Y‚ÇÅ f‚ÇÅ hf‚ÇÅ, begin
  haveI : Œ† (Z‚ÇÇ : C‚ÇÇ), is_iso (((curry.obj F).map f‚ÇÅ).app Z‚ÇÇ),
  { intro Z‚ÇÇ,
    apply hF,
    exact ‚ü®hf‚ÇÅ, morphism_property.contains_identities.id _‚ü©, },
    apply nat_iso.is_iso_of_is_iso_app,
end)

lemma fac‚ÇÅ : W‚ÇÅ.Q ‚ãô (lift‚ÇÅ W‚ÇÅ W‚ÇÇ F hF) = curry.obj F := localization.construction.fac _ _

lemma lift‚ÇÅ_obj_map (X‚ÇÅ : C‚ÇÅ) {X‚ÇÇ Y‚ÇÇ : C‚ÇÇ} (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) :
  ((lift‚ÇÅ W‚ÇÅ W‚ÇÇ F hF).obj (W‚ÇÅ.Q.obj X‚ÇÅ)).map f‚ÇÇ =
    F.map (prod.hom_mk (ùüô X‚ÇÅ) f‚ÇÇ) := rfl

lemma lift‚ÇÅ_map_app {X‚ÇÅ Y‚ÇÅ : C‚ÇÅ} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) :
  ((lift‚ÇÅ W‚ÇÅ W‚ÇÇ F hF).map (W‚ÇÅ.Q.map f‚ÇÅ)).app X‚ÇÇ =
    F.map (prod.hom_mk f‚ÇÅ (ùüô X‚ÇÇ)) :=
by simpa only [functor.comp_map, eq_to_hom_refl, category.comp_id, category.id_comp,
  curry_obj_map_app] using congr_app (functor.congr_map_conjugate (fac‚ÇÅ W‚ÇÅ W‚ÇÇ F hF) f‚ÇÅ) X‚ÇÇ

include hW‚ÇÅ

def lift‚ÇÇ : W‚ÇÇ.localization ‚•§ W‚ÇÅ.localization ‚•§ E :=
localization.construction.lift (lift‚ÇÅ W‚ÇÅ W‚ÇÇ F hF).flip (Œª X‚ÇÇ Y‚ÇÇ f‚ÇÇ hf‚ÇÇ, begin
  haveI : ‚àÄ (X‚ÇÅ : W‚ÇÅ.localization), is_iso (((lift‚ÇÅ W‚ÇÅ W‚ÇÇ F hF).flip.map f‚ÇÇ).app X‚ÇÅ),
  { intro X‚ÇÅ,
    have hF‚ÇÅ : ‚àÉ (A‚ÇÅ : C‚ÇÅ), W‚ÇÅ.Q.obj A‚ÇÅ = X‚ÇÅ := (construction.obj_equiv W‚ÇÅ).surjective X‚ÇÅ,
    cases hF‚ÇÅ with A‚ÇÅ hA‚ÇÅ,
    subst hA‚ÇÅ,
    simp only [functor.flip_map_app, lift‚ÇÅ_obj_map],
    haveI := hF (prod.hom_mk (ùüô A‚ÇÅ) f‚ÇÇ) ‚ü®morphism_property.contains_identities.id _, hf‚ÇÇ‚ü©,
    apply_instance, },
  apply nat_iso.is_iso_of_is_iso_app,
end)

lemma fac‚ÇÇ : W‚ÇÇ.Q ‚ãô (lift‚ÇÇ W‚ÇÅ W‚ÇÇ F hF) = (lift‚ÇÅ W‚ÇÅ W‚ÇÇ F hF).flip :=
localization.construction.fac _ _

lemma lift‚ÇÇ_obj_map {X‚ÇÅ Y‚ÇÅ : C‚ÇÅ} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) :
  ((lift‚ÇÇ W‚ÇÅ W‚ÇÇ F hF).obj (W‚ÇÇ.Q.obj X‚ÇÇ)).map (W‚ÇÅ.Q.map f‚ÇÅ) = F.map (prod.hom_mk f‚ÇÅ (ùüô X‚ÇÇ)) :=
by simpa only [eq_to_hom_refl, functor.flip_obj_map, category.comp_id,
  category.id_comp, lift‚ÇÅ_map_app] using functor.congr_map_conjugate
    (functor.congr_obj (fac‚ÇÇ W‚ÇÅ W‚ÇÇ F hF) X‚ÇÇ) (W‚ÇÅ.Q.map f‚ÇÅ)

lemma lift‚ÇÇ_map_app (X‚ÇÅ : C‚ÇÅ) {X‚ÇÇ Y‚ÇÇ : C‚ÇÇ} (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) :
  ((lift‚ÇÇ W‚ÇÅ W‚ÇÇ F hF).map (W‚ÇÇ.Q.map f‚ÇÇ)).app (W‚ÇÅ.Q.obj X‚ÇÅ) = F.map (prod.hom_mk (ùüô X‚ÇÅ) f‚ÇÇ) :=
by simpa only [eq_to_hom_refl, category.comp_id, category.id_comp]
  using congr_app (functor.congr_map_conjugate (fac‚ÇÇ W‚ÇÅ W‚ÇÇ F hF) f‚ÇÇ) (W‚ÇÅ.Q.obj X‚ÇÅ)

def lift‚ÇÉ : W‚ÇÅ.localization √ó W‚ÇÇ.localization ‚•§ E := uncurry.obj (lift‚ÇÇ W‚ÇÅ W‚ÇÇ F hF).flip

lemma fac : W‚ÇÅ.Q.prod W‚ÇÇ.Q ‚ãô prod.lift‚ÇÉ W‚ÇÅ W‚ÇÇ F hF = F :=
begin
  refine functor.ext (Œª X, by { cases X, refl, }) (Œª X Y f, _),
  { rcases X with ‚ü®X‚ÇÅ, X‚ÇÇ‚ü©,
    rcases Y with ‚ü®Y‚ÇÅ, Y‚ÇÇ‚ü©,
    have eq : f = prod.hom_mk (ùüô X‚ÇÅ) f.2 ‚â´ prod.hom_mk f.1 (ùüô Y‚ÇÇ) :=
      by simp only [prod_comp, hom_mk_fst, category.id_comp, hom_mk_snd, category.comp_id,
        prod.mk.eta],
    nth_rewrite 0 eq,
    dsimp [functor.comp, lift‚ÇÉ],
    simp only [category.id_comp, category.comp_id, nat_trans.naturality,
      lift‚ÇÇ_obj_map, lift‚ÇÇ_map_app, ‚Üê F.map_comp],
    congr' 1,
    ext,
    { apply category.comp_id, },
    { apply category.id_comp, }, },
end

omit hF hW‚ÇÅ hW‚ÇÇ

lemma uniq (H H' : W‚ÇÅ.localization √ó W‚ÇÇ.localization ‚•§ E)
  (eq : W‚ÇÅ.Q.prod W‚ÇÇ.Q ‚ãô H = W‚ÇÅ.Q.prod W‚ÇÇ.Q ‚ãô H') : H = H' :=
begin
  let G := (curry.obj H).flip,
  let G' := (curry.obj H').flip,
  suffices : G = G',
  { rw [‚Üê functor.uncurry_curry H, ‚Üê functor.uncurry_curry H'],
    congr' 1,
    rw [‚Üê functor.flip_flip (curry.obj H), ‚Üê functor.flip_flip (curry.obj H')],
    congr', },
  apply construction.uniq,
  suffices : (W‚ÇÇ.Q ‚ãô G).flip = (W‚ÇÇ.Q ‚ãô G').flip,
  { rw [‚Üê functor.flip_flip (W‚ÇÇ.Q ‚ãô G), ‚Üê functor.flip_flip (W‚ÇÇ.Q ‚ãô G'), this], },
  apply construction.uniq,
  convert congr_arg curry.obj eq,
  all_goals { apply functor.comp_comp_curry_flip_flip_eq_curry, },
end

end prod

include hW‚ÇÅ hW‚ÇÇ

variable (E)

def prod : strict_universal_property_fixed_target (W‚ÇÅ.Q.prod W‚ÇÇ.Q) (W‚ÇÅ.prod W‚ÇÇ) E :=
{ inverts_W := (localization.inverts_W _ _).prod (localization.inverts_W _ _),
  lift := Œª F hF, prod.lift‚ÇÉ W‚ÇÅ W‚ÇÇ F hF,
  fac := Œª F hF, prod.fac W‚ÇÅ W‚ÇÇ F hF,
  uniq := Œª H H' eq, begin
    let G := (curry.obj H).flip,
    let G' := (curry.obj H').flip,
    suffices : G = G',
    { rw [‚Üê functor.uncurry_curry H, ‚Üê functor.uncurry_curry H'],
      congr' 1,
      rw [‚Üê functor.flip_flip (curry.obj H), ‚Üê functor.flip_flip (curry.obj H')],
      congr', },
    apply construction.uniq,
    suffices : (W‚ÇÇ.Q ‚ãô G).flip = (W‚ÇÇ.Q ‚ãô G').flip,
    { rw [‚Üê functor.flip_flip (W‚ÇÇ.Q ‚ãô G), ‚Üê functor.flip_flip (W‚ÇÇ.Q ‚ãô G'), this], },
    apply construction.uniq,
    convert congr_arg curry.obj eq,
    all_goals { apply functor.comp_comp_curry_flip_flip_eq_curry, },
  end, }

end strict_universal_property_fixed_target

include hW‚ÇÅ hW‚ÇÇ

instance prod_construction_is_localization : (W‚ÇÅ.Q.prod W‚ÇÇ.Q).is_localization (W‚ÇÅ.prod W‚ÇÇ) :=
functor.is_localization.mk' _ _
  (strict_universal_property_fixed_target.prod W‚ÇÅ W‚ÇÇ _)
  (strict_universal_property_fixed_target.prod W‚ÇÅ W‚ÇÇ _)

lemma prod_is_localization (L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ)
  [L‚ÇÅ.is_localization W‚ÇÅ] [L‚ÇÇ.is_localization W‚ÇÇ] :
  (L‚ÇÅ.prod L‚ÇÇ).is_localization (W‚ÇÅ.prod W‚ÇÇ) :=
begin
  let E‚ÇÅ := equivalence_from_model L‚ÇÅ W‚ÇÅ,
  let E‚ÇÇ := equivalence_from_model L‚ÇÇ W‚ÇÇ,
  let e‚ÇÅ : W‚ÇÅ.Q ‚ãô E‚ÇÅ.functor ‚âÖ L‚ÇÅ := Q_comp_equivalence_from_model_functor_iso _ _,
  let e‚ÇÇ : W‚ÇÇ.Q ‚ãô E‚ÇÇ.functor ‚âÖ L‚ÇÇ := Q_comp_equivalence_from_model_functor_iso _ _,
  exact functor.is_localization.of_equivalence (W‚ÇÅ.Q.prod W‚ÇÇ.Q) (W‚ÇÅ.prod W‚ÇÇ) (L‚ÇÅ.prod L‚ÇÇ)
    (E‚ÇÅ.prod E‚ÇÇ) (functor.prod_functor.map_iso (e‚ÇÅ.prod e‚ÇÇ)),
end

end localization

end category_theory
