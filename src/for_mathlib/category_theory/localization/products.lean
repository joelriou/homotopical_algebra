import for_mathlib.category_theory.localization.predicate
import category_theory.products.basic
import for_mathlib.category_theory.functor_misc

noncomputable theory

universes v v' u

namespace category_theory

variables {C‚ÇÅ D‚ÇÅ C‚ÇÇ D‚ÇÇ : Type*} [category C‚ÇÅ] [category C‚ÇÇ] [category D‚ÇÅ] [category D‚ÇÇ]
(W‚ÇÅ : morphism_property C‚ÇÅ) (W‚ÇÇ : morphism_property C‚ÇÇ)

namespace morphism_property

def prod : morphism_property (C‚ÇÅ √ó C‚ÇÇ) :=
Œª X Y f, W‚ÇÅ f.fst ‚àß W‚ÇÇ f.snd

variables {W‚ÇÅ W‚ÇÇ}

lemma is_inverted_by.prod {F‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ} {F‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ} (h‚ÇÅ : W‚ÇÅ.is_inverted_by F‚ÇÅ)
  (h‚ÇÇ : W‚ÇÇ.is_inverted_by F‚ÇÇ) : (W‚ÇÅ.prod W‚ÇÇ).is_inverted_by (F‚ÇÅ.prod F‚ÇÇ) :=
Œª X Y f hf, by { rw is_iso_prod_iff, exact ‚ü®h‚ÇÅ f.1 hf.1,h‚ÇÇ f.2 hf.2‚ü©, }

end morphism_property

namespace localization

namespace strict_universal_property_fixed_target

section

variables {E : Type*} [category E] (F‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (F‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ)
  (hW‚ÇÅ : ‚àÄ (X‚ÇÅ : C‚ÇÅ), W‚ÇÅ (ùüô X‚ÇÅ)) (hW‚ÇÇ : ‚àÄ (X‚ÇÇ : C‚ÇÇ), W‚ÇÇ (ùüô X‚ÇÇ))
  (h‚ÇÅ : strict_universal_property_fixed_target F‚ÇÅ W‚ÇÅ (C‚ÇÇ ‚•§ E))
  (h‚ÇÇ : strict_universal_property_fixed_target F‚ÇÇ W‚ÇÇ (D‚ÇÅ ‚•§ E))
  (F : C‚ÇÅ √ó C‚ÇÇ ‚•§ E) (hF : (W‚ÇÅ.prod W‚ÇÇ).is_inverted_by F)

def prod.hom_mk {X‚ÇÅ Y‚ÇÅ : C‚ÇÅ} {X‚ÇÇ Y‚ÇÇ : C‚ÇÇ} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) :
  (‚ü®X‚ÇÅ, X‚ÇÇ‚ü© : C‚ÇÅ √ó C‚ÇÇ) ‚ü∂ ‚ü®Y‚ÇÅ, Y‚ÇÇ‚ü© := ‚ü®f‚ÇÅ, f‚ÇÇ‚ü©

include hW‚ÇÇ hF
def lift‚ÇÅ : D‚ÇÅ ‚•§ C‚ÇÇ ‚•§ E := h‚ÇÅ.lift (curry.obj F) (Œª X‚ÇÅ Y‚ÇÅ f‚ÇÅ hf‚ÇÅ, begin
  haveI : Œ† (Z‚ÇÇ : C‚ÇÇ), is_iso (((curry.obj F).map f‚ÇÅ).app Z‚ÇÇ),
  { intro Z‚ÇÇ,
    apply hF,
    exact ‚ü®hf‚ÇÅ, hW‚ÇÇ _‚ü©, },
    apply nat_iso.is_iso_of_is_iso_app,
end)

def fac‚ÇÅ : F‚ÇÅ ‚ãô (lift‚ÇÅ W‚ÇÅ W‚ÇÇ F‚ÇÅ hW‚ÇÇ h‚ÇÅ F hF) = curry.obj F := h‚ÇÅ.fac _ _

def lift‚ÇÅ_obj_obj (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) :
  ((lift‚ÇÅ W‚ÇÅ W‚ÇÇ F‚ÇÅ hW‚ÇÇ h‚ÇÅ F hF).obj (F‚ÇÅ.obj X‚ÇÅ)).obj X‚ÇÇ = F.obj ‚ü®X‚ÇÅ, X‚ÇÇ‚ü© :=
functor.congr_obj (functor.congr_obj (fac‚ÇÅ W‚ÇÅ W‚ÇÇ F‚ÇÅ hW‚ÇÇ h‚ÇÅ F hF) X‚ÇÅ) X‚ÇÇ

@[simp]
def lift‚ÇÅ_obj_map (X‚ÇÅ : C‚ÇÅ) {X‚ÇÇ Y‚ÇÇ : C‚ÇÇ} (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) :
  ((lift‚ÇÅ W‚ÇÅ W‚ÇÇ F‚ÇÅ hW‚ÇÇ h‚ÇÅ F hF).obj (F‚ÇÅ.obj X‚ÇÅ)).map f‚ÇÇ =
    eq_to_hom (by rw lift‚ÇÅ_obj_obj) ‚â´ F.map (prod.hom_mk (ùüô X‚ÇÅ) f‚ÇÇ) ‚â´ eq_to_hom (by rw lift‚ÇÅ_obj_obj) :=
functor.congr_map_conjugate (functor.congr_obj (fac‚ÇÅ W‚ÇÅ W‚ÇÇ F‚ÇÅ hW‚ÇÇ h‚ÇÅ F hF) X‚ÇÅ) f‚ÇÇ

def lift‚ÇÅ_map‚ÇÅ {X‚ÇÅ Y‚ÇÅ : C‚ÇÅ} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) :
  ((lift‚ÇÅ W‚ÇÅ W‚ÇÇ F‚ÇÅ hW‚ÇÇ h‚ÇÅ F hF).map (F‚ÇÅ.map f‚ÇÅ)).app X‚ÇÇ =
    eq_to_hom (by rw lift‚ÇÅ_obj_obj) ‚â´ F.map (prod.hom_mk f‚ÇÅ (ùüô X‚ÇÇ)) ‚â´ eq_to_hom (by rw lift‚ÇÅ_obj_obj) :=
by simpa only [nat_trans.comp_app, eq_to_hom_app]
  using congr_app (functor.congr_map_conjugate (fac‚ÇÅ W‚ÇÅ W‚ÇÇ F‚ÇÅ hW‚ÇÇ h‚ÇÅ F hF) f‚ÇÅ) X‚ÇÇ

include hW‚ÇÅ

def lift‚ÇÇ : D‚ÇÇ ‚•§ D‚ÇÅ ‚•§ E := h‚ÇÇ.lift (lift‚ÇÅ W‚ÇÅ W‚ÇÇ F‚ÇÅ hW‚ÇÇ h‚ÇÅ F hF).flip (Œª X‚ÇÇ Y‚ÇÇ f‚ÇÇ hf‚ÇÇ, begin
  haveI : ‚àÄ (X‚ÇÅ : D‚ÇÅ), is_iso (((lift‚ÇÅ W‚ÇÅ W‚ÇÇ F‚ÇÅ hW‚ÇÇ h‚ÇÅ F hF).flip.map f‚ÇÇ).app X‚ÇÅ),
  { intro X‚ÇÅ,
    have hF‚ÇÅ : ‚àÉ (A‚ÇÅ : C‚ÇÅ), X‚ÇÅ = F‚ÇÅ.obj A‚ÇÅ := sorry,
    cases hF‚ÇÅ with A‚ÇÅ hA‚ÇÅ,
    subst hA‚ÇÅ,
    simp only [functor.flip_map_app, lift‚ÇÅ_obj_map],
    haveI := hF (prod.hom_mk (ùüô A‚ÇÅ) f‚ÇÇ) ‚ü®hW‚ÇÅ _, hf‚ÇÇ‚ü©,
    apply_instance, },
  apply nat_iso.is_iso_of_is_iso_app,
end)

def lift‚ÇÉ : D‚ÇÅ √ó D‚ÇÇ ‚•§ E := uncurry.obj (lift‚ÇÇ W‚ÇÅ W‚ÇÇ F‚ÇÅ F‚ÇÇ hW‚ÇÅ hW‚ÇÇ h‚ÇÅ h‚ÇÇ F hF).flip

def prod : strict_universal_property_fixed_target (F‚ÇÅ.prod F‚ÇÇ) (W‚ÇÅ.prod W‚ÇÇ) E :=
{ inverts_W := h‚ÇÅ.inverts_W.prod h‚ÇÇ.inverts_W,
  lift := Œª F hF, lift‚ÇÉ W‚ÇÅ W‚ÇÇ F‚ÇÅ F‚ÇÇ hW‚ÇÅ hW‚ÇÇ h‚ÇÅ h‚ÇÇ F hF,
  fac := sorry,
  uniq := sorry, }

end

end strict_universal_property_fixed_target

end localization

lemma prod_is_localization (L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ)
  [L‚ÇÅ.is_localization W‚ÇÅ] [L‚ÇÇ.is_localization W‚ÇÇ] :
  (L‚ÇÅ.prod L‚ÇÇ).is_localization (W‚ÇÅ.prod W‚ÇÇ) := sorry

end category_theory
