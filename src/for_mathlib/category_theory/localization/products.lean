import for_mathlib.category_theory.localization.equivalence
import category_theory.products.basic
import for_mathlib.category_theory.functor_misc

noncomputable theory

universes v v' u u'

namespace category_theory

lemma morphism_property.of_arrow_eq {C : Type*} [category C] (W : morphism_property C)
  (f‚ÇÅ f‚ÇÇ : arrow C) (hf‚ÇÇ : W f‚ÇÇ.hom) (eq : f‚ÇÅ = f‚ÇÇ) : W f‚ÇÅ.hom := by { subst eq, exact hf‚ÇÇ, }

lemma morphism_property.of_arrow_mk_eq {C : Type*} [category C] (W : morphism_property C)
  {X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ : C} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (hf‚ÇÇ : W f‚ÇÇ) (eq : arrow.mk f‚ÇÅ = arrow.mk f‚ÇÇ) :
  W f‚ÇÅ :=
W.of_arrow_eq (arrow.mk f‚ÇÅ) (arrow.mk f‚ÇÇ) hf‚ÇÇ eq

lemma functor.congr_map_arrow_obj_arrow_mk {C D : Type*} [category C] [category D]
  {F‚ÇÅ F‚ÇÇ : C ‚•§ D} (eq : F‚ÇÅ = F‚ÇÇ) {X Y : C} (f : X ‚ü∂ Y) :
  F‚ÇÅ.map_arrow.obj (arrow.mk f) = F‚ÇÇ.map_arrow.obj (arrow.mk f) := by subst eq

section

variables {C‚ÇÅ D‚ÇÅ C‚ÇÇ D‚ÇÇ : Type*} [category C‚ÇÅ] [category C‚ÇÇ] [category D‚ÇÅ] [category D‚ÇÇ]
  (W‚ÇÅ : morphism_property C‚ÇÅ) (W‚ÇÇ : morphism_property C‚ÇÇ) {E : Type*} [category E]

@[simps]
def nat_iso.prod {F F' : C‚ÇÅ ‚•§ D‚ÇÅ} {G G' : C‚ÇÇ ‚•§ D‚ÇÇ} (Œ± : F ‚âÖ F') (Œ≤ : G ‚âÖ G') :
  F.prod G ‚âÖ F'.prod G' :=
{ hom := Œ±.hom.prod Œ≤.hom,
  inv := Œ±.inv.prod Œ≤.inv, }

namespace equivalence

def prod (E‚ÇÅ : C‚ÇÅ ‚âå D‚ÇÅ) (E‚ÇÇ : C‚ÇÇ ‚âå D‚ÇÇ) : C‚ÇÅ √ó C‚ÇÇ ‚âå D‚ÇÅ √ó D‚ÇÇ :=
{ functor := E‚ÇÅ.functor.prod E‚ÇÇ.functor,
  inverse := E‚ÇÅ.inverse.prod E‚ÇÇ.inverse,
  unit_iso := ((functor_prod_functor_equiv (C‚ÇÅ √ó C‚ÇÇ) C‚ÇÅ C‚ÇÇ).counit_iso.app (ùü≠ _)).symm
      ‚â™‚â´ nat_iso.prod E‚ÇÅ.unit_iso E‚ÇÇ.unit_iso,
  counit_iso := nat_iso.prod E‚ÇÅ.counit_iso E‚ÇÇ.counit_iso ‚â™‚â´
      ((functor_prod_functor_equiv (D‚ÇÅ √ó D‚ÇÇ) D‚ÇÅ D‚ÇÇ).counit_iso.app (ùü≠ _)), }

end equivalence

namespace functor

@[simps]
def prod_functor : (C‚ÇÅ ‚•§ D‚ÇÅ) √ó (C‚ÇÇ ‚•§ D‚ÇÇ) ‚•§ (C‚ÇÅ √ó C‚ÇÇ) ‚•§ (D‚ÇÅ √ó D‚ÇÇ) :=
{ obj := Œª F, F.1.prod F.2,
  map := Œª F G œÜ, œÜ.1.prod œÜ.2, }

lemma flip_flip (H : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ E) : H.flip.flip = H :=
functor.ext (Œª X‚ÇÅ, (functor.ext (Œª X‚ÇÇ, rfl) (by tidy))) (by tidy)

lemma comp_comp_curry_flip_flip_eq_curry (H : D‚ÇÅ √ó D‚ÇÇ ‚•§ E) (F‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (F‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) :
  F‚ÇÅ ‚ãô (F‚ÇÇ ‚ãô (curry.obj H).flip).flip = curry.obj (F‚ÇÅ.prod F‚ÇÇ ‚ãô H) :=
functor.ext (Œª X‚ÇÅ, (functor.ext (Œª Y‚ÇÅ, rfl) (by tidy))) (by tidy)

lemma uncurry_curry (H : D‚ÇÅ √ó D‚ÇÇ ‚•§ E) : uncurry.obj (curry.obj H) = H :=
functor.ext (Œª X, by { cases X, refl, }) (by tidy)

end functor

namespace morphism_property

class contains_identities {C : Type*} [category C] (W : morphism_property C) : Prop :=
(id [] : ‚àÄ (X : C), W (ùüô X))

def prod : morphism_property (C‚ÇÅ √ó C‚ÇÇ) := Œª X Y f, W‚ÇÅ f.fst ‚àß W‚ÇÇ f.snd

variables {W‚ÇÅ W‚ÇÇ}

lemma is_inverted_by.prod {F‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ} {F‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ} (h‚ÇÅ : W‚ÇÅ.is_inverted_by F‚ÇÅ)
  (h‚ÇÇ : W‚ÇÇ.is_inverted_by F‚ÇÇ) : (W‚ÇÅ.prod W‚ÇÇ).is_inverted_by (F‚ÇÅ.prod F‚ÇÇ) :=
Œª X Y f hf, by { rw is_iso_prod_iff, exact ‚ü®h‚ÇÅ f.1 hf.1,h‚ÇÇ f.2 hf.2‚ü©, }

end morphism_property

namespace localization

variables [hW‚ÇÅ : W‚ÇÅ.contains_identities] [hW‚ÇÇ : W‚ÇÇ.contains_identities]

namespace strict_universal_property_fixed_target

variables  (F : C‚ÇÅ √ó C‚ÇÇ ‚•§ E) (hF : (W‚ÇÅ.prod W‚ÇÇ).is_inverted_by F)

@[simps]
def prod.hom_mk {X‚ÇÅ Y‚ÇÅ : C‚ÇÅ} {X‚ÇÇ Y‚ÇÇ : C‚ÇÇ} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) :
  (‚ü®X‚ÇÅ, X‚ÇÇ‚ü© : C‚ÇÅ √ó C‚ÇÇ) ‚ü∂ ‚ü®Y‚ÇÅ, Y‚ÇÇ‚ü© := ‚ü®f‚ÇÅ, f‚ÇÇ‚ü©

namespace prod

include hF hW‚ÇÇ
def lift‚ÇÅ : W‚ÇÅ.localization ‚•§ C‚ÇÇ ‚•§ E :=
localization.construction.lift (curry.obj F) (Œª X‚ÇÅ Y‚ÇÅ f‚ÇÅ hf‚ÇÅ, begin
  haveI : Œ† (Z‚ÇÇ : C‚ÇÇ), is_iso (((curry.obj F).map f‚ÇÅ).app Z‚ÇÇ),
  { intro Z‚ÇÇ,
    apply hF,
    exact ‚ü®hf‚ÇÅ, morphism_property.contains_identities.id _ _‚ü©, },
    apply nat_iso.is_iso_of_is_iso_app,
end)

lemma fac‚ÇÅ : W‚ÇÅ.Q ‚ãô (lift‚ÇÅ W‚ÇÅ W‚ÇÇ F hF) = curry.obj F := localization.construction.fac _ _

lemma lift‚ÇÅ_obj_map (X‚ÇÅ : C‚ÇÅ) {X‚ÇÇ Y‚ÇÇ : C‚ÇÇ} (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) :
  ((lift‚ÇÅ W‚ÇÅ W‚ÇÇ F hF).obj (W‚ÇÅ.Q.obj X‚ÇÅ)).map f‚ÇÇ =
    F.map (prod.hom_mk (ùüô X‚ÇÅ) f‚ÇÇ) := rfl

lemma lift‚ÇÅ_map_app {X‚ÇÅ Y‚ÇÅ : C‚ÇÅ} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) :
  ((lift‚ÇÅ W‚ÇÅ W‚ÇÇ F hF).map (W‚ÇÅ.Q.map f‚ÇÅ)).app X‚ÇÇ =
    F.map (prod.hom_mk f‚ÇÅ (ùüô X‚ÇÇ)) :=
by simpa only [functor.comp_map, eq_to_hom_refl, category.comp_id, category.id_comp,
  curry_obj_map_app] using congr_app (functor.congr_map_conjugate (fac‚ÇÅ W‚ÇÅ W‚ÇÇ F hF) f‚ÇÅ) X‚ÇÇ

include hW‚ÇÅ

def lift‚ÇÇ : W‚ÇÇ.localization ‚•§ W‚ÇÅ.localization ‚•§ E :=
localization.construction.lift (lift‚ÇÅ W‚ÇÅ W‚ÇÇ F hF).flip (Œª X‚ÇÇ Y‚ÇÇ f‚ÇÇ hf‚ÇÇ, begin
  haveI : ‚àÄ (X‚ÇÅ : W‚ÇÅ.localization), is_iso (((lift‚ÇÅ W‚ÇÅ W‚ÇÇ F hF).flip.map f‚ÇÇ).app X‚ÇÅ),
  { intro X‚ÇÅ,
    have hF‚ÇÅ : ‚àÉ (A‚ÇÅ : C‚ÇÅ), W‚ÇÅ.Q.obj A‚ÇÅ = X‚ÇÅ := (construction.obj_equiv W‚ÇÅ).surjective X‚ÇÅ,
    cases hF‚ÇÅ with A‚ÇÅ hA‚ÇÅ,
    subst hA‚ÇÅ,
    simp only [functor.flip_map_app, lift‚ÇÅ_obj_map],
    haveI := hF (prod.hom_mk (ùüô A‚ÇÅ) f‚ÇÇ) ‚ü®morphism_property.contains_identities.id _ _, hf‚ÇÇ‚ü©,
    apply_instance, },
  apply nat_iso.is_iso_of_is_iso_app,
end)

lemma fac‚ÇÇ : W‚ÇÇ.Q ‚ãô (lift‚ÇÇ W‚ÇÅ W‚ÇÇ F hF) = (lift‚ÇÅ W‚ÇÅ W‚ÇÇ F hF).flip :=
localization.construction.fac _ _

lemma lift‚ÇÇ_obj_map {X‚ÇÅ Y‚ÇÅ : C‚ÇÅ} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) :
  ((lift‚ÇÇ W‚ÇÅ W‚ÇÇ F hF).obj (W‚ÇÇ.Q.obj X‚ÇÇ)).map (W‚ÇÅ.Q.map f‚ÇÅ) = F.map (prod.hom_mk f‚ÇÅ (ùüô X‚ÇÇ)) :=
by simpa only [eq_to_hom_refl, functor.flip_obj_map, category.comp_id,
  category.id_comp, lift‚ÇÅ_map_app] using functor.congr_map_conjugate
    (functor.congr_obj (fac‚ÇÇ W‚ÇÅ W‚ÇÇ F hF) X‚ÇÇ) (W‚ÇÅ.Q.map f‚ÇÅ)

lemma lift‚ÇÇ_map_app (X‚ÇÅ : C‚ÇÅ) {X‚ÇÇ Y‚ÇÇ : C‚ÇÇ} (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) :
  ((lift‚ÇÇ W‚ÇÅ W‚ÇÇ F hF).map (W‚ÇÇ.Q.map f‚ÇÇ)).app (W‚ÇÅ.Q.obj X‚ÇÅ) = F.map (prod.hom_mk (ùüô X‚ÇÅ) f‚ÇÇ) :=
by simpa only [eq_to_hom_refl, category.comp_id, category.id_comp]
  using congr_app (functor.congr_map_conjugate (fac‚ÇÇ W‚ÇÅ W‚ÇÇ F hF) f‚ÇÇ) (W‚ÇÅ.Q.obj X‚ÇÅ)

def lift‚ÇÉ : W‚ÇÅ.localization √ó W‚ÇÇ.localization ‚•§ E := uncurry.obj (lift‚ÇÇ W‚ÇÅ W‚ÇÇ F hF).flip

lemma fac : W‚ÇÅ.Q.prod W‚ÇÇ.Q ‚ãô prod.lift‚ÇÉ W‚ÇÅ W‚ÇÇ F hF = F :=
begin
  refine functor.ext (Œª X, by { cases X, refl, }) (Œª X Y f, _),
  { rcases X with ‚ü®X‚ÇÅ, X‚ÇÇ‚ü©,
    rcases Y with ‚ü®Y‚ÇÅ, Y‚ÇÇ‚ü©,
    have eq : f = prod.hom_mk (ùüô X‚ÇÅ) f.2 ‚â´ prod.hom_mk f.1 (ùüô Y‚ÇÇ) :=
      by simp only [prod_comp, hom_mk_fst, category.id_comp, hom_mk_snd, category.comp_id,
        prod.mk.eta],
    nth_rewrite 0 eq,
    dsimp [functor.comp, lift‚ÇÉ],
    simp only [category.id_comp, category.comp_id, nat_trans.naturality,
      lift‚ÇÇ_obj_map, lift‚ÇÇ_map_app, ‚Üê F.map_comp],
    congr' 1,
    ext,
    { apply category.comp_id, },
    { apply category.id_comp, }, },
end

omit hF hW‚ÇÅ hW‚ÇÇ

lemma uniq (H H' : W‚ÇÅ.localization √ó W‚ÇÇ.localization ‚•§ E)
  (eq : W‚ÇÅ.Q.prod W‚ÇÇ.Q ‚ãô H = W‚ÇÅ.Q.prod W‚ÇÇ.Q ‚ãô H') : H = H' :=
begin
  let G := (curry.obj H).flip,
  let G' := (curry.obj H').flip,
  suffices : G = G',
  { rw [‚Üê functor.uncurry_curry H, ‚Üê functor.uncurry_curry H'],
    congr' 1,
    rw [‚Üê functor.flip_flip (curry.obj H), ‚Üê functor.flip_flip (curry.obj H')],
    congr', },
  apply construction.uniq,
  suffices : (W‚ÇÇ.Q ‚ãô G).flip = (W‚ÇÇ.Q ‚ãô G').flip,
  { rw [‚Üê functor.flip_flip (W‚ÇÇ.Q ‚ãô G), ‚Üê functor.flip_flip (W‚ÇÇ.Q ‚ãô G'), this], },
  apply construction.uniq,
  convert congr_arg curry.obj eq,
  all_goals { apply functor.comp_comp_curry_flip_flip_eq_curry, },
end

end prod

include hW‚ÇÅ hW‚ÇÇ

variable (E)

def prod : strict_universal_property_fixed_target (W‚ÇÅ.Q.prod W‚ÇÇ.Q) (W‚ÇÅ.prod W‚ÇÇ) E :=
{ inverts := (localization.inverts _ _).prod (localization.inverts _ _),
  lift := Œª F hF, prod.lift‚ÇÉ W‚ÇÅ W‚ÇÇ F hF,
  fac := Œª F hF, prod.fac W‚ÇÅ W‚ÇÇ F hF,
  uniq := Œª H H' eq, begin
    let G := (curry.obj H).flip,
    let G' := (curry.obj H').flip,
    suffices : G = G',
    { rw [‚Üê functor.uncurry_curry H, ‚Üê functor.uncurry_curry H'],
      congr' 1,
      rw [‚Üê functor.flip_flip (curry.obj H), ‚Üê functor.flip_flip (curry.obj H')],
      congr', },
    apply construction.uniq,
    suffices : (W‚ÇÇ.Q ‚ãô G).flip = (W‚ÇÇ.Q ‚ãô G').flip,
    { rw [‚Üê functor.flip_flip (W‚ÇÇ.Q ‚ãô G), ‚Üê functor.flip_flip (W‚ÇÇ.Q ‚ãô G'), this], },
    apply construction.uniq,
    convert congr_arg curry.obj eq,
    all_goals { apply functor.comp_comp_curry_flip_flip_eq_curry, },
  end, }

end strict_universal_property_fixed_target

include hW‚ÇÅ hW‚ÇÇ

instance prod_construction_is_localization : (W‚ÇÅ.Q.prod W‚ÇÇ.Q).is_localization (W‚ÇÅ.prod W‚ÇÇ) :=
functor.is_localization.mk' _ _
  (strict_universal_property_fixed_target.prod W‚ÇÅ W‚ÇÇ _)
  (strict_universal_property_fixed_target.prod W‚ÇÅ W‚ÇÇ _)

lemma prod_is_localization (L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ)
  [L‚ÇÅ.is_localization W‚ÇÅ] [L‚ÇÇ.is_localization W‚ÇÇ] :
  (L‚ÇÅ.prod L‚ÇÇ).is_localization (W‚ÇÅ.prod W‚ÇÇ) :=
begin
  let E‚ÇÅ := equivalence_from_model L‚ÇÅ W‚ÇÅ,
  let E‚ÇÇ := equivalence_from_model L‚ÇÇ W‚ÇÇ,
  let e‚ÇÅ : W‚ÇÅ.Q ‚ãô E‚ÇÅ.functor ‚âÖ L‚ÇÅ := Q_comp_equivalence_from_model_functor_iso _ _,
  let e‚ÇÇ : W‚ÇÇ.Q ‚ãô E‚ÇÇ.functor ‚âÖ L‚ÇÇ := Q_comp_equivalence_from_model_functor_iso _ _,
  exact functor.is_localization.of_equivalence (W‚ÇÅ.Q.prod W‚ÇÇ.Q) (W‚ÇÅ.prod W‚ÇÇ) (L‚ÇÅ.prod L‚ÇÇ)
    (E‚ÇÅ.prod E‚ÇÇ) (functor.prod_functor.map_iso (e‚ÇÅ.prod e‚ÇÇ)),
end

end localization

section

variables {J : Type*} {C : J ‚Üí Type*} {D : J ‚Üí Type*}
  [Œ† j, category (C j)] [Œ† j, category (D j)]
  (W : Œ† j, morphism_property (C j))
  [hW : ‚àÄ j, (W j).contains_identities]
  (L : Œ† j, C j ‚•§ D j) [Œ† j, (L j).is_localization (W j)]

instance : category (Œ† j, C j) :=
{ hom := Œª X Y, Œ† j, X j ‚ü∂ Y j,
  id := Œª X j, ùüô (X j),
  comp := Œª X Y Z f g j, f j ‚â´ g j, }

@[simps]
def functor.pi_ (F : Œ† j, C j ‚•§ D j) : (Œ† j, C j) ‚•§ (Œ† j, D j) :=
{ obj := Œª X j, (F j).obj (X j),
  map := Œª X Y f j, (F j).map (f j), }

@[simps]
def functor.pi'_ (F : Œ† j, E ‚•§ D j) : E ‚•§ (Œ† j, D j) :=
{ obj := Œª X j, (F j).obj X,
  map := Œª X Y f j, (F j).map f, }

@[simps]
def nat_trans.pi_ {F G : Œ† j, C j ‚•§ D j} (e : Œ† j, F j ‚ü∂ G j) :
  functor.pi_ F ‚ü∂ functor.pi_ G :=
{ app := Œª X j, (e j).app (X j), }

@[simps]
def nat_iso.pi {F G : Œ† j, C j ‚•§ D j} (e : Œ† j, F j ‚âÖ G j) :
  functor.pi_ F ‚âÖ functor.pi_ G :=
{ hom := nat_trans.pi_ (Œª j, (e j).hom),
  inv := nat_trans.pi_ (Œª j, (e j).inv), }

@[simps]
def nat_trans.pi'_ {F G : Œ† j, E ‚•§ D j} (e : Œ† j, F j ‚ü∂ G j) :
  functor.pi'_ F ‚ü∂ functor.pi'_ G :=
{ app := Œª X j, (e j).app X, }

@[simps]
def nat_iso.pi'_ {F G : Œ† j, E ‚•§ D j} (e : Œ† j, F j ‚âÖ G j) :
  functor.pi'_ F ‚âÖ functor.pi'_ G :=
{ hom := nat_trans.pi'_ (Œª j, (e j).hom),
  inv := nat_trans.pi'_ (Œª j, (e j).inv), }

@[simps]
def equivalence.pi (e : Œ† j, C j ‚âå D j) : (Œ† j, C j) ‚âå (Œ† j, D j) :=
{ functor := functor.pi_ (Œª j, (e j).functor),
  inverse := functor.pi_ (Œª j, (e j).inverse),
  unit_iso := nat_iso.pi (Œª j, (e j).unit_iso),
  counit_iso := nat_iso.pi (Œª j, (e j).counit_iso), }

variable (C)

@[simps]
def functor.pi_.eval (j : J) : (Œ† j, C j) ‚•§ C j :=
{ obj := Œª X, X j,
  map := Œª X Y f, f j, }

variable {C}

@[simp]
lemma functor.pi_eval (F : Œ† j, C j ‚•§ D j) (j : J) :
  functor.pi_ F ‚ãô functor.pi_.eval _ j = functor.pi_.eval _ j ‚ãô F j := rfl

@[simp]
def functor.pi'__eval (F : Œ† j, E ‚•§ D j) (j : J) :
  functor.pi'_ F ‚ãô functor.pi_.eval _ j = F j :=
functor.ext (Œª X, rfl) (by tidy)

lemma functor.pi_.ext {F‚ÇÅ F‚ÇÇ : E ‚•§ (Œ† j, C j)}
  (h : ‚àÄ (j : J), F‚ÇÅ ‚ãô functor.pi_.eval _ j = F‚ÇÇ ‚ãô functor.pi_.eval _ j) : F‚ÇÅ = F‚ÇÇ :=
begin
  refine functor.ext (Œª X, _) (Œª X Y f, _),
  { ext j,
    exact functor.congr_obj (h j) X, },
  { ext j,
    simpa only [pi.comp_apply, functor.eq_to_hom_proj]
      using functor.congr_map_conjugate (h j) f, },
end

def pi.equivalence_of_eq {j j' : J} (eq : j = j') : C j ‚âå C j' := by subst eq

@[simps]
def equivalence.pi' {J' : Type*} (Œ± : J ‚âÉ J') {D : J' ‚Üí Type*}
  [Œ† j', category (D j')] (e : Œ† j, C j ‚âå D (Œ± j)) :
  (Œ† j, C j) ‚âå (Œ† j', D j') :=
begin
  let e' : Œ† j', C (Œ±.symm j') ‚âå D j' := Œª j', (e (Œ±.symm j')).trans (pi.equivalence_of_eq (by simp)),
  exact
  { functor := functor.pi'_ (Œª j', functor.pi_.eval _ _ ‚ãô (e' j').functor),
    inverse := functor.pi'_ (Œª j, functor.pi_.eval _ _ ‚ãô (e j).inverse),
    unit_iso := eq_to_iso (functor.pi_.ext (Œª c, begin
      rw [functor.assoc, functor.pi'__eval, ‚Üê functor.assoc, functor.pi'__eval],
      sorry,
    end)),
    counit_iso := eq_to_iso sorry, },
end

lemma equivalence.pi'_inverse_comp_eval {J' : Type*} (Œ± : J ‚âÉ J') {D : J' ‚Üí Type*}
  [Œ† j', category (D j')] (e : Œ† j, C j ‚âå D (Œ± j)) (j : J) :
  (equivalence.pi' Œ± e).inverse ‚ãô functor.pi_.eval _ j =
    functor.pi_.eval _ (Œ± j) ‚ãô (e j).inverse := rfl

lemma equivalence.pi'_functor_comp_eval {J' : Type*} (Œ± : J ‚âÉ J') {D : J' ‚Üí Type*}
  [Œ† j', category (D j')] (e : Œ† j, C j ‚âå D (Œ± j)) (j : J) :
  (equivalence.pi' Œ± e).functor ‚ãô functor.pi_.eval _ (Œ± j) =
    functor.pi_.eval _ j ‚ãô (e j).functor :=
begin
  dsimp only [equivalence.pi', equivalence.trans],
  rw functor.pi'__eval,
  suffices : ‚àÄ (j‚ÇÇ : J) (eq : j‚ÇÇ = j),
    functor.pi_.eval C j‚ÇÇ ‚ãô (e j‚ÇÇ).functor ‚ãô (pi.equivalence_of_eq (by rw eq)).functor =
    functor.pi_.eval C j ‚ãô (e j).functor,
  { exact this _ (by simp), },
  intros j‚ÇÇ eq,
  subst eq,
  refl,
end

lemma is_iso_pi_iff {X Y : Œ† j, C j} (f : X ‚ü∂ Y) :
  is_iso f ‚Üî ‚àÄ j, is_iso (f j) :=
begin
  split,
  { introI,
    intro j,
    change is_iso ((functor.pi_.eval C j).map f),
    apply_instance, },
  { introI,
    exact ‚ü®‚ü®Œª j, inv (f j), by tidy‚ü©‚ü©, },
end

def morphism_property.pi : morphism_property (Œ† j, C j) := Œª X Y f, ‚àÄ j, (W j) (f j)

end

end

section

variables {J‚ÇÅ J‚ÇÇ : Type*} (C‚ÇÅ : J‚ÇÅ ‚Üí Type u) (C‚ÇÇ : J‚ÇÇ ‚Üí Type u)

@[simp]
def sum.desc : sum J‚ÇÅ J‚ÇÇ ‚Üí  Type u
|(sum.inl j‚ÇÅ) := C‚ÇÅ j‚ÇÅ
|(sum.inr j‚ÇÇ) := C‚ÇÇ j‚ÇÇ

variables [Œ† j‚ÇÅ, category.{v} (C‚ÇÅ j‚ÇÅ)] [Œ† j‚ÇÇ, category.{v} (C‚ÇÇ j‚ÇÇ)]

instance : Œ† j, category.{v} (sum.desc C‚ÇÅ C‚ÇÇ j) :=
Œª j, by { cases j; dsimp only [sum.desc]; apply_instance, }

def equivalence_pi_prod :
  (Œ† j‚ÇÅ, C‚ÇÅ j‚ÇÅ) √ó (Œ† j‚ÇÇ, C‚ÇÇ j‚ÇÇ) ‚âå (Œ† j, sum.desc C‚ÇÅ C‚ÇÇ j) :=
{ functor := functor.pi'_ (Œª j, match j with
    | sum.inl j‚ÇÅ := category_theory.prod.fst _ _ ‚ãô functor.pi_.eval _ j‚ÇÅ
    | sum.inr j‚ÇÇ := category_theory.prod.snd _ _ ‚ãô functor.pi_.eval _ j‚ÇÇ
  end),
  inverse := functor.prod'
    (functor.pi'_ (Œª j‚ÇÅ, functor.pi_.eval _ (sum.inl j‚ÇÅ)))
    (functor.pi'_ (Œª j‚ÇÇ, functor.pi_.eval _ (sum.inr j‚ÇÇ))),
  unit_iso := eq_to_iso (functor.ext (by tidy) (by tidy)),
  counit_iso := eq_to_iso (functor.ext (by tidy) (by tidy)), }

end

section

variables {J : Type*} (j : J) [subsingleton J] (C : J ‚Üí Type*) [Œ† t, category (C t)]

def equivalence_pi_single :
  (Œ† t, C t) ‚âå C j :=
{ functor := functor.pi_.eval _ j,
  inverse := functor.pi'_ (Œª t, begin
    have eq := subsingleton.elim j t,
    subst eq,
    exact ùü≠ _,
  end),
  unit_iso := eq_to_iso begin
    refine functor.ext _ _,
    { intro X,
      ext t,
      have eq := subsingleton.elim j t,
      subst eq,
      refl, },
    { intros X Y f,
      ext t,
      have eq := subsingleton.elim j t,
      subst eq,
      simp, },
  end,
  counit_iso := eq_to_iso rfl, }

end

section

variables {J : Type*} {C : J ‚Üí Type*} {D : J ‚Üí Type*}
  [Œ† j, category (C j)] [Œ† j, category (D j)]
  (W : Œ† j, morphism_property (C j))
  (L : Œ† j, C j ‚•§ D j)

lemma morphism_property.is_inverted_by.pi (h : ‚àÄ j, (W j).is_inverted_by (L j)):
  (morphism_property.pi W).is_inverted_by (functor.pi_ (Œª j, L j)) :=
Œª X Y f hf, by { rw is_iso_pi_iff, exact Œª j, h _ _ (hf j), }

instance [Œ† j, (W j).contains_identities] :
  morphism_property.contains_identities (morphism_property.pi W) :=
‚ü®Œª X j, morphism_property.contains_identities.id (W j) (X j)‚ü©

end

namespace localization

variables (J : Type*) [finite J] {C : J ‚Üí Type*} {D : J ‚Üí Type*}
  [Œ† j, category (C j)] [Œ† j, category (D j)]
  (W : Œ† j, morphism_property (C j))
  [hW : ‚àÄ j, (W j).contains_identities]
  (L : Œ† j, C j ‚•§ D j) [Œ† j, (L j).is_localization (W j)]

def pi_is_localization : ((functor.pi_ L).is_localization (morphism_property.pi W)) :=
begin
  apply nonempty.some,
  unfreezingI { revert C D, },
  refine finite.induction_empty_option _ _ _ J,
  { intros J‚ÇÅ J‚ÇÇ e h‚ÇÅ C‚ÇÇ D‚ÇÇ, introI, introI, intros W‚ÇÇ L‚ÇÇ, introI,
    let C‚ÇÅ := Œª j‚ÇÅ, C‚ÇÇ (e j‚ÇÅ),
    let D‚ÇÅ := Œª j‚ÇÅ, D‚ÇÇ (e j‚ÇÅ),
    let L‚ÇÅ : Œ† j‚ÇÅ, C‚ÇÅ j‚ÇÅ ‚•§ D‚ÇÅ j‚ÇÅ := Œª j‚ÇÅ, L‚ÇÇ (e j‚ÇÅ),
    let W‚ÇÅ : Œ† j‚ÇÅ, morphism_property (C‚ÇÅ j‚ÇÅ) := Œª j‚ÇÅ, W‚ÇÇ (e j‚ÇÅ),
    haveI := (h‚ÇÅ W‚ÇÅ L‚ÇÅ).some,
    let E : (Œ† j‚ÇÅ, C‚ÇÅ j‚ÇÅ) ‚âå (Œ† j‚ÇÇ, C‚ÇÇ j‚ÇÇ) := equivalence.pi' e (Œª j‚ÇÅ, by refl),
    let E' : (Œ† j‚ÇÅ, D‚ÇÅ j‚ÇÅ) ‚âå (Œ† j‚ÇÇ, D‚ÇÇ j‚ÇÇ) := equivalence.pi' e (Œª j‚ÇÅ, by refl),
    let Sq : Comm_sq E.symm.functor (functor.pi_ L‚ÇÇ) (functor.pi_ L‚ÇÅ) E'.symm.functor :=
      ‚ü®eq_to_iso (functor.pi_.ext (Œª j‚ÇÅ, begin
        simp only [functor.assoc, functor.pi_eval],
        erw equivalence.pi'_inverse_comp_eval,
        simp only [‚Üê functor.assoc],
        erw equivalence.pi'_inverse_comp_eval,
        refl,
    end))‚ü©,
    have hW‚ÇÅ : morphism_property.pi W‚ÇÅ ‚äÜ (morphism_property.pi W‚ÇÇ).inverse_image' E.symm.inverse,
    { intros X‚ÇÅ Y‚ÇÅ f hf,
      refine ‚ü®X‚ÇÅ, Y‚ÇÅ, iso.refl _, iso.refl _, f, Œª j‚ÇÇ, _, by tidy‚ü©,
      rcases e.surjective j‚ÇÇ with ‚ü®j‚ÇÅ, hj‚ÇÅ‚ü©,
      subst hj‚ÇÅ,
      refine (W‚ÇÇ (e j‚ÇÅ)).of_arrow_mk_eq _ _ (hf j‚ÇÅ) _,
      exact functor.congr_map_arrow_obj_arrow_mk (equivalence.pi'_functor_comp_eval e _ _) f, },
    exact nonempty.intro (functor.is_localization.of_equivalence'' E.symm E'.symm Sq
      (morphism_property.pi W‚ÇÇ) (morphism_property.pi W‚ÇÅ)
      (morphism_property.is_inverted_by.pi W‚ÇÇ L‚ÇÇ (Œª j‚ÇÇ, localization.inverts _ _)) hW‚ÇÅ), },
  { intros C D, introI, introI, intros W L, introI,
    sorry, },
  { sorry, },
end

end localization

end category_theory
