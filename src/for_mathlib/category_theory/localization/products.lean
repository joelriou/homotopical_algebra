import for_mathlib.category_theory.localization.equivalence
import category_theory.products.basic
import for_mathlib.category_theory.functor_misc
import for_mathlib.category_theory.finite_products

noncomputable theory

universes v v' u u'

namespace category_theory

open category

@[simp]
lemma prod.eq_to_hom_fst {C‚ÇÅ C‚ÇÇ : Type*} [category C‚ÇÅ] [category C‚ÇÇ]
  {X Y : C‚ÇÅ √ó C‚ÇÇ} (eq : X = Y) : (eq_to_hom eq : X ‚ü∂ Y).fst = eq_to_hom (by rw eq) :=
by { subst eq, refl, }

@[simp]
lemma prod.eq_to_hom_snd {C‚ÇÅ C‚ÇÇ : Type*} [category C‚ÇÅ] [category C‚ÇÇ]
  {X Y : C‚ÇÅ √ó C‚ÇÇ} (eq : X = Y) : (eq_to_hom eq : X ‚ü∂ Y).snd = eq_to_hom (by rw eq) :=
by { subst eq, refl, }

lemma functor.prod.ext {C‚ÇÅ C‚ÇÇ E : Type*} [category C‚ÇÅ] [category C‚ÇÇ] [category E]
  {F‚ÇÅ F‚ÇÇ : E ‚•§ C‚ÇÅ √ó C‚ÇÇ} (h‚ÇÅ : F‚ÇÅ ‚ãô prod.fst _ _ = F‚ÇÇ ‚ãô prod.fst _ _)
  (h‚ÇÇ : F‚ÇÅ ‚ãô prod.snd _ _ = F‚ÇÇ ‚ãô prod.snd _ _) : F‚ÇÅ = F‚ÇÇ :=
begin
  refine functor.ext (Œª X, _) (Œª X Y f, _),
  { ext,
    exacts [functor.congr_obj h‚ÇÅ X, functor.congr_obj h‚ÇÇ X], },
  { ext,
    { simpa only [prod_comp_fst, prod.eq_to_hom_fst] using functor.congr_map_conjugate h‚ÇÅ f, },
    { simpa only [prod_comp_snd, prod.eq_to_hom_snd] using functor.congr_map_conjugate h‚ÇÇ f, }, },
end

lemma functor.is_localization.of_is_equivalence {C D : Type*} [category C] [category D]
  (F : C ‚•§ D) [is_equivalence F] (W : morphism_property C)
  (hF : W ‚äÜ morphism_property.isomorphisms C) : F.is_localization W :=
begin
  haveI := localization.id_is_localization W hF,
  exact functor.is_localization.of_equivalence (ùü≠ C) W F F.as_equivalence F.left_unitor,
end

lemma morphism_property.of_arrow_eq {C : Type*} [category C] (W : morphism_property C)
  (f‚ÇÅ f‚ÇÇ : arrow C) (hf‚ÇÇ : W f‚ÇÇ.hom) (eq : f‚ÇÅ = f‚ÇÇ) : W f‚ÇÅ.hom := by { subst eq, exact hf‚ÇÇ, }

lemma morphism_property.of_arrow_mk_eq {C : Type*} [category C] (W : morphism_property C)
  {X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ : C} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (hf‚ÇÇ : W f‚ÇÇ) (eq : arrow.mk f‚ÇÅ = arrow.mk f‚ÇÇ) :
  W f‚ÇÅ :=
W.of_arrow_eq (arrow.mk f‚ÇÅ) (arrow.mk f‚ÇÇ) hf‚ÇÇ eq

lemma functor.congr_map_arrow_obj_arrow_mk {C D : Type*} [category C] [category D]
  {F‚ÇÅ F‚ÇÇ : C ‚•§ D} (eq : F‚ÇÅ = F‚ÇÇ) {X Y : C} (f : X ‚ü∂ Y) :
  F‚ÇÅ.map_arrow.obj (arrow.mk f) = F‚ÇÇ.map_arrow.obj (arrow.mk f) := by subst eq

section

variables {C‚ÇÅ D‚ÇÅ C‚ÇÇ D‚ÇÇ : Type*} [category C‚ÇÅ] [category C‚ÇÇ] [category D‚ÇÅ] [category D‚ÇÇ]
  (W‚ÇÅ : morphism_property C‚ÇÅ) (W‚ÇÇ : morphism_property C‚ÇÇ) {E : Type*} [category E]

@[simps]
def nat_iso.prod {F F' : C‚ÇÅ ‚•§ D‚ÇÅ} {G G' : C‚ÇÇ ‚•§ D‚ÇÇ} (Œ± : F ‚âÖ F') (Œ≤ : G ‚âÖ G') :
  F.prod G ‚âÖ F'.prod G' :=
{ hom := Œ±.hom.prod Œ≤.hom,
  inv := Œ±.inv.prod Œ≤.inv, }

namespace equivalence

def prod (E‚ÇÅ : C‚ÇÅ ‚âå D‚ÇÅ) (E‚ÇÇ : C‚ÇÇ ‚âå D‚ÇÇ) : C‚ÇÅ √ó C‚ÇÇ ‚âå D‚ÇÅ √ó D‚ÇÇ :=
{ functor := E‚ÇÅ.functor.prod E‚ÇÇ.functor,
  inverse := E‚ÇÅ.inverse.prod E‚ÇÇ.inverse,
  unit_iso := ((functor_prod_functor_equiv (C‚ÇÅ √ó C‚ÇÇ) C‚ÇÅ C‚ÇÇ).counit_iso.app (ùü≠ _)).symm
      ‚â™‚â´ nat_iso.prod E‚ÇÅ.unit_iso E‚ÇÇ.unit_iso,
  counit_iso := nat_iso.prod E‚ÇÅ.counit_iso E‚ÇÇ.counit_iso ‚â™‚â´
      ((functor_prod_functor_equiv (D‚ÇÅ √ó D‚ÇÇ) D‚ÇÅ D‚ÇÇ).counit_iso.app (ùü≠ _)), }

end equivalence

namespace functor

@[simps]
def prod_functor : (C‚ÇÅ ‚•§ D‚ÇÅ) √ó (C‚ÇÇ ‚•§ D‚ÇÇ) ‚•§ (C‚ÇÅ √ó C‚ÇÇ) ‚•§ (D‚ÇÅ √ó D‚ÇÇ) :=
{ obj := Œª F, F.1.prod F.2,
  map := Œª F G œÜ, œÜ.1.prod œÜ.2, }

lemma flip_flip (H : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ E) : H.flip.flip = H :=
functor.ext (Œª X‚ÇÅ, (functor.ext (Œª X‚ÇÇ, rfl) (by tidy))) (by tidy)

lemma comp_comp_curry_flip_flip_eq_curry (H : D‚ÇÅ √ó D‚ÇÇ ‚•§ E) (F‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (F‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) :
  F‚ÇÅ ‚ãô (F‚ÇÇ ‚ãô (curry.obj H).flip).flip = curry.obj (F‚ÇÅ.prod F‚ÇÇ ‚ãô H) :=
functor.ext (Œª X‚ÇÅ, (functor.ext (Œª Y‚ÇÅ, rfl) (by tidy))) (by tidy)

lemma uncurry_curry (H : D‚ÇÅ √ó D‚ÇÇ ‚•§ E) : uncurry.obj (curry.obj H) = H :=
functor.ext (Œª X, by { cases X, refl, }) (by tidy)

end functor

namespace morphism_property

class contains_identities {C : Type*} [category C] (W : morphism_property C) : Prop :=
(id [] : ‚àÄ (X : C), W (ùüô X))

def prod : morphism_property (C‚ÇÅ √ó C‚ÇÇ) := Œª X Y f, W‚ÇÅ f.fst ‚àß W‚ÇÇ f.snd

variables {W‚ÇÅ W‚ÇÇ}

lemma is_inverted_by.prod {F‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ} {F‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ} (h‚ÇÅ : W‚ÇÅ.is_inverted_by F‚ÇÅ)
  (h‚ÇÇ : W‚ÇÇ.is_inverted_by F‚ÇÇ) : (W‚ÇÅ.prod W‚ÇÇ).is_inverted_by (F‚ÇÅ.prod F‚ÇÇ) :=
Œª X Y f hf, by { rw is_iso_prod_iff, exact ‚ü®h‚ÇÅ f.1 hf.1,h‚ÇÇ f.2 hf.2‚ü©, }

end morphism_property

namespace localization

variables [hW‚ÇÅ : W‚ÇÅ.contains_identities] [hW‚ÇÇ : W‚ÇÇ.contains_identities]

namespace strict_universal_property_fixed_target

variables  (F : C‚ÇÅ √ó C‚ÇÇ ‚•§ E) (hF : (W‚ÇÅ.prod W‚ÇÇ).is_inverted_by F)

@[simps]
def prod.hom_mk {X‚ÇÅ Y‚ÇÅ : C‚ÇÅ} {X‚ÇÇ Y‚ÇÇ : C‚ÇÇ} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) :
  (‚ü®X‚ÇÅ, X‚ÇÇ‚ü© : C‚ÇÅ √ó C‚ÇÇ) ‚ü∂ ‚ü®Y‚ÇÅ, Y‚ÇÇ‚ü© := ‚ü®f‚ÇÅ, f‚ÇÇ‚ü©

namespace prod

include hF hW‚ÇÇ
def lift‚ÇÅ : W‚ÇÅ.localization ‚•§ C‚ÇÇ ‚•§ E :=
localization.construction.lift (curry.obj F) (Œª X‚ÇÅ Y‚ÇÅ f‚ÇÅ hf‚ÇÅ, begin
  haveI : Œ† (Z‚ÇÇ : C‚ÇÇ), is_iso (((curry.obj F).map f‚ÇÅ).app Z‚ÇÇ),
  { intro Z‚ÇÇ,
    apply hF,
    exact ‚ü®hf‚ÇÅ, morphism_property.contains_identities.id _ _‚ü©, },
    apply nat_iso.is_iso_of_is_iso_app,
end)

lemma fac‚ÇÅ : W‚ÇÅ.Q ‚ãô (lift‚ÇÅ W‚ÇÅ W‚ÇÇ F hF) = curry.obj F := localization.construction.fac _ _

lemma lift‚ÇÅ_obj_map (X‚ÇÅ : C‚ÇÅ) {X‚ÇÇ Y‚ÇÇ : C‚ÇÇ} (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) :
  ((lift‚ÇÅ W‚ÇÅ W‚ÇÇ F hF).obj (W‚ÇÅ.Q.obj X‚ÇÅ)).map f‚ÇÇ =
    F.map (prod.hom_mk (ùüô X‚ÇÅ) f‚ÇÇ) := rfl

lemma lift‚ÇÅ_map_app {X‚ÇÅ Y‚ÇÅ : C‚ÇÅ} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) :
  ((lift‚ÇÅ W‚ÇÅ W‚ÇÇ F hF).map (W‚ÇÅ.Q.map f‚ÇÅ)).app X‚ÇÇ =
    F.map (prod.hom_mk f‚ÇÅ (ùüô X‚ÇÇ)) :=
by simpa only [functor.comp_map, eq_to_hom_refl, category.comp_id, category.id_comp,
  curry_obj_map_app] using congr_app (functor.congr_map_conjugate (fac‚ÇÅ W‚ÇÅ W‚ÇÇ F hF) f‚ÇÅ) X‚ÇÇ

include hW‚ÇÅ

def lift‚ÇÇ : W‚ÇÇ.localization ‚•§ W‚ÇÅ.localization ‚•§ E :=
localization.construction.lift (lift‚ÇÅ W‚ÇÅ W‚ÇÇ F hF).flip (Œª X‚ÇÇ Y‚ÇÇ f‚ÇÇ hf‚ÇÇ, begin
  haveI : ‚àÄ (X‚ÇÅ : W‚ÇÅ.localization), is_iso (((lift‚ÇÅ W‚ÇÅ W‚ÇÇ F hF).flip.map f‚ÇÇ).app X‚ÇÅ),
  { intro X‚ÇÅ,
    have hF‚ÇÅ : ‚àÉ (A‚ÇÅ : C‚ÇÅ), W‚ÇÅ.Q.obj A‚ÇÅ = X‚ÇÅ := (construction.obj_equiv W‚ÇÅ).surjective X‚ÇÅ,
    cases hF‚ÇÅ with A‚ÇÅ hA‚ÇÅ,
    subst hA‚ÇÅ,
    simp only [functor.flip_map_app, lift‚ÇÅ_obj_map],
    haveI := hF (prod.hom_mk (ùüô A‚ÇÅ) f‚ÇÇ) ‚ü®morphism_property.contains_identities.id _ _, hf‚ÇÇ‚ü©,
    apply_instance, },
  apply nat_iso.is_iso_of_is_iso_app,
end)

lemma fac‚ÇÇ : W‚ÇÇ.Q ‚ãô (lift‚ÇÇ W‚ÇÅ W‚ÇÇ F hF) = (lift‚ÇÅ W‚ÇÅ W‚ÇÇ F hF).flip :=
localization.construction.fac _ _

lemma lift‚ÇÇ_obj_map {X‚ÇÅ Y‚ÇÅ : C‚ÇÅ} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) :
  ((lift‚ÇÇ W‚ÇÅ W‚ÇÇ F hF).obj (W‚ÇÇ.Q.obj X‚ÇÇ)).map (W‚ÇÅ.Q.map f‚ÇÅ) = F.map (prod.hom_mk f‚ÇÅ (ùüô X‚ÇÇ)) :=
by simpa only [eq_to_hom_refl, functor.flip_obj_map, category.comp_id,
  category.id_comp, lift‚ÇÅ_map_app] using functor.congr_map_conjugate
    (functor.congr_obj (fac‚ÇÇ W‚ÇÅ W‚ÇÇ F hF) X‚ÇÇ) (W‚ÇÅ.Q.map f‚ÇÅ)

lemma lift‚ÇÇ_map_app (X‚ÇÅ : C‚ÇÅ) {X‚ÇÇ Y‚ÇÇ : C‚ÇÇ} (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) :
  ((lift‚ÇÇ W‚ÇÅ W‚ÇÇ F hF).map (W‚ÇÇ.Q.map f‚ÇÇ)).app (W‚ÇÅ.Q.obj X‚ÇÅ) = F.map (prod.hom_mk (ùüô X‚ÇÅ) f‚ÇÇ) :=
by simpa only [eq_to_hom_refl, category.comp_id, category.id_comp]
  using congr_app (functor.congr_map_conjugate (fac‚ÇÇ W‚ÇÅ W‚ÇÇ F hF) f‚ÇÇ) (W‚ÇÅ.Q.obj X‚ÇÅ)

def lift‚ÇÉ : W‚ÇÅ.localization √ó W‚ÇÇ.localization ‚•§ E := uncurry.obj (lift‚ÇÇ W‚ÇÅ W‚ÇÇ F hF).flip

lemma fac : W‚ÇÅ.Q.prod W‚ÇÇ.Q ‚ãô prod.lift‚ÇÉ W‚ÇÅ W‚ÇÇ F hF = F :=
begin
  refine functor.ext (Œª X, by { cases X, refl, }) (Œª X Y f, _),
  { rcases X with ‚ü®X‚ÇÅ, X‚ÇÇ‚ü©,
    rcases Y with ‚ü®Y‚ÇÅ, Y‚ÇÇ‚ü©,
    have eq : f = prod.hom_mk (ùüô X‚ÇÅ) f.2 ‚â´ prod.hom_mk f.1 (ùüô Y‚ÇÇ) :=
      by simp only [prod_comp, hom_mk_fst, category.id_comp, hom_mk_snd, category.comp_id,
        prod.mk.eta],
    nth_rewrite 0 eq,
    dsimp [functor.comp, lift‚ÇÉ],
    simp only [category.id_comp, category.comp_id, nat_trans.naturality,
      lift‚ÇÇ_obj_map, lift‚ÇÇ_map_app, ‚Üê F.map_comp],
    congr' 1,
    ext,
    { apply category.comp_id, },
    { apply category.id_comp, }, },
end

omit hF hW‚ÇÅ hW‚ÇÇ

lemma uniq (H H' : W‚ÇÅ.localization √ó W‚ÇÇ.localization ‚•§ E)
  (eq : W‚ÇÅ.Q.prod W‚ÇÇ.Q ‚ãô H = W‚ÇÅ.Q.prod W‚ÇÇ.Q ‚ãô H') : H = H' :=
begin
  let G := (curry.obj H).flip,
  let G' := (curry.obj H').flip,
  suffices : G = G',
  { rw [‚Üê functor.uncurry_curry H, ‚Üê functor.uncurry_curry H'],
    congr' 1,
    rw [‚Üê functor.flip_flip (curry.obj H), ‚Üê functor.flip_flip (curry.obj H')],
    congr', },
  apply construction.uniq,
  suffices : (W‚ÇÇ.Q ‚ãô G).flip = (W‚ÇÇ.Q ‚ãô G').flip,
  { rw [‚Üê functor.flip_flip (W‚ÇÇ.Q ‚ãô G), ‚Üê functor.flip_flip (W‚ÇÇ.Q ‚ãô G'), this], },
  apply construction.uniq,
  convert congr_arg curry.obj eq,
  all_goals { apply functor.comp_comp_curry_flip_flip_eq_curry, },
end

end prod

include hW‚ÇÅ hW‚ÇÇ

variable (E)

def prod : strict_universal_property_fixed_target (W‚ÇÅ.Q.prod W‚ÇÇ.Q) (W‚ÇÅ.prod W‚ÇÇ) E :=
{ inverts := (localization.inverts _ _).prod (localization.inverts _ _),
  lift := Œª F hF, prod.lift‚ÇÉ W‚ÇÅ W‚ÇÇ F hF,
  fac := Œª F hF, prod.fac W‚ÇÅ W‚ÇÇ F hF,
  uniq := Œª H H' eq, begin
    let G := (curry.obj H).flip,
    let G' := (curry.obj H').flip,
    suffices : G = G',
    { rw [‚Üê functor.uncurry_curry H, ‚Üê functor.uncurry_curry H'],
      congr' 1,
      rw [‚Üê functor.flip_flip (curry.obj H), ‚Üê functor.flip_flip (curry.obj H')],
      congr', },
    apply construction.uniq,
    suffices : (W‚ÇÇ.Q ‚ãô G).flip = (W‚ÇÇ.Q ‚ãô G').flip,
    { rw [‚Üê functor.flip_flip (W‚ÇÇ.Q ‚ãô G), ‚Üê functor.flip_flip (W‚ÇÇ.Q ‚ãô G'), this], },
    apply construction.uniq,
    convert congr_arg curry.obj eq,
    all_goals { apply functor.comp_comp_curry_flip_flip_eq_curry, },
  end, }

end strict_universal_property_fixed_target

include hW‚ÇÅ hW‚ÇÇ

instance prod_construction_is_localization : (W‚ÇÅ.Q.prod W‚ÇÇ.Q).is_localization (W‚ÇÅ.prod W‚ÇÇ) :=
functor.is_localization.mk' _ _
  (strict_universal_property_fixed_target.prod W‚ÇÅ W‚ÇÇ _)
  (strict_universal_property_fixed_target.prod W‚ÇÅ W‚ÇÇ _)

instance prod_is_localization (L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ)
  [L‚ÇÅ.is_localization W‚ÇÅ] [L‚ÇÇ.is_localization W‚ÇÇ] :
  (L‚ÇÅ.prod L‚ÇÇ).is_localization (W‚ÇÅ.prod W‚ÇÇ) :=
begin
  let E‚ÇÅ := equivalence_from_model L‚ÇÅ W‚ÇÅ,
  let E‚ÇÇ := equivalence_from_model L‚ÇÇ W‚ÇÇ,
  let e‚ÇÅ : W‚ÇÅ.Q ‚ãô E‚ÇÅ.functor ‚âÖ L‚ÇÅ := Q_comp_equivalence_from_model_functor_iso _ _,
  let e‚ÇÇ : W‚ÇÇ.Q ‚ãô E‚ÇÇ.functor ‚âÖ L‚ÇÇ := Q_comp_equivalence_from_model_functor_iso _ _,
  exact functor.is_localization.of_equivalence (W‚ÇÅ.Q.prod W‚ÇÇ.Q) (W‚ÇÅ.prod W‚ÇÇ) (L‚ÇÅ.prod L‚ÇÇ)
    (E‚ÇÅ.prod E‚ÇÇ) (functor.prod_functor.map_iso (e‚ÇÅ.prod e‚ÇÇ)),
end

end localization

variables {J : Type*} (C : J ‚Üí Type u) [Œ† j, category (C j)]

def equivalence.pi' {J' : Type*} (Œ± : J' ‚âÉ J) :
  (Œ† j, C (Œ± j)) ‚âå (Œ† j', C j'):=
{ functor := functor.pi'_ (Œª j, functor.pi_.eval _ (Œ±.symm j) ‚ãô
    (pi.equivalence_of_eq C (show Œ± (Œ±.symm j) = j, by simp)).functor),
  inverse := functor.pi'_ (Œª j', functor.pi_.eval _ (Œ± j')),
  unit_iso := functor.pi_.mk_nat_iso (Œª j', begin
    calc ùü≠ (Œ† (j : J'), C (Œ± j)) ‚ãô functor.pi_.eval (Œª (j : J'), C (Œ± j)) j' ‚âÖ _ :
      functor.left_unitor _
    ... ‚âÖ _ : (functor.pi_.eval_iso_of_eq (Œª j, C (Œ± j)) (show Œ±.symm (Œ± j') = j', by simp)).symm
    ... ‚âÖ _ : _
    ... ‚âÖ _ ‚ãô functor.pi_.eval _ _ : (functor.pi'__eval_iso _ _).symm
    ... ‚âÖ _ ‚ãô _ ‚ãô _ : iso_whisker_left _ ((functor.pi'__eval_iso _ _).symm)
    ... ‚âÖ (_ ‚ãô _) ‚ãô _ : (functor.associator _ _ _).symm,
    { exact iso_whisker_left _ (pi.equivalence_of_eq_functor_iso C Œ± (by simp)), },
  end),
  counit_iso := functor.pi_.mk_nat_iso
    (Œª j, functor.associator _ _ _ ‚â™‚â´ iso_whisker_left _ (functor.pi'__eval_iso _ _) ‚â™‚â´
    (functor.associator _ _ _).symm ‚â™‚â´ iso_whisker_right (functor.pi'__eval_iso _ _) _ ‚â™‚â´
    functor.pi_.eval_iso_of_eq _ _ ‚â™‚â´ (functor.left_unitor _).symm),
  functor_unit_iso_comp' := Œª X, begin
    ext j,
    dsimp [iso.refl],
    simp only [assoc, id_comp],
    erw nat_trans.id_app,
    dsimp,
    simp only [id_comp, comp_id, functor.map_id, eq_to_hom_app, functor.map_comp, assoc,
      pi.equivalence_of_eq_functor_iso_hom_app, eq_to_hom_map, eq_to_hom_trans, eq_to_hom_refl],
  end, }

lemma equivalence.pi'_inverse_comp_eval {J' : Type*} (Œ± : J' ‚âÉ J) (j' : J') :
  (equivalence.pi' C Œ±).inverse ‚ãô functor.pi_.eval _ j' = functor.pi_.eval _ (Œ± j') := rfl

lemma equivalence.pi'_functor_comp_eval {J' : Type*} (Œ± : J' ‚âÉ J) (j' : J') :
  (equivalence.pi' C Œ±).functor ‚ãô functor.pi_.eval _ (Œ± j') = functor.pi_.eval _ j' :=
begin
  dsimp only [equivalence.pi'],
  rw functor.pi'__eval,
  rw ‚Üê functor.pi_.eval_eq_of_eq (Œª j', C (Œ± j')) (show Œ±.symm (Œ± j') = j', by simp),
  rw pi.equivalence_of_eq_functor_eq C Œ±,
end

variable {C}

@[simps]
def equivalence.pi'' {J' : Type*} (Œ± : J ‚âÉ J') {D : J' ‚Üí Type*}
  [Œ† j', category (D j')] (e : Œ† j, C j ‚âå D (Œ± j)) :
  (Œ† j, C j) ‚âå (Œ† j', D j') :=
(equivalence.pi e).trans (equivalence.pi' D Œ±)

lemma equivalence.pi''_inverse_comp_eval {J' : Type*} (Œ± : J ‚âÉ J') {D : J' ‚Üí Type*}
  [Œ† j', category (D j')] (e : Œ† j, C j ‚âå D (Œ± j)) (j : J) :
  (equivalence.pi'' Œ± e).inverse ‚ãô functor.pi_.eval _ j =
    functor.pi_.eval _ (Œ± j) ‚ãô (e j).inverse := rfl

lemma equivalence.pi''_functor_comp_eval {J' : Type*} (Œ± : J ‚âÉ J') {D : J' ‚Üí Type*}
  [Œ† j', category (D j')] (e : Œ† j, C j ‚âå D (Œ± j)) (j : J) :
  (equivalence.pi'' Œ± e).functor ‚ãô functor.pi_.eval _ (Œ± j) =
    functor.pi_.eval _ j ‚ãô (e j).functor :=
begin
  dsimp only [equivalence.pi'', equivalence.trans],
  rw [functor.assoc, equivalence.pi'_functor_comp_eval],
  refl,
end

lemma is_iso_pi_iff {X Y : Œ† j, C j} (f : X ‚ü∂ Y) :
  is_iso f ‚Üî ‚àÄ j, is_iso (f j) :=
begin
  split,
  { introI,
    intro j,
    change is_iso ((functor.pi_.eval C j).map f),
    apply_instance, },
  { introI,
    exact ‚ü®‚ü®Œª j, inv (f j), by tidy‚ü©‚ü©, },
end

def morphism_property.pi (W : Œ† j, morphism_property (C j)) :
  morphism_property (Œ† j, C j) := Œª X Y f, ‚àÄ j, (W j) (f j)

end

section

variables {J‚ÇÅ J‚ÇÇ : Type*} (C‚ÇÅ : J‚ÇÅ ‚Üí Type u) (C‚ÇÇ : J‚ÇÇ ‚Üí Type u)

@[simp]
def sum.desc : sum J‚ÇÅ J‚ÇÇ ‚Üí Type u
|(sum.inl j‚ÇÅ) := C‚ÇÅ j‚ÇÅ
|(sum.inr j‚ÇÇ) := C‚ÇÇ j‚ÇÇ

variables [Œ† j‚ÇÅ, category.{v} (C‚ÇÅ j‚ÇÅ)] [Œ† j‚ÇÇ, category.{v} (C‚ÇÇ j‚ÇÇ)]

instance : Œ† j, category.{v} (sum.desc C‚ÇÅ C‚ÇÇ j) :=
Œª j, by { cases j; dsimp only [sum.desc]; apply_instance, }

def equivalence_pi_prod :
  (Œ† j‚ÇÅ, C‚ÇÅ j‚ÇÅ) √ó (Œ† j‚ÇÇ, C‚ÇÇ j‚ÇÇ) ‚âå (Œ† j, sum.desc C‚ÇÅ C‚ÇÇ j) :=
{ functor := functor.pi'_ (Œª j, match j with
    | sum.inl j‚ÇÅ := category_theory.prod.fst _ _ ‚ãô functor.pi_.eval _ j‚ÇÅ
    | sum.inr j‚ÇÇ := category_theory.prod.snd _ _ ‚ãô functor.pi_.eval _ j‚ÇÇ
  end),
  inverse := functor.prod'
    (functor.pi'_ (Œª j‚ÇÅ, functor.pi_.eval _ (sum.inl j‚ÇÅ)))
    (functor.pi'_ (Œª j‚ÇÇ, functor.pi_.eval _ (sum.inr j‚ÇÇ))),
  unit_iso := eq_to_iso (functor.ext (by tidy) (by tidy)),
  counit_iso := eq_to_iso (functor.ext (by tidy) (by tidy)), }

end

section

variables {J : Type*} {T : Type*} (C : J ‚Üí T) (C‚ÇÄ : T)

@[simp]
def option.desc : option J ‚Üí T
| none := C‚ÇÄ
| (some j) := C j

lemma option.is_desc (f : option J ‚Üí T) : ‚àÉ (C : J ‚Üí T) (C‚ÇÄ : T), f = option.desc C C‚ÇÄ :=
‚ü®Œª j, f (some j), f none, by { ext j, cases j; refl, }‚ü©

def option.desc' {C : J ‚Üí Type u} {C‚ÇÄ : Type u}
  (f : Œ† j, C j) (f‚ÇÄ : C‚ÇÄ) : Œ† (j : option J), option.desc C C‚ÇÄ j
| none := f‚ÇÄ
| (some j) := f j

lemma option.is_desc'
  {C : J ‚Üí Type u} {C‚ÇÄ : Type u} (g : Œ† (j : option J), option.desc C C‚ÇÄ j) :
  ‚àÉ (f : Œ† j, C j) (f‚ÇÄ : C‚ÇÄ), g = option.desc' f f‚ÇÄ :=
‚ü®Œª j, g (some j), g none, by { ext j, cases j; refl,}‚ü©

end

section

variables {J : Type*} (j : J) [subsingleton J] (C : J ‚Üí Type*) [Œ† t, category (C t)]

def equivalence_pi_single :
  (Œ† t, C t) ‚âå C j :=
{ functor := functor.pi_.eval _ j,
  inverse := functor.pi'_ (Œª t, begin
    have eq := subsingleton.elim j t,
    subst eq,
    exact ùü≠ _,
  end),
  unit_iso := eq_to_iso begin
    refine functor.ext _ _,
    { intro X,
      ext t,
      have eq := subsingleton.elim j t,
      subst eq,
      refl, },
    { intros X Y f,
      ext t,
      have eq := subsingleton.elim j t,
      subst eq,
      simp, },
  end,
  counit_iso := eq_to_iso rfl, }

end

section

variables {J : Type} (C : option J ‚Üí Type u) [Œ† j', category.{v} (C j')]

def equivalence_pi_option : (Œ† j', C j') ‚âå (Œ† j, C (some j)) √ó C none :=
{ functor := functor.prod' (functor.pi'_ (Œª j, functor.pi_.eval _ (some j))) (functor.pi_.eval _ none),
  inverse := functor.pi'_ (Œª j, match j with
    | none := prod.snd _ _
    | (some j) := prod.fst _ _ ‚ãô functor.pi_.eval _ j
  end),
  unit_iso := eq_to_iso (functor.pi_.ext (Œª j, by { cases j; refl, })),
  counit_iso := eq_to_iso (functor.prod.ext rfl rfl), }

end

section

variables {J : Type*} {C : J ‚Üí Type*} {D : J ‚Üí Type*}
  [Œ† j, category (C j)] [Œ† j, category (D j)]
  (W : Œ† j, morphism_property (C j))
  (L : Œ† j, C j ‚•§ D j)

lemma morphism_property.is_inverted_by.pi (h : ‚àÄ j, (W j).is_inverted_by (L j)):
  (morphism_property.pi W).is_inverted_by (functor.pi_ (Œª j, L j)) :=
Œª X Y f hf, by { rw is_iso_pi_iff, exact Œª j, h _ _ (hf j), }

instance [Œ† j, (W j).contains_identities] :
  morphism_property.contains_identities (morphism_property.pi W) :=
‚ü®Œª X j, morphism_property.contains_identities.id (W j) (X j)‚ü©

end

namespace localization

variables (J : Type) [finite J] {C : J ‚Üí Type*} {D : J ‚Üí Type*}
  [Œ† j, category (C j)] [Œ† j, category (D j)]
  (W : Œ† j, morphism_property (C j))
  [hW : ‚àÄ j, (W j).contains_identities]
  (L : Œ† j, C j ‚•§ D j) [Œ† j, (L j).is_localization (W j)]

include hW

instance pi_is_localization : ((functor.pi_ L).is_localization (morphism_property.pi W)) :=
begin
  unfreezingI { revert C D, },
  refine finite.induction_empty_option _ _ _ J,
  { intros J‚ÇÅ J‚ÇÇ e h‚ÇÅ C‚ÇÇ D‚ÇÇ, introI, introI, intros W‚ÇÇ, introI, intro L‚ÇÇ, introI,
    let C‚ÇÅ := Œª j‚ÇÅ, C‚ÇÇ (e j‚ÇÅ),
    let D‚ÇÅ := Œª j‚ÇÅ, D‚ÇÇ (e j‚ÇÅ),
    let L‚ÇÅ : Œ† j‚ÇÅ, C‚ÇÅ j‚ÇÅ ‚•§ D‚ÇÅ j‚ÇÅ := Œª j‚ÇÅ, L‚ÇÇ (e j‚ÇÅ),
    let W‚ÇÅ : Œ† j‚ÇÅ, morphism_property (C‚ÇÅ j‚ÇÅ) := Œª j‚ÇÅ, W‚ÇÇ (e j‚ÇÅ),
    haveI := h‚ÇÅ W‚ÇÅ L‚ÇÅ,
    let E : (Œ† j‚ÇÅ, C‚ÇÅ j‚ÇÅ) ‚âå (Œ† j‚ÇÇ, C‚ÇÇ j‚ÇÇ) := equivalence.pi'' e (Œª j‚ÇÅ, by refl),
    let E' : (Œ† j‚ÇÅ, D‚ÇÅ j‚ÇÅ) ‚âå (Œ† j‚ÇÇ, D‚ÇÇ j‚ÇÇ) := equivalence.pi'' e (Œª j‚ÇÅ, by refl),
    let Sq : Comm_sq E.symm.functor (functor.pi_ L‚ÇÇ) (functor.pi_ L‚ÇÅ) E'.symm.functor :=
      ‚ü®eq_to_iso (functor.pi_.ext (Œª j‚ÇÅ, begin
        simp only [functor.assoc, functor.pi_eval],
        erw equivalence.pi''_inverse_comp_eval,
        simp only [‚Üê functor.assoc],
        erw equivalence.pi''_inverse_comp_eval,
        refl,
    end))‚ü©,
    have hW‚ÇÅ : morphism_property.pi W‚ÇÅ ‚äÜ (morphism_property.pi W‚ÇÇ).inverse_image' E.symm.inverse,
    { intros X‚ÇÅ Y‚ÇÅ f hf,
      refine ‚ü®X‚ÇÅ, Y‚ÇÅ, iso.refl _, iso.refl _, f, Œª j‚ÇÇ, _, by tidy‚ü©,
      rcases e.surjective j‚ÇÇ with ‚ü®j‚ÇÅ, hj‚ÇÅ‚ü©,
      subst hj‚ÇÅ,
      refine (W‚ÇÇ (e j‚ÇÅ)).of_arrow_mk_eq _ _ (hf j‚ÇÅ) _,
      exact functor.congr_map_arrow_obj_arrow_mk (equivalence.pi''_functor_comp_eval e _ _) f, },
    exact (functor.is_localization.of_equivalence'' E.symm E'.symm Sq
      (morphism_property.pi W‚ÇÇ) (morphism_property.pi W‚ÇÅ)
      (morphism_property.is_inverted_by.pi W‚ÇÇ L‚ÇÇ (Œª j‚ÇÇ, localization.inverts _ _)) hW‚ÇÅ), },
  { intros C D, introI, introI, intros W, introI, intro L, introI,
    haveI : is_equivalence (functor.pi_ L) :=
    { inverse :=
      { obj := Œª Y j, by induction j,
        map := Œª X Y f j, by induction j, },
      unit_iso := eq_to_iso (functor.ext (by tidy) (by tidy)),
      counit_iso := eq_to_iso (functor.ext (by tidy) (by tidy)), },
    apply functor.is_localization.of_is_equivalence (functor.pi_ L) (morphism_property.pi W),
    intros X Y f hf,
    rw morphism_property.isomorphisms.iff,
    rw is_iso_pi_iff,
    intro j,
    induction j, },
  { intro J, introI, intros hJ C' D', introI, introI, intros W' hW' L' hL',
    let W := Œª j, W' (some j),
    let W‚ÇÄ := W' none,
    let L := Œª j, L' (some j),
    let L‚ÇÄ := L' none,
    let E := equivalence_pi_option C',
    let E' := equivalence_pi_option D',
    haveI : L‚ÇÄ.is_localization W‚ÇÄ := hL' none,
    let H : Comm_sq (equivalence_pi_option C').functor (functor.pi_ L') (functor.prod (functor.pi_ L) L‚ÇÄ) (equivalence_pi_option D').functor := ‚ü®eq_to_iso rfl‚ü©,
    have hW‚ÇÅ := morphism_property.is_inverted_by.pi W' L' (Œª j, localization.inverts _ _),
    have hW‚ÇÇ : (morphism_property.pi W).prod W‚ÇÄ ‚äÜ (morphism_property.pi W').inverse_image' E.inverse,
    { intros X Y f hf,
      refine ‚ü®X, Y, iso.refl X, iso.refl Y, f, _, comm_sq.mk (by simp)‚ü©,
      rintro (_|j),
      { exact hf.2, },
      { exact hf.1 j, }, },
    exact functor.is_localization.of_equivalence'' E E' H (morphism_property.pi W')
      (morphism_property.prod (morphism_property.pi W) W‚ÇÄ) hW‚ÇÅ hW‚ÇÇ, },
end

end localization

def morphism_property.functor_category {C : Type*} [category C]
  (W : morphism_property C) (J : Type*) [category J] :
  morphism_property (J ‚•§ C) := Œª X Y f, ‚àÄ j, W (f.app j)

namespace localization

variables (J : Type) [finite J] {C D : Type*} [category C] [category D]
  (W : morphism_property C)
  [morphism_property.contains_identities W]
  (L : C ‚•§ D) [L.is_localization W]

instance whiskering_right_discrete_is_localization :
  ((whiskering_right (discrete J) C D).obj L).is_localization (W.functor_category _) :=
begin
  let E := pi_equivalence_functors_from_discrete C J,
  let E' := pi_equivalence_functors_from_discrete D J,
  let L‚ÇÅ := (whiskering_right (discrete J) C D).obj L,
  let L‚ÇÇ := functor.pi_ (Œª (j : J), L),
  let H : Comm_sq E.symm.functor L‚ÇÅ L‚ÇÇ E'.symm.functor := ‚ü®iso.refl _‚ü©,
  refine functor.is_localization.of_equivalence'' E.symm E'.symm H (W.functor_category _)
    (morphism_property.pi (Œª j, W)) _ _,
  { intros X Y f hf,
    haveI : ‚àÄ (j : discrete J), is_iso ((((whiskering_right
      (discrete J) C D).obj L).map f).app j),
    { rintro ‚ü®j‚ü©,
      dsimp,
      exact localization.inverts L W _ (hf (discrete.mk j)), },
    apply nat_iso.is_iso_of_is_iso_app, },
  { refine has_subset.subset.trans _ (morphism_property.inverse_image_subset_inverse_image' _ _),
    rintros X Y f hf ‚ü®j‚ü©,
    exact hf j, },
end

end localization

end category_theory
