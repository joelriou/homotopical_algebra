/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import for_mathlib.category_theory.localization.predicate

noncomputable theory

open category_theory.category

namespace category_theory

namespace morphism_property

variables {C : Type*} [category C]

def iso_closure (P : morphism_property C) : morphism_property C :=
Œª X‚ÇÅ X‚ÇÇ f, ‚àÉ (Y‚ÇÅ Y‚ÇÇ : C) (e‚ÇÅ : X‚ÇÅ ‚âÖ Y‚ÇÅ) (e‚ÇÇ : X‚ÇÇ ‚âÖ Y‚ÇÇ) (f' : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) (hf' : P f'),
  comm_sq f e‚ÇÅ.hom e‚ÇÇ.hom f'

lemma subset_iso_closure (P : morphism_property C) : P ‚äÜ P.iso_closure :=
Œª X Y f hf, ‚ü®X, Y, iso.refl X, iso.refl Y, f, hf, comm_sq.mk (by simp)‚ü©

lemma iso_closure_respects_iso (P : morphism_property C) : P.iso_closure.respects_iso :=
begin
  split,
  { intros A X‚ÇÅ X‚ÇÇ e f hf,
    rcases hf with ‚ü®Y‚ÇÅ, Y‚ÇÇ, e‚ÇÅ, e‚ÇÇ, f', hf', sq‚ü©,
    exact ‚ü®Y‚ÇÅ, Y‚ÇÇ, e ‚â™‚â´ e‚ÇÅ, e‚ÇÇ, f', hf', comm_sq.mk (by simp [sq.w])‚ü©, },
  { intros X‚ÇÅ X‚ÇÇ Z e f hf,
    rcases hf with ‚ü®Y‚ÇÅ, Y‚ÇÇ, e‚ÇÅ, e‚ÇÇ, f', hf', sq‚ü©,
    exact ‚ü®Y‚ÇÅ, Y‚ÇÇ, e‚ÇÅ, e.symm ‚â™‚â´ e‚ÇÇ, f', hf', comm_sq.mk (by simp [sq.w])‚ü©, },
end

def inverse_image' {D : Type*} [category D] (P : morphism_property D) (F : C ‚•§ D) :
  morphism_property C := (P.inverse_image F).iso_closure

end morphism_property

class Comm_sq {C‚ÇÅ C‚ÇÇ D‚ÇÅ D‚ÇÇ : Type*} [category C‚ÇÅ] [category C‚ÇÇ] [category D‚ÇÅ] [category D‚ÇÇ]
  (F : C‚ÇÅ ‚•§ C‚ÇÇ) (G‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (G‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) (F' : D‚ÇÅ ‚•§ D‚ÇÇ) :=
(iso : G‚ÇÅ ‚ãô F' ‚âÖ F ‚ãô G‚ÇÇ)

namespace localization

section

variables {C‚ÇÅ C‚ÇÇ D‚ÇÅ D‚ÇÇ : Type*} [category C‚ÇÅ] [category C‚ÇÇ] [category D‚ÇÅ] [category D‚ÇÇ]
  {I : C‚ÇÅ ‚•§ C‚ÇÇ} {I' : D‚ÇÅ ‚•§ D‚ÇÇ} {L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ} {L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ}
  (h : Comm_sq I L‚ÇÅ L‚ÇÇ I')
  (W‚ÇÅ : morphism_property C‚ÇÅ) (W‚ÇÇ : morphism_property C‚ÇÇ)
  [L‚ÇÅ.is_localization W‚ÇÅ] [L‚ÇÇ.is_localization W‚ÇÇ]
  (R : C‚ÇÇ ‚•§ D‚ÇÅ) (R' : D‚ÇÇ ‚•§ D‚ÇÅ) [hR : lifting L‚ÇÇ W‚ÇÇ R R']
  (Œ∑ : R ‚ãô I' ‚âÖ L‚ÇÇ)
  (Œµ : I ‚ãô R ‚âÖ L‚ÇÅ)

include h W‚ÇÅ hR Œµ Œ∑

def lifting_equivalence : D‚ÇÅ ‚âå D‚ÇÇ :=
begin
  refine (equivalence.mk I' R' _ _),
  { haveI : lifting L‚ÇÅ W‚ÇÅ (I ‚ãô L‚ÇÇ) I' := ‚ü®h.iso‚ü©,
    let e : (I ‚ãô L‚ÇÇ) ‚ãô R' ‚âÖ L‚ÇÅ,
    { calc (I ‚ãô L‚ÇÇ) ‚ãô R' ‚âÖ I ‚ãô L‚ÇÇ ‚ãô R' : functor.associator _ _ _
      ... ‚âÖ I ‚ãô R : iso_whisker_left _ (lifting.iso _ W‚ÇÇ _ _)
      ... ‚âÖ L‚ÇÅ : Œµ, },
    haveI : lifting L‚ÇÅ W‚ÇÅ L‚ÇÅ (I' ‚ãô R') := lifting.of_isos _ _ e (iso.refl _),
    exact lifting.uniq L‚ÇÅ W‚ÇÅ L‚ÇÅ _ _, },
  { haveI : lifting L‚ÇÇ W‚ÇÇ L‚ÇÇ (R' ‚ãô I') := lifting.of_isos _ _ Œ∑ (iso.refl _),
    exact lifting.uniq L‚ÇÇ W‚ÇÇ L‚ÇÇ _ _, },
end

lemma lifting_equivalence_counit_iso_app (X : C‚ÇÇ) :
  (lifting_equivalence h W‚ÇÅ W‚ÇÇ R R' Œ∑ Œµ).counit_iso.app (L‚ÇÇ.obj X) =
  I'.map_iso ((lifting.iso L‚ÇÇ W‚ÇÇ R R').app X) ‚â™‚â´ Œ∑.app X :=
begin
  ext,
  dsimp [lifting_equivalence, equivalence.mk],
  simp only [lifting.uniq_hom_app, lifting.of_isos_iso, iso.refl_symm,
    lifting.comp_right_iso, iso.trans_hom, iso_whisker_left_hom,
    iso.refl_hom, whisker_left_id', iso_whisker_right_hom, id_comp,
    nat_trans.comp_app, whisker_right_app, lifting.id_iso,
    functor.right_unitor_inv_app, comp_id],
end

def lifting_is_equivalence : is_equivalence I' :=
is_equivalence.of_equivalence (lifting_equivalence h W‚ÇÅ W‚ÇÇ R R' Œ∑ Œµ)

end

end localization

section

variables {C‚ÇÅ C‚ÇÇ D : Type*} [category C‚ÇÅ] [category C‚ÇÇ] [category D]
  (L‚ÇÅ : C‚ÇÅ ‚•§ D) (W‚ÇÅ : morphism_property C‚ÇÅ) (L‚ÇÇ : C‚ÇÇ ‚•§ D) (W‚ÇÇ : morphism_property C‚ÇÇ)
  (E : C‚ÇÇ ‚âå C‚ÇÅ) (hW‚ÇÅ : W‚ÇÅ ‚äÜ W‚ÇÇ.inverse_image' E.inverse) (hW‚ÇÇ : W‚ÇÇ.is_inverted_by L‚ÇÇ)
  [L‚ÇÅ.is_localization W‚ÇÅ] (iso : E.functor ‚ãô L‚ÇÅ ‚âÖ L‚ÇÇ)

include iso hW‚ÇÅ hW‚ÇÇ

def functor.is_localization.of_equivalence' :
  L‚ÇÇ.is_localization W‚ÇÇ :=
begin
  have h‚ÇÅ : W‚ÇÇ.is_inverted_by L‚ÇÇ := hW‚ÇÇ,
  have h‚ÇÇ : W‚ÇÅ.is_inverted_by (E.inverse ‚ãô W‚ÇÇ.Q) := Œª X‚ÇÅ X‚ÇÇ f hf, begin
    rcases hW‚ÇÅ f hf with ‚ü®Y‚ÇÅ, Y‚ÇÇ, e‚ÇÅ, e‚ÇÇ, f', hf', sq‚ü©,
    dsimp,
    have eq := sq.w,
    rw [‚Üê cancel_mono (e‚ÇÇ.inv), assoc, e‚ÇÇ.hom_inv_id, comp_id, assoc] at eq,
    rw eq,
    simp only [functor.map_comp],
    haveI := localization.inverts_W W‚ÇÇ.Q W‚ÇÇ _ hf',
    apply_instance,
  end,
  let I' := localization.construction.lift L‚ÇÇ h‚ÇÅ,
  let C : Comm_sq E.functor W‚ÇÇ.Q L‚ÇÅ I' := ‚ü®localization.lifting.iso W‚ÇÇ.Q W‚ÇÇ L‚ÇÇ I' ‚â™‚â´ iso.symm‚ü©,
  let iso‚ÇÅ : (E.inverse ‚ãô W‚ÇÇ.Q) ‚ãô I' ‚âÖ L‚ÇÅ,
  { calc (E.inverse ‚ãô W‚ÇÇ.Q) ‚ãô I' ‚âÖ E.inverse ‚ãô (W‚ÇÇ.Q ‚ãô I') : functor.associator _ _ _
    ... ‚âÖ E.inverse ‚ãô (E.functor ‚ãô L‚ÇÅ) : iso_whisker_left _ C.iso
    ... ‚âÖ (E.inverse ‚ãô E.functor) ‚ãô L‚ÇÅ : (functor.associator _ _ _).symm
    ... ‚âÖ ùü≠ _ ‚ãô L‚ÇÅ : iso_whisker_right E.counit_iso _
    ... ‚âÖ L‚ÇÅ : functor.left_unitor _, },
  let iso‚ÇÇ : E.functor ‚ãô E.inverse ‚ãô W‚ÇÇ.Q ‚âÖ W‚ÇÇ.Q,
  { calc E.functor ‚ãô E.inverse ‚ãô W‚ÇÇ.Q ‚âÖ (E.functor ‚ãô E.inverse) ‚ãô W‚ÇÇ.Q :
      (functor.associator _ _ _).symm
    ... ‚âÖ ùü≠ _ ‚ãô W‚ÇÇ.Q : iso_whisker_right E.unit_iso.symm _
    ... ‚âÖ W‚ÇÇ.Q : functor.left_unitor _, },
  exact
  { inverts_W := h‚ÇÅ,
    is_equivalence := localization.lifting_is_equivalence C W‚ÇÇ W‚ÇÅ (E.inverse ‚ãô W‚ÇÇ.Q)
      (localization.lift (E.inverse ‚ãô W‚ÇÇ.Q) h‚ÇÇ L‚ÇÅ) iso‚ÇÅ iso‚ÇÇ, }
end

end

section

variables {C‚ÇÅ C‚ÇÇ D‚ÇÅ D‚ÇÇ : Type*} [category C‚ÇÅ] [category C‚ÇÇ] [category D‚ÇÅ] [category D‚ÇÇ]
  (E : C‚ÇÅ ‚âå C‚ÇÇ) (E' : D‚ÇÅ ‚âå D‚ÇÇ) {L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ} {L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ}
  (H : Comm_sq E.functor L‚ÇÅ L‚ÇÇ E'.functor)
  (W‚ÇÅ : morphism_property C‚ÇÅ) (W‚ÇÇ : morphism_property C‚ÇÇ)
  (hW‚ÇÅ : W‚ÇÅ.is_inverted_by L‚ÇÅ)
  (hW‚ÇÇ : W‚ÇÇ ‚äÜ W‚ÇÅ.inverse_image' E.inverse)
  [L‚ÇÇ.is_localization W‚ÇÇ]

include H hW‚ÇÅ hW‚ÇÇ

def functor.is_localization.of_equivalence'' : L‚ÇÅ.is_localization W‚ÇÅ :=
begin
  haveI : (E.functor ‚ãô L‚ÇÇ).is_localization W‚ÇÅ,
  { refine functor.is_localization.of_equivalence' L‚ÇÇ W‚ÇÇ (E.functor ‚ãô L‚ÇÇ)
      W‚ÇÅ E hW‚ÇÇ _ (iso.refl _),
    rw ‚Üê morphism_property.is_inverted_by.iff_of_iso W‚ÇÅ H.iso,
    exact morphism_property.is_inverted_by.of_comp _ _ hW‚ÇÅ _, },
  haveI := functor.is_localization.of_iso W‚ÇÅ H.iso.symm,
  refine functor.is_localization.of_equivalence (L‚ÇÅ ‚ãô E'.functor) W‚ÇÅ L‚ÇÅ E'.symm _,
  calc (L‚ÇÅ ‚ãô E'.functor) ‚ãô E'.symm.functor ‚âÖ L‚ÇÅ ‚ãô E'.functor ‚ãô E'.symm.functor :
    functor.associator _ _ _
  ... ‚âÖ L‚ÇÅ ‚ãô ùü≠ D‚ÇÅ : iso_whisker_left _ E'.unit_iso.symm
  ... ‚âÖ L‚ÇÅ : functor.right_unitor _,
end

end

end category_theory
