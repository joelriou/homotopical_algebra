/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import for_mathlib.category_theory.localization.construction2

noncomputable theory

open category_theory.category category_theory

namespace category_theory

namespace functor

lemma assoc {C‚ÇÅ C‚ÇÇ C‚ÇÉ C‚ÇÑ : Type*} [category C‚ÇÅ] [category C‚ÇÇ] [category C‚ÇÉ] [category C‚ÇÑ]
  (F‚ÇÅ : C‚ÇÅ ‚•§ C‚ÇÇ) (F‚ÇÇ : C‚ÇÇ ‚•§ C‚ÇÉ) (F‚ÇÉ : C‚ÇÉ ‚•§ C‚ÇÑ) :
  (F‚ÇÅ ‚ãô F‚ÇÇ) ‚ãô F‚ÇÉ = F‚ÇÅ ‚ãô F‚ÇÇ ‚ãô F‚ÇÉ := by refl

section

variables {C D : Type*} [category C] [category D] (F : C ‚•§ D) [full F] [faithful F]

@[simp]
lemma preimage_iso_refl (X : C) : F.preimage_iso (iso.refl (F.obj X)) = iso.refl X :=
begin
  ext,
  apply F.map_injective,
  simp only [preimage_iso_hom, iso.refl_hom, preimage_id],
end

@[simp]
lemma preimage_iso_symm {X Y : C} (e : F.obj X ‚âÖ F.obj Y) :
  F.preimage_iso e.symm = (F.preimage_iso e).symm :=
begin
  ext,
  apply F.map_injective,
  simp only [preimage_iso_hom, iso.symm_hom, map_comp, image_preimage, iso.hom_inv_id, map_id],
end

@[simp]
lemma preimage_iso_trans {X Y Z : C} (e : F.obj X ‚âÖ F.obj Y) (f : F.obj Y ‚âÖ F.obj Z) :
  F.preimage_iso (e.trans f) = (F.preimage_iso e).trans (F.preimage_iso f) :=
begin
  ext,
  apply F.map_injective,
  simp only [preimage_iso_hom, iso.trans_hom, map_comp, image_preimage],
end

@[simp]
lemma image_preimage_iso {X Y : C} (e : F.obj X ‚âÖ F.obj Y) : F.map_iso (F.preimage_iso e) = e :=
by tidy

end

end functor


variables {C D : Type*} [category C] [category D]
variables (L : C ‚•§ D) (W : morphism_property C)
variables (E : Type*) [category E]

namespace functor

class is_localization :=
(inverts_W : W.is_inverted_by L)
(is_equivalence : is_equivalence (localization.construction.lift L inverts_W))

instance Q_is_localization : W.Q.is_localization W :=
{ inverts_W := W.Q_inverts,
  is_equivalence := begin
    suffices : localization.construction.lift W.Q W.Q_inverts = ùü≠ _,
    { rw this, apply_instance, },
    apply localization.construction.uniq,
    simpa only [localization.construction.fac],
  end, }

end functor

namespace localization

structure strict_universal_property_fixed_target :=
(inverts_W : W.is_inverted_by L)
(lift : Œ† (F : C ‚•§ E) (hF : W.is_inverted_by F), D ‚•§ E)
(fac : Œ† (F : C ‚•§ E) (hF : W.is_inverted_by F), L ‚ãô lift F hF = F)
(uniq : Œ† (F‚ÇÅ F‚ÇÇ : D ‚•§ E) (h : L ‚ãô F‚ÇÅ = L ‚ãô F‚ÇÇ), F‚ÇÅ = F‚ÇÇ)

def strict_universal_property_fixed_target.for_Q : strict_universal_property_fixed_target W.Q W E :=
{ inverts_W := W.Q_inverts,
  lift := construction.lift,
  fac := construction.fac,
  uniq := construction.uniq, }

end localization

namespace functor

variables (h‚ÇÅ : localization.strict_universal_property_fixed_target L W D)
  (h‚ÇÇ : localization.strict_universal_property_fixed_target L W W.localization)

namespace is_localization.mk'

lemma unit_eq :
  ùü≠ W.localization = localization.construction.lift L h‚ÇÅ.inverts_W ‚ãô h‚ÇÇ.lift W.Q W.Q_inverts :=
begin
  apply localization.construction.uniq,
  rw [‚Üê functor.assoc, localization.construction.fac, h‚ÇÇ.fac, functor.comp_id],
end

lemma counit_eq :
  h‚ÇÇ.lift W.Q W.Q_inverts ‚ãô localization.construction.lift L h‚ÇÅ.inverts_W = ùü≠ D :=
begin
  apply h‚ÇÅ.uniq,
  rw [‚Üê functor.assoc, h‚ÇÇ.fac, localization.construction.fac, functor.comp_id],
end

def equivalence : W.localization ‚âå D :=
{ functor := localization.construction.lift L h‚ÇÅ.inverts_W,
  inverse := h‚ÇÇ.lift W.Q W.Q_inverts,
  unit_iso := eq_to_iso (unit_eq L W h‚ÇÅ h‚ÇÇ),
  counit_iso := eq_to_iso (counit_eq L W h‚ÇÅ h‚ÇÇ),
  functor_unit_iso_comp' := Œª X, by simpa only [eq_to_iso.hom, eq_to_hom_app, eq_to_hom_map,
    eq_to_hom_trans, eq_to_hom_refl], }

def equivalence_obj_equiv' : W.localization ‚âÉ D :=
{ to_fun := (is_localization.mk'.equivalence L W h‚ÇÅ h‚ÇÇ).functor.obj,
  inv_fun := (is_localization.mk'.equivalence L W h‚ÇÅ h‚ÇÇ).inverse.obj,
  left_inv := congr_obj (unit_eq L W h‚ÇÅ h‚ÇÇ).symm,
  right_inv := congr_obj (counit_eq L W h‚ÇÅ h‚ÇÇ), }

lemma obj_bijective : function.bijective L.obj :=
((localization.construction.obj_equiv W).trans (equivalence_obj_equiv' L W h‚ÇÅ h‚ÇÇ)).bijective

end is_localization.mk'

def is_localization.mk' :
  is_localization L W :=
{ inverts_W := h‚ÇÅ.inverts_W,
  is_equivalence := is_equivalence.of_equivalence (is_localization.mk'.equivalence L W h‚ÇÅ h‚ÇÇ), }

end functor

namespace localization

variable [L.is_localization W]
include L W

def as_localization : L.is_localization W := infer_instance

lemma inverts_W : W.is_inverted_by L := (as_localization _ _).inverts_W

@[simps]
def iso_of_W {X Y : C} (f : X ‚ü∂ Y) (hf : W f) : L.obj X ‚âÖ L.obj Y :=
begin
  haveI : is_iso (L.map f) := inverts_W L W f hf,
  exact as_iso (L.map f),
end

instance is_equivalence_from_model := (as_localization L W).is_equivalence

def equivalence_from_model : W.localization ‚âå D :=
(localization.construction.lift L (inverts_W L W)).as_equivalence

def Q_comp_equivalence_from_model_functor_iso :
  W.Q ‚ãô (equivalence_from_model L W).functor ‚âÖ L := eq_to_iso (construction.fac _ _)

def comp_equivalence_from_model_inverse_iso :
  L ‚ãô (equivalence_from_model L W).inverse ‚âÖ W.Q :=
begin
  let Œ± := Q_comp_equivalence_from_model_functor_iso L W,
  calc L ‚ãô (equivalence_from_model L W).inverse ‚âÖ _ : iso_whisker_right Œ±.symm _
  ... ‚âÖ W.Q ‚ãô ((equivalence_from_model L W).functor ‚ãô (equivalence_from_model L W).inverse) :
    functor.associator _ _ _
  ... ‚âÖ W.Q ‚ãô ùü≠ _ : iso_whisker_left _ ((equivalence_from_model L W).unit_iso.symm)
  ... ‚âÖ W.Q : functor.right_unitor _,
end

lemma ess_surj : ess_surj L :=
‚ü®Œª X, ‚ü®(construction.obj_equiv W).inv_fun ((equivalence_from_model L W).inverse.obj X),
    nonempty.intro ((Q_comp_equivalence_from_model_functor_iso L W).symm.app _ ‚â™‚â´
    (equivalence_from_model L W).counit_iso.app X)‚ü©‚ü©

def whiskering_left_functor : (D ‚•§ E) ‚•§ W.functors_inverting E :=
full_subcategory.lift _ ((whiskering_left _ _ E).obj L)
  (morphism_property.is_inverted_by.of_comp W L (as_localization L W).inverts_W)

@[simps]
def functor_equivalence‚ÇÄ : (D ‚•§ E) ‚âå (W.functors_inverting E) :=
(equivalence.congr_left (equivalence_from_model L W).symm).trans
  (construction.whiskering_left_equivalence W E)

lemma functor_equivalence‚ÇÄ_functor_iso :
  (functor_equivalence‚ÇÄ L W E).functor ‚âÖ whiskering_left_functor L W E :=
nat_iso.of_components (Œª F, eq_to_iso begin
  ext,
  change (W.Q ‚ãô (localization.construction.lift L (inverts_W L W))) ‚ãô F = L ‚ãô F,
  rw construction.fac,
end)
begin
  intros F‚ÇÅ F‚ÇÇ œÑ,
  ext X,
  dsimp [whiskering_left_functor, whisker_left],
  erw [nat_trans.comp_app, nat_trans.comp_app],
  simp only [functor_equivalence‚ÇÄ_functor_map_app],
  dsimp [equivalence_from_model, morphism_property.Q],
  erw [eq_to_hom_app, eq_to_hom_app, eq_to_hom_refl, eq_to_hom_refl, comp_id, id_comp],
  all_goals
  { change (W.Q ‚ãô (localization.construction.lift L (inverts_W L W))) ‚ãô _ = L ‚ãô _,
    rw construction.fac, },
end

instance : is_equivalence (whiskering_left_functor L W E) :=
is_equivalence.of_iso (functor_equivalence‚ÇÄ_functor_iso L W E) (is_equivalence.of_equivalence _)

def functor_equivalence : (D ‚•§ E) ‚âå (W.functors_inverting E) :=
(whiskering_left_functor L W E).as_equivalence

section

variables [hL : L.is_localization W] (E)

include hL
@[nolint unused_arguments]
def whiskering_left_functor' :
  (D ‚•§ E) ‚•§ (C ‚•§ E) := (whiskering_left C D E).obj L

lemma whiskering_left_functor'_eq :
  whiskering_left_functor' L W E =
    localization.whiskering_left_functor L W E ‚ãô induced_functor _ := rfl

variable {E}

@[simp]
def whiskering_left_functor'_obj
  (F : D ‚•§ E) : (whiskering_left_functor' L W E).obj F = L ‚ãô F := rfl

instance : full (whiskering_left_functor' L W E) :=
by { rw whiskering_left_functor'_eq, apply_instance, }

instance : faithful (whiskering_left_functor' L W E) :=
by { rw whiskering_left_functor'_eq, apply_instance, }

omit hL

/-- When `L : C ‚•§ D` is a localization functor for `W : morphism_property C` and
`F : C ‚•§ E` is a functor, we shall that `F' : D ‚•§ E` lifts `F` if the obvious diagram
is commutative up to an isomorphism. -/
class lifting (F : C ‚•§ E) (F' : D ‚•§ E) := (iso [] : L ‚ãô F' ‚âÖ F)

namespace lifting

/-def F {F : C ‚•§ E} {F' : D ‚•§ E} (h : lifting L W F F') : W.functors_inverting E :=
‚ü®F, begin
  rw ‚Üê morphism_property.is_inverted_by.iff_of_iso W (lifting.iso L W F F'),
  exact morphism_property.is_inverted_by.of_comp W L (as_localization L W).inverts_W F',
end‚ü©-/

variables (L W)

def uniq (F : C ‚•§ E) (F'‚ÇÅ F'‚ÇÇ : D ‚•§ E) [lifting L W F F'‚ÇÅ] [lifting L W F F'‚ÇÇ] :
  F'‚ÇÅ ‚âÖ F'‚ÇÇ :=
(whiskering_left_functor' L W E).preimage_iso ((iso L W F F'‚ÇÅ).trans (iso L W F F'‚ÇÇ).symm)

lemma uniq_refl (F : C ‚•§ E) (F' : D ‚•§ E) [lifting L W F F'] :
  uniq L W F F' F' = iso.refl F' :=
begin
  dsimp only [uniq],
  simpa only [iso.self_symm_id] using functor.preimage_iso_refl _ _,
end

lemma uniq_symm (F : C ‚•§ E) (F'‚ÇÅ F'‚ÇÇ : D ‚•§ E) [lifting L W F F'‚ÇÅ] [lifting L W F F'‚ÇÇ] :
  (uniq L W F F'‚ÇÅ F'‚ÇÇ).symm = uniq L W F F'‚ÇÇ F'‚ÇÅ :=
by { erw ‚Üê functor.preimage_iso_symm, congr' 1, }

lemma uniq_trans (F : C ‚•§ E) (F'‚ÇÅ F'‚ÇÇ F'‚ÇÉ : D ‚•§ E)
  [h‚ÇÅ : lifting L W F F'‚ÇÅ] [h‚ÇÇ : lifting L W F F'‚ÇÇ] [h‚ÇÉ : lifting L W F F'‚ÇÉ] :
  uniq L W F F'‚ÇÅ F'‚ÇÇ ‚â™‚â´ uniq L W F F'‚ÇÇ F'‚ÇÉ = uniq L W F F'‚ÇÅ F'‚ÇÉ :=
begin
  erw ‚Üê functor.preimage_iso_trans,
  congr' 1,
  simp only [iso.trans_assoc, iso.symm_self_id_assoc],
end

lemma uniq_whiskering (F : C ‚•§ E) (F'‚ÇÅ F'‚ÇÇ : D ‚•§ E) [lifting L W F F'‚ÇÅ]
  [lifting L W F F'‚ÇÇ] :
  iso_whisker_left L (uniq L W F F'‚ÇÅ F'‚ÇÇ) = (iso L W F F'‚ÇÅ).trans (iso L W F F'‚ÇÇ).symm :=
functor.image_preimage_iso _ _

lemma uniq_app (F : C ‚•§ E) (F'‚ÇÅ F'‚ÇÇ : D ‚•§ E) [lifting L W F F'‚ÇÅ] [lifting L W F F'‚ÇÇ]
  (X : C) : (uniq L W F F'‚ÇÅ F'‚ÇÇ).app (L.obj X) = (iso L W F F'‚ÇÅ).app X ‚â™‚â´ (iso L W F F'‚ÇÇ).symm.app X :=
congr_arg (Œª (e : ((_ : C ‚•§ E) ‚âÖ _)), e.app X) (uniq_whiskering L W F F'‚ÇÅ F'‚ÇÇ)

@[simp]
lemma uniq_hom_app (F : C ‚•§ E) (F'‚ÇÅ F'‚ÇÇ : D ‚•§ E) [lifting L W F F'‚ÇÅ] [lifting L W F F'‚ÇÇ]
  (X : C) : (uniq L W F F'‚ÇÅ F'‚ÇÇ).hom.app (L.obj X) = (iso L W F F'‚ÇÅ).hom.app X ‚â´ (iso L W F F'‚ÇÇ).inv.app X :=
begin
  change ((uniq L W F F'‚ÇÅ F'‚ÇÇ).app (L.obj X)).hom = _,
  simpa only [uniq_app],
end

@[simp]
lemma uniq_inv_app (F : C ‚•§ E) (F'‚ÇÅ F'‚ÇÇ : D ‚•§ E) [lifting L W F F'‚ÇÅ] [lifting L W F F'‚ÇÇ]
  (X : C) : (uniq L W F F'‚ÇÅ F'‚ÇÇ).inv.app (L.obj X) = (iso L W F F'‚ÇÇ).hom.app X ‚â´ (iso L W F F'‚ÇÅ).inv.app X :=
begin
  change ((uniq L W F F'‚ÇÅ F'‚ÇÇ).app (L.obj X)).inv = _,
  simpa only [uniq_app],
end

@[simps]
instance comp_right {E' : Type*} [category E'] (F : C ‚•§ E) (F' : D ‚•§ E) [lifting L W F F']
  (G : E ‚•§ E') : lifting L W (F ‚ãô G) (F' ‚ãô G) :=
‚ü®iso_whisker_right (iso L W F F') G‚ü©

@[simps]
instance id : lifting L W L (ùü≠ D) :=
‚ü®functor.right_unitor L‚ü©

@[simps]
def of_isos {F‚ÇÅ F‚ÇÇ : C ‚•§ E} {F'‚ÇÅ F'‚ÇÇ : D ‚•§ E} (e : F‚ÇÅ ‚âÖ F‚ÇÇ) (e' : F'‚ÇÅ ‚âÖ F'‚ÇÇ)
  [lifting L W F‚ÇÅ F'‚ÇÅ] : lifting L W F‚ÇÇ F'‚ÇÇ :=
‚ü®iso_whisker_left L e'.symm ‚â™‚â´ iso L W F‚ÇÅ F'‚ÇÅ ‚â™‚â´ e‚ü©

omit L

instance (F : C ‚•§ D) (hF : W.is_inverted_by F) : lifting W.Q W F (construction.lift F hF) :=
‚ü®eq_to_iso (construction.fac F hF)‚ü©

end lifting

lemma nat_trans_ext {F‚ÇÅ F‚ÇÇ : D ‚•§ E} (œÑ œÑ' : F‚ÇÅ ‚ü∂ F‚ÇÇ)
  (h : ‚àÄ (X : C), œÑ.app (L.obj X) = œÑ'.app (L.obj X)) : œÑ = œÑ' :=
begin
  haveI : category_theory.ess_surj L := ess_surj L W,
  ext Y,
  rw [‚Üê cancel_epi (F‚ÇÅ.map (L.obj_obj_preimage_iso Y).hom), œÑ.naturality, œÑ'.naturality, h],
end

def lift_nat_trans (F‚ÇÅ F‚ÇÇ : C ‚•§ E) (F‚ÇÅ' F‚ÇÇ' : D ‚•§ E) [lifting L W F‚ÇÅ F‚ÇÅ']
  [h‚ÇÇ : lifting L W F‚ÇÇ F‚ÇÇ'] (œÑ : F‚ÇÅ ‚ü∂ F‚ÇÇ) : F‚ÇÅ' ‚ü∂ F‚ÇÇ' :=
(whiskering_left_functor' L W E).preimage ((lifting.iso L W F‚ÇÅ F‚ÇÅ').hom ‚â´ œÑ ‚â´ (lifting.iso L W F‚ÇÇ F‚ÇÇ').inv)

@[simp]
lemma comp_lift_nat_trans (F‚ÇÅ F‚ÇÇ F‚ÇÉ : C ‚•§ E) (F‚ÇÅ' F‚ÇÇ' F‚ÇÉ' : D ‚•§ E)
  [h‚ÇÅ : lifting L W F‚ÇÅ F‚ÇÅ'] [h‚ÇÇ : lifting L W F‚ÇÇ F‚ÇÇ'] [h‚ÇÉ : lifting L W F‚ÇÉ F‚ÇÉ']
  (œÑ : F‚ÇÅ ‚ü∂ F‚ÇÇ) (œÑ' : F‚ÇÇ ‚ü∂ F‚ÇÉ) :
  lift_nat_trans L W F‚ÇÅ F‚ÇÇ F‚ÇÅ' F‚ÇÇ' œÑ ‚â´ lift_nat_trans L W F‚ÇÇ F‚ÇÉ F‚ÇÇ' F‚ÇÉ' œÑ' =
  lift_nat_trans L W F‚ÇÅ F‚ÇÉ F‚ÇÅ' F‚ÇÉ' (œÑ ‚â´ œÑ') :=
begin
  dsimp only [lift_nat_trans],
  simp only [‚Üê preimage_comp, assoc, iso.inv_hom_id_assoc],
end

@[simp]
lemma lift_nat_trans_id (F : C ‚•§ E) (F' : D ‚•§ E) [h : lifting L W F F'] :
  lift_nat_trans L W F F F' F' (ùüô F) = ùüô F' :=
begin
  dsimp only [lift_nat_trans],
  simp only [id_comp, iso.hom_inv_id, preimage_id],
end

def lift_nat_iso (F‚ÇÅ F‚ÇÇ : C ‚•§ E) (F‚ÇÅ' F‚ÇÇ' : D ‚•§ E) [h‚ÇÅ : lifting L W F‚ÇÅ F‚ÇÅ'] [h‚ÇÇ : lifting L W F‚ÇÇ F‚ÇÇ']
  (e : F‚ÇÅ ‚âÖ F‚ÇÇ) : F‚ÇÅ' ‚âÖ F‚ÇÇ' :=
{ hom := lift_nat_trans L W F‚ÇÅ F‚ÇÇ F‚ÇÅ' F‚ÇÇ' e.hom,
  inv := lift_nat_trans L W F‚ÇÇ F‚ÇÅ F‚ÇÇ' F‚ÇÅ' e.inv, }

@[simp]
lemma lift_nat_trans_app (F‚ÇÅ F‚ÇÇ : C ‚•§ E) (F‚ÇÅ' F‚ÇÇ' : D ‚•§ E) [lifting L W F‚ÇÅ F‚ÇÅ']
  [lifting L W F‚ÇÇ F‚ÇÇ'] (œÑ : F‚ÇÅ ‚ü∂ F‚ÇÇ) (X : C) :
  (lift_nat_trans L W F‚ÇÅ F‚ÇÇ F‚ÇÅ' F‚ÇÇ' œÑ).app (L.obj X) =
    (lifting.iso L W F‚ÇÅ F‚ÇÅ').hom.app X ‚â´ œÑ.app X ‚â´ ((lifting.iso L W F‚ÇÇ F‚ÇÇ')).inv.app X :=
congr_app (functor.image_preimage (whiskering_left_functor' L W E) _) X

variables {W E}

def lift (F : C ‚•§ E) (hF : W.is_inverted_by F) (L : C ‚•§ D) [hL : L.is_localization W] :
  D ‚•§ E :=
(functor_equivalence L W E).inverse.obj ‚ü®F, hF‚ü©

instance lift_is_lifting (F : C ‚•§ E) (hF : W.is_inverted_by F) (L : C ‚•§ D)
  [hL : L.is_localization W] : lifting L W F (lift F hF L) :=
‚ü®(induced_functor _).map_iso ((functor_equivalence L W E).counit_iso.app ‚ü®F, hF‚ü©)‚ü©

@[simps]
def fac (F : C ‚•§ E) (hF : W.is_inverted_by F) (L : C ‚•§ D) [hL : L.is_localization W] :
  L ‚ãô lift F hF L ‚âÖ F :=
lifting.iso _ W _ _

end

section

variables {D‚ÇÅ D‚ÇÇ : Type*} [category D‚ÇÅ] [category D‚ÇÇ] (L‚ÇÅ : C ‚•§ D‚ÇÅ) (L‚ÇÇ : C ‚•§ D‚ÇÇ)
  [h‚ÇÅ : L‚ÇÅ.is_localization W] [h‚ÇÇ : L‚ÇÇ.is_localization W]

include h‚ÇÅ h‚ÇÇ
omit L

def uniq_equivalence : D‚ÇÅ ‚âå D‚ÇÇ :=
(equivalence_from_model L‚ÇÅ W).symm.trans (equivalence_from_model L‚ÇÇ W)

def comp_uniq_equivalence_functor_iso :
  L‚ÇÅ ‚ãô (uniq_equivalence W L‚ÇÅ L‚ÇÇ).functor ‚âÖ L‚ÇÇ :=
calc L‚ÇÅ ‚ãô (uniq_equivalence W L‚ÇÅ L‚ÇÇ).functor ‚âÖ (L‚ÇÅ ‚ãô
  (equivalence_from_model L‚ÇÅ W).inverse) ‚ãô (equivalence_from_model L‚ÇÇ W).functor : by refl
... ‚âÖ W.Q ‚ãô (equivalence_from_model L‚ÇÇ W).functor :
  iso_whisker_right (comp_equivalence_from_model_inverse_iso L‚ÇÅ W) _
... ‚âÖ L‚ÇÇ : Q_comp_equivalence_from_model_functor_iso L‚ÇÇ W

end

end localization

namespace functor

namespace is_localization

def of_equivalence {E : Type*} [category E] (L' : C ‚•§ E) (eq : D ‚âå E)
  [L.is_localization W] (e : L ‚ãô eq.functor ‚âÖ L') : L'.is_localization W :=
begin
  have h : W.is_inverted_by L',
  { rw ‚Üê morphism_property.is_inverted_by.iff_of_iso W e,
    exact morphism_property.is_inverted_by.of_comp W L (localization.inverts_W L W) eq.functor, },
  let F‚ÇÅ := localization.construction.lift L (localization.inverts_W L W),
  let F‚ÇÇ := localization.construction.lift L' h,
  letI : localization.lifting W.Q W (L ‚ãô eq.functor) F‚ÇÇ :=
    localization.lifting.of_isos W.Q W e.symm (iso.refl F‚ÇÇ),
  let e : F‚ÇÅ ‚ãô eq.functor ‚âÖ F‚ÇÇ := localization.lifting.uniq W.Q W (L ‚ãô eq.functor) _ _,
  exact
  { inverts_W := h,
    is_equivalence := is_equivalence.of_iso e infer_instance, },
end

end is_localization

end functor

end category_theory
