/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import for_mathlib.category_theory.functor_misc
import category_theory.localization.predicate
import for_mathlib.category_theory.morphism_property_misc

noncomputable theory

open category_theory.category category_theory

namespace category_theory

structure Comm_sq {C‚ÇÅ C‚ÇÇ D‚ÇÅ D‚ÇÇ : Type*} [category C‚ÇÅ] [category C‚ÇÇ] [category D‚ÇÅ] [category D‚ÇÇ]
  (F : C‚ÇÅ ‚•§ C‚ÇÇ) (G‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (G‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) (F' : D‚ÇÅ ‚•§ D‚ÇÇ) :=
(iso [] : G‚ÇÅ ‚ãô F' ‚âÖ F ‚ãô G‚ÇÇ)

namespace Comm_sq

variables {C‚ÇÅ C‚ÇÇ C‚ÇÉ C‚ÇÑ D‚ÇÅ D‚ÇÇ D‚ÇÉ D‚ÇÑ : Type*}
  [category C‚ÇÅ] [category C‚ÇÇ] [category C‚ÇÉ] [category C‚ÇÑ]
  [category D‚ÇÅ] [category D‚ÇÇ] [category D‚ÇÉ] [category D‚ÇÑ]

@[simps]
def horiz_refl {C D : Type*} [category C] [category D]
  (F : C ‚•§ D) : Comm_sq (ùü≠ C) F F (ùü≠ D) := ‚ü®iso.refl _‚ü©

def horiz_comp
  {L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ} {L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ} {L‚ÇÉ : C‚ÇÉ ‚•§ D‚ÇÉ}
  {F : C‚ÇÅ ‚•§ C‚ÇÇ} {F' : D‚ÇÅ ‚•§ D‚ÇÇ} {G : C‚ÇÇ ‚•§ C‚ÇÉ} {G' : D‚ÇÇ ‚•§ D‚ÇÉ}
  (H‚ÇÅ‚ÇÇ : Comm_sq F L‚ÇÅ L‚ÇÇ F') (H‚ÇÇ‚ÇÉ : Comm_sq G L‚ÇÇ L‚ÇÉ G') :
  Comm_sq (F ‚ãô G) L‚ÇÅ L‚ÇÉ (F' ‚ãô G') :=
‚ü®calc L‚ÇÅ ‚ãô F' ‚ãô G' ‚âÖ (L‚ÇÅ ‚ãô F') ‚ãô G' : (functor.associator _ _ _).symm
  ... ‚âÖ (F ‚ãô L‚ÇÇ) ‚ãô G' : iso_whisker_right H‚ÇÅ‚ÇÇ.iso _
  ... ‚âÖ F ‚ãô (L‚ÇÇ ‚ãô G') : functor.associator _ _ _
  ... ‚âÖ F ‚ãô (G ‚ãô L‚ÇÉ) : iso_whisker_left _ H‚ÇÇ‚ÇÉ.iso
  ... ‚âÖ (F ‚ãô G) ‚ãô L‚ÇÉ : (functor.associator _ _ _).symm‚ü©

@[simp]
lemma horiz_comp_iso_hom_app
  {L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ} {L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ} {L‚ÇÉ : C‚ÇÉ ‚•§ D‚ÇÉ}
  {F : C‚ÇÅ ‚•§ C‚ÇÇ} {F' : D‚ÇÅ ‚•§ D‚ÇÇ} {G : C‚ÇÇ ‚•§ C‚ÇÉ} {G' : D‚ÇÇ ‚•§ D‚ÇÉ}
  (H‚ÇÅ‚ÇÇ : Comm_sq F L‚ÇÅ L‚ÇÇ F') (H‚ÇÇ‚ÇÉ : Comm_sq G L‚ÇÇ L‚ÇÉ G') (X‚ÇÅ : C‚ÇÅ):
  (H‚ÇÅ‚ÇÇ.horiz_comp H‚ÇÇ‚ÇÉ).iso.hom.app X‚ÇÅ =
    G'.map (H‚ÇÅ‚ÇÇ.iso.hom.app X‚ÇÅ) ‚â´ H‚ÇÇ‚ÇÉ.iso.hom.app (F.obj X‚ÇÅ) :=
by { dsimp [horiz_comp], simp only [id_comp, comp_id], }

@[simp]
lemma horiz_comp_iso_inv_app
  {L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ} {L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ} {L‚ÇÉ : C‚ÇÉ ‚•§ D‚ÇÉ}
  {F : C‚ÇÅ ‚•§ C‚ÇÇ} {F' : D‚ÇÅ ‚•§ D‚ÇÇ} {G : C‚ÇÇ ‚•§ C‚ÇÉ} {G' : D‚ÇÇ ‚•§ D‚ÇÉ}
  (H‚ÇÅ‚ÇÇ : Comm_sq F L‚ÇÅ L‚ÇÇ F') (H‚ÇÇ‚ÇÉ : Comm_sq G L‚ÇÇ L‚ÇÉ G') (X‚ÇÅ : C‚ÇÅ):
  (H‚ÇÅ‚ÇÇ.horiz_comp H‚ÇÇ‚ÇÉ).iso.inv.app X‚ÇÅ =
    H‚ÇÇ‚ÇÉ.iso.inv.app (F.obj X‚ÇÅ) ‚â´ G'.map (H‚ÇÅ‚ÇÇ.iso.inv.app X‚ÇÅ) :=
by { dsimp [horiz_comp], simp only [comp_id, id_comp], }

@[simp]
lemma horiz_comp_refl_iso {L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ} {L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ} {F : C‚ÇÅ ‚•§ C‚ÇÇ} {F' : D‚ÇÅ ‚•§ D‚ÇÇ}
  (H : Comm_sq F L‚ÇÅ L‚ÇÇ F') : (H.horiz_comp (horiz_refl L‚ÇÇ)).iso = H.iso :=
by { ext X, rw horiz_comp_iso_hom_app, apply comp_id, }

@[simp]
lemma refl_horiz_comp_iso {L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ} {L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ} {F : C‚ÇÅ ‚•§ C‚ÇÇ} {F' : D‚ÇÅ ‚•§ D‚ÇÇ}
  (H : Comm_sq F L‚ÇÅ L‚ÇÇ F') : ((horiz_refl L‚ÇÅ).horiz_comp H).iso = H.iso :=
by { ext X, rw horiz_comp_iso_hom_app, dsimp, rw [F'.map_id, id_comp], }

lemma horiz_comp_assoc_iso
  {L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ} {L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ} {L‚ÇÉ : C‚ÇÉ ‚•§ D‚ÇÉ} {L‚ÇÑ : C‚ÇÑ ‚•§ D‚ÇÑ}
  {F : C‚ÇÅ ‚•§ C‚ÇÇ} {F' : D‚ÇÅ ‚•§ D‚ÇÇ} {G : C‚ÇÇ ‚•§ C‚ÇÉ} {G' : D‚ÇÇ ‚•§ D‚ÇÉ} {K : C‚ÇÉ ‚•§ C‚ÇÑ} {K' : D‚ÇÉ ‚•§ D‚ÇÑ}
  (H‚ÇÅ‚ÇÇ : Comm_sq F L‚ÇÅ L‚ÇÇ F') (H‚ÇÇ‚ÇÉ : Comm_sq G L‚ÇÇ L‚ÇÉ G') (H‚ÇÉ‚ÇÑ : Comm_sq K L‚ÇÉ L‚ÇÑ K') :
  ((H‚ÇÅ‚ÇÇ.horiz_comp H‚ÇÇ‚ÇÉ).horiz_comp H‚ÇÉ‚ÇÑ).iso = (H‚ÇÅ‚ÇÇ.horiz_comp (H‚ÇÇ‚ÇÉ.horiz_comp H‚ÇÉ‚ÇÑ)).iso :=
by { ext X, simpa only [horiz_comp_iso_hom_app, functor.map_comp, assoc, functor.comp_map], }

end Comm_sq

variables {C D : Type*} [category C] [category D]
variables (L : C ‚•§ D) (W : morphism_property C)
variables (E : Type*) [category E]

namespace functor

/-class is_localization : Prop :=
(inverts : W.is_inverted_by L)
(nonempty_is_equivalence : nonempty (is_equivalence (localization.construction.lift L inverts)))

instance Q_is_localization : W.Q.is_localization W :=
{ inverts := W.Q_inverts,
  nonempty_is_equivalence := begin
    suffices : localization.construction.lift W.Q W.Q_inverts = ùü≠ _,
    { apply nonempty.intro, rw this, apply_instance, },
    apply localization.construction.uniq,
    simpa only [localization.construction.fac],
  end, }-/

end functor

namespace localization

/-structure strict_universal_property_fixed_target :=
(inverts : W.is_inverted_by L)
(lift : Œ† (F : C ‚•§ E) (hF : W.is_inverted_by F), D ‚•§ E)
(fac : Œ† (F : C ‚•§ E) (hF : W.is_inverted_by F), L ‚ãô lift F hF = F)
(uniq : Œ† (F‚ÇÅ F‚ÇÇ : D ‚•§ E) (h : L ‚ãô F‚ÇÅ = L ‚ãô F‚ÇÇ), F‚ÇÅ = F‚ÇÇ)

def strict_universal_property_fixed_target.for_Q : strict_universal_property_fixed_target W.Q W E :=
{ inverts := W.Q_inverts,
  lift := construction.lift,
  fac := construction.fac,
  uniq := construction.uniq, }

def strict_universal_property_fixed_target.for_id (hW : W ‚äÜ morphism_property.isomorphisms C):
  strict_universal_property_fixed_target (ùü≠ C) W E :=
{ inverts := Œª X Y f hf, hW f hf,
  lift := Œª F hF, F,
  fac := Œª F hF, by { cases F, refl, },
  uniq := Œª F‚ÇÅ F‚ÇÇ eq, by { cases F‚ÇÅ, cases F‚ÇÇ, exact eq, }, }-/

end localization

namespace functor
/-
variables (h‚ÇÅ : localization.strict_universal_property_fixed_target L W D)
  (h‚ÇÇ : localization.strict_universal_property_fixed_target L W W.localization)

namespace is_localization.mk'

lemma unit_eq :
  ùü≠ W.localization = localization.construction.lift L h‚ÇÅ.inverts ‚ãô h‚ÇÇ.lift W.Q W.Q_inverts :=
begin
  apply localization.construction.uniq,
  rw [‚Üê functor.assoc, localization.construction.fac, h‚ÇÇ.fac, functor.comp_id],
end

lemma counit_eq :
  h‚ÇÇ.lift W.Q W.Q_inverts ‚ãô localization.construction.lift L h‚ÇÅ.inverts = ùü≠ D :=
begin
  apply h‚ÇÅ.uniq,
  rw [‚Üê functor.assoc, h‚ÇÇ.fac, localization.construction.fac, functor.comp_id],
end

def equivalence : W.localization ‚âå D :=
{ functor := localization.construction.lift L h‚ÇÅ.inverts,
  inverse := h‚ÇÇ.lift W.Q W.Q_inverts,
  unit_iso := eq_to_iso (unit_eq L W h‚ÇÅ h‚ÇÇ),
  counit_iso := eq_to_iso (counit_eq L W h‚ÇÅ h‚ÇÇ),
  functor_unit_iso_comp' := Œª X, by simpa only [eq_to_iso.hom, eq_to_hom_app, eq_to_hom_map,
    eq_to_hom_trans, eq_to_hom_refl], }

def equivalence_obj_equiv' : W.localization ‚âÉ D :=
{ to_fun := (is_localization.mk'.equivalence L W h‚ÇÅ h‚ÇÇ).functor.obj,
  inv_fun := (is_localization.mk'.equivalence L W h‚ÇÅ h‚ÇÇ).inverse.obj,
  left_inv := congr_obj (unit_eq L W h‚ÇÅ h‚ÇÇ).symm,
  right_inv := congr_obj (counit_eq L W h‚ÇÅ h‚ÇÇ), }

lemma obj_bijective : function.bijective L.obj :=
((localization.construction.obj_equiv W).trans (equivalence_obj_equiv' L W h‚ÇÅ h‚ÇÇ)).bijective

end is_localization.mk'

lemma is_localization.mk' :
  is_localization L W :=
{ inverts := h‚ÇÅ.inverts,
  nonempty_is_equivalence :=
    nonempty.intro (is_equivalence.of_equivalence (is_localization.mk'.equivalence L W h‚ÇÅ h‚ÇÇ)), }
-/
end functor

namespace localization

variable [L.is_localization W]
include L W

/-lemma inverts : W.is_inverted_by L := (as_localization _ _).inverts-/

@[simps]
def iso_of_hom' {X Y : C} (f : X ‚ü∂ Y) (hf : W f) : L.obj X ‚âÖ L.obj Y :=
begin
  haveI : is_iso (L.map f) := inverts L W f hf,
  exact as_iso (L.map f),
end

/-instance : is_equivalence (localization.construction.lift L (inverts L W)) :=
(as_localization L W).nonempty_is_equivalence.some

def equivalence_from_model : W.localization ‚âå D :=
(localization.construction.lift L (inverts L W)).as_equivalence

def Q_comp_equivalence_from_model_functor_iso :
  W.Q ‚ãô (equivalence_from_model L W).functor ‚âÖ L := eq_to_iso (construction.fac _ _)

def comp_equivalence_from_model_inverse_iso :
  L ‚ãô (equivalence_from_model L W).inverse ‚âÖ W.Q :=
begin
  let Œ± := Q_comp_equivalence_from_model_functor_iso L W,
  calc L ‚ãô (equivalence_from_model L W).inverse ‚âÖ _ : iso_whisker_right Œ±.symm _
  ... ‚âÖ W.Q ‚ãô ((equivalence_from_model L W).functor ‚ãô (equivalence_from_model L W).inverse) :
    functor.associator _ _ _
  ... ‚âÖ W.Q ‚ãô ùü≠ _ : iso_whisker_left _ ((equivalence_from_model L W).unit_iso.symm)
  ... ‚âÖ W.Q : functor.right_unitor _,
end

lemma ess_surj : ess_surj L :=
‚ü®Œª X, ‚ü®(construction.obj_equiv W).inv_fun ((equivalence_from_model L W).inverse.obj X),
    nonempty.intro ((Q_comp_equivalence_from_model_functor_iso L W).symm.app _ ‚â™‚â´
    (equivalence_from_model L W).counit_iso.app X)‚ü©‚ü©

def whiskering_left_functor : (D ‚•§ E) ‚•§ W.functors_inverting E :=
full_subcategory.lift _ ((whiskering_left _ _ E).obj L)
  (morphism_property.is_inverted_by.of_comp W L (inverts L W ))

instance : is_equivalence (whiskering_left_functor L W E) :=
begin
  refine is_equivalence.of_iso _ (is_equivalence.of_equivalence
    ((equivalence.congr_left (equivalence_from_model L W).symm).trans
    (construction.whiskering_left_equivalence W E))),
  refine nat_iso.of_components (Œª F, eq_to_iso begin
    ext,
    change (W.Q ‚ãô (localization.construction.lift L (inverts L W))) ‚ãô F = L ‚ãô F,
    rw construction.fac,
  end)
  (Œª F‚ÇÅ F‚ÇÇ œÑ, begin
    ext X,
    dsimp [equivalence_from_model, whisker_left, construction.whiskering_left_equivalence,
      construction.whiskering_left_equivalence.functor, whiskering_left_functor,
      morphism_property.Q],
    erw [nat_trans.comp_app, nat_trans.comp_app, eq_to_hom_app, eq_to_hom_app,
      eq_to_hom_refl, eq_to_hom_refl, comp_id, id_comp],
    all_goals
    { change (W.Q ‚ãô (localization.construction.lift L (inverts L W))) ‚ãô _ = L ‚ãô _,
      rw construction.fac, },
  end),
end

def functor_equivalence : (D ‚•§ E) ‚âå (W.functors_inverting E) :=
(whiskering_left_functor L W E).as_equivalence-/

section

variables (E)

--include hL
/-@[nolint unused_arguments]
def whiskering_left_functor' :
  (D ‚•§ E) ‚•§ (C ‚•§ E) := (whiskering_left C D E).obj L

lemma whiskering_left_functor'_eq :
  whiskering_left_functor' L W E =
    localization.whiskering_left_functor L W E ‚ãô induced_functor _ := rfl

variable {E}

@[simp]
def whiskering_left_functor'_obj
  (F : D ‚•§ E) : (whiskering_left_functor' L W E).obj F = L ‚ãô F := rfl

instance : full (whiskering_left_functor' L W E) :=
by { rw whiskering_left_functor'_eq, apply_instance, }

instance : faithful (whiskering_left_functor' L W E) :=
by { rw whiskering_left_functor'_eq, apply_instance, }

lemma nat_trans_ext {F‚ÇÅ F‚ÇÇ : D ‚•§ E} (œÑ œÑ' : F‚ÇÅ ‚ü∂ F‚ÇÇ)
  (h : ‚àÄ (X : C), œÑ.app (L.obj X) = œÑ'.app (L.obj X)) : œÑ = œÑ' :=
begin
  haveI : category_theory.ess_surj L := ess_surj L W,
  ext Y,
  rw [‚Üê cancel_epi (F‚ÇÅ.map (L.obj_obj_preimage_iso Y).hom), œÑ.naturality, œÑ'.naturality, h],
end

/-- When `L : C ‚•§ D` is a localization functor for `W : morphism_property C` and
`F : C ‚•§ E` is a functor, we shall say that `F' : D ‚•§ E` lifts `F` if the obvious diagram
is commutative up to an isomorphism. -/
class lifting (F : C ‚•§ E) (F' : D ‚•§ E) := (iso [] : L ‚ãô F' ‚âÖ F)

section

def lift_nat_trans (F‚ÇÅ F‚ÇÇ : C ‚•§ E) (F‚ÇÅ' F‚ÇÇ' : D ‚•§ E) [lifting L W F‚ÇÅ F‚ÇÅ']
  [h‚ÇÇ : lifting L W F‚ÇÇ F‚ÇÇ'] (œÑ : F‚ÇÅ ‚ü∂ F‚ÇÇ) : F‚ÇÅ' ‚ü∂ F‚ÇÇ' :=
(whiskering_left_functor' L W E).preimage ((lifting.iso L W F‚ÇÅ F‚ÇÅ').hom ‚â´ œÑ ‚â´ (lifting.iso L W F‚ÇÇ F‚ÇÇ').inv)

@[simp]
lemma lift_nat_trans_app (F‚ÇÅ F‚ÇÇ : C ‚•§ E) (F‚ÇÅ' F‚ÇÇ' : D ‚•§ E) [lifting L W F‚ÇÅ F‚ÇÅ']
  [lifting L W F‚ÇÇ F‚ÇÇ'] (œÑ : F‚ÇÅ ‚ü∂ F‚ÇÇ) (X : C) :
  (lift_nat_trans L W F‚ÇÅ F‚ÇÇ F‚ÇÅ' F‚ÇÇ' œÑ).app (L.obj X) =
    (lifting.iso L W F‚ÇÅ F‚ÇÅ').hom.app X ‚â´ œÑ.app X ‚â´ ((lifting.iso L W F‚ÇÇ F‚ÇÇ')).inv.app X :=
congr_app (functor.image_preimage (whiskering_left_functor' L W E) _) X

@[simp, reassoc]
lemma comp_lift_nat_trans (F‚ÇÅ F‚ÇÇ F‚ÇÉ : C ‚•§ E) (F‚ÇÅ' F‚ÇÇ' F‚ÇÉ' : D ‚•§ E)
  [h‚ÇÅ : lifting L W F‚ÇÅ F‚ÇÅ'] [h‚ÇÇ : lifting L W F‚ÇÇ F‚ÇÇ'] [h‚ÇÉ : lifting L W F‚ÇÉ F‚ÇÉ']
  (œÑ : F‚ÇÅ ‚ü∂ F‚ÇÇ) (œÑ' : F‚ÇÇ ‚ü∂ F‚ÇÉ) :
  lift_nat_trans L W F‚ÇÅ F‚ÇÇ F‚ÇÅ' F‚ÇÇ' œÑ ‚â´ lift_nat_trans L W F‚ÇÇ F‚ÇÉ F‚ÇÇ' F‚ÇÉ' œÑ' =
  lift_nat_trans L W F‚ÇÅ F‚ÇÉ F‚ÇÅ' F‚ÇÉ' (œÑ ‚â´ œÑ') :=
nat_trans_ext L W _ _
  (Œª X, by simp only [nat_trans.comp_app, lift_nat_trans_app, assoc, iso.inv_hom_id_app_assoc])

@[simp]
lemma lift_nat_trans_id (F : C ‚•§ E) (F' : D ‚•§ E) [h : lifting L W F F'] :
  lift_nat_trans L W F F F' F' (ùüô F) = ùüô F' :=
nat_trans_ext L W _ _
  (Œª X, by simpa only [lift_nat_trans_app, nat_trans.id_app, id_comp, iso.hom_inv_id_app])

@[simps]
def lift_nat_iso (F‚ÇÅ F‚ÇÇ : C ‚•§ E) (F‚ÇÅ' F‚ÇÇ' : D ‚•§ E)
  [h‚ÇÅ : lifting L W F‚ÇÅ F‚ÇÅ'] [h‚ÇÇ : lifting L W F‚ÇÇ F‚ÇÇ']
  (e : F‚ÇÅ ‚âÖ F‚ÇÇ) : F‚ÇÅ' ‚âÖ F‚ÇÇ' :=
{ hom := lift_nat_trans L W F‚ÇÅ F‚ÇÇ F‚ÇÅ' F‚ÇÇ' e.hom,
  inv := lift_nat_trans L W F‚ÇÇ F‚ÇÅ F‚ÇÇ' F‚ÇÅ' e.inv, }

end-/

variable {E}

namespace lifting

def uniq (F : C ‚•§ E) (F'‚ÇÅ F'‚ÇÇ : D ‚•§ E) [lifting L W F F'‚ÇÅ] [lifting L W F F'‚ÇÇ] :
  F'‚ÇÅ ‚âÖ F'‚ÇÇ := lift_nat_iso L W F F F'‚ÇÅ F'‚ÇÇ (iso.refl F)

@[simp]
lemma uniq_hom_app (F : C ‚•§ E) (F'‚ÇÅ F'‚ÇÇ : D ‚•§ E) [lifting L W F F'‚ÇÅ] [lifting L W F F'‚ÇÇ]
  (X : C) : (uniq L W F F'‚ÇÅ F'‚ÇÇ).hom.app (L.obj X) = (iso L W F F'‚ÇÅ).hom.app X ‚â´ (iso L W F F'‚ÇÇ).inv.app X :=
begin
  dsimp only [uniq],
  simp only [lift_nat_iso_hom, iso.refl_hom, lift_nat_trans_app, nat_trans.id_app, id_comp],
end

@[simp]
lemma uniq_inv_app (F : C ‚•§ E) (F'‚ÇÅ F'‚ÇÇ : D ‚•§ E) [lifting L W F F'‚ÇÅ] [lifting L W F F'‚ÇÇ]
  (X : C) : (uniq L W F F'‚ÇÅ F'‚ÇÇ).inv.app (L.obj X) = (iso L W F F'‚ÇÇ).hom.app X ‚â´ (iso L W F F'‚ÇÅ).inv.app X :=
begin
  dsimp only [uniq],
  simp only [lift_nat_iso_inv, iso.refl_inv, lift_nat_trans_app, nat_trans.id_app, id_comp],
end

variables (L W)

/-@[simps]
instance comp_right {E' : Type*} [category E'] (F : C ‚•§ E) (F' : D ‚•§ E) [lifting L W F F']
  (G : E ‚•§ E') : lifting L W (F ‚ãô G) (F' ‚ãô G) :=
‚ü®iso_whisker_right (iso L W F F') G‚ü©

@[simps]
instance id : lifting L W L (ùü≠ D) :=
‚ü®functor.right_unitor L‚ü©

@[simps]
def of_isos {F‚ÇÅ F‚ÇÇ : C ‚•§ E} {F'‚ÇÅ F'‚ÇÇ : D ‚•§ E} (e : F‚ÇÅ ‚âÖ F‚ÇÇ) (e' : F'‚ÇÅ ‚âÖ F'‚ÇÇ)
  [lifting L W F‚ÇÅ F'‚ÇÅ] : lifting L W F‚ÇÇ F'‚ÇÇ :=
‚ü®iso_whisker_left L e'.symm ‚â™‚â´ iso L W F‚ÇÅ F'‚ÇÅ ‚â™‚â´ e‚ü©-/

omit L

instance (F : C ‚•§ D) (hF : W.is_inverted_by F) : lifting W.Q W F (construction.lift F hF) :=
‚ü®eq_to_iso (construction.fac F hF)‚ü©

end lifting

section

omit L W

variables {C‚ÇÅ C‚ÇÇ D‚ÇÅ D‚ÇÇ : Type*} [category C‚ÇÅ] [category C‚ÇÇ] [category D‚ÇÅ]
  [category D‚ÇÇ] {L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ} {L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ} {F G : C‚ÇÅ ‚•§ C‚ÇÇ} {F' G' : D‚ÇÅ ‚•§ D‚ÇÇ}
  (hF : Comm_sq F L‚ÇÅ L‚ÇÇ F') (hG : Comm_sq G L‚ÇÅ L‚ÇÇ G') (W‚ÇÅ : morphism_property C‚ÇÅ)
  [L‚ÇÅ.is_localization W‚ÇÅ] (œÑ : F ‚ü∂ G)

include hF hG W‚ÇÅ œÑ

def lift_nat_trans' : F' ‚ü∂ G' :=
begin
  letI : lifting L‚ÇÅ W‚ÇÅ (F ‚ãô L‚ÇÇ) F' := ‚ü®hF.iso‚ü©,
  letI : lifting L‚ÇÅ W‚ÇÅ (G ‚ãô L‚ÇÇ) G' := ‚ü®hG.iso‚ü©,
  exact lift_nat_trans L‚ÇÅ W‚ÇÅ (F ‚ãô L‚ÇÇ) (G ‚ãô L‚ÇÇ) F' G' (œÑ ‚ó´ (ùüô L‚ÇÇ)),
end

@[simp]
lemma lift_nat_trans'_app (X‚ÇÅ : C‚ÇÅ) : (lift_nat_trans' hF hG W‚ÇÅ œÑ).app (L‚ÇÅ.obj X‚ÇÅ) =
  hF.iso.hom.app X‚ÇÅ ‚â´ L‚ÇÇ.map (œÑ.app X‚ÇÅ) ‚â´ hG.iso.inv.app X‚ÇÅ :=
begin
  dsimp only [lift_nat_trans'],
  rw lift_nat_trans_app,
  dsimp,
  rw id_comp,
end

omit hG œÑ

@[simp]
lemma lift_nat_trans'_id : lift_nat_trans' hF hF W‚ÇÅ (ùüô F) = ùüô F' :=
nat_trans_ext L‚ÇÅ W‚ÇÅ _ _ (Œª X, begin
  rw [lift_nat_trans'_app, nat_trans.id_app, L‚ÇÇ.map_id],
  dsimp,
  rw id_comp,
  apply iso.hom_inv_id_app,
end)

omit hF

@[simp, reassoc]
lemma comp_lift_nat_trans' {F‚ÇÅ F‚ÇÇ F‚ÇÉ : C‚ÇÅ ‚•§ C‚ÇÇ} {F‚ÇÅ' F‚ÇÇ' F‚ÇÉ' : D‚ÇÅ ‚•§ D‚ÇÇ}
  (H‚ÇÅ : Comm_sq F‚ÇÅ L‚ÇÅ L‚ÇÇ F‚ÇÅ') (H‚ÇÇ : Comm_sq F‚ÇÇ L‚ÇÅ L‚ÇÇ F‚ÇÇ') (H‚ÇÉ : Comm_sq F‚ÇÉ L‚ÇÅ L‚ÇÇ F‚ÇÉ')
  (œÑ : F‚ÇÅ ‚ü∂ F‚ÇÇ) (œÑ' : F‚ÇÇ ‚ü∂ F‚ÇÉ) :
  lift_nat_trans' H‚ÇÅ H‚ÇÇ W‚ÇÅ œÑ ‚â´ lift_nat_trans' H‚ÇÇ H‚ÇÉ W‚ÇÅ œÑ' =
    lift_nat_trans' H‚ÇÅ H‚ÇÉ W‚ÇÅ (œÑ ‚â´ œÑ') :=
nat_trans_ext L‚ÇÅ W‚ÇÅ _ _ (Œª X, by simp only [nat_trans.comp_app, lift_nat_trans'_app,
  assoc, iso.inv_hom_id_app_assoc, functor.map_comp])

include hF hG

@[simps]
def lift_nat_iso' (e : F ‚âÖ G) : F' ‚âÖ G' :=
{ hom := lift_nat_trans' hF hG W‚ÇÅ e.hom,
  inv := lift_nat_trans' hG hF W‚ÇÅ e.inv, }

end

section

omit L W

variables {C‚ÇÅ C‚ÇÇ C‚ÇÉ D‚ÇÅ D‚ÇÇ D‚ÇÉ : Type*} [category C‚ÇÅ] [category C‚ÇÇ] [category C‚ÇÉ]
  [category D‚ÇÅ] [category D‚ÇÇ] [category D‚ÇÉ]
  {F‚ÇÅ G‚ÇÅ : C‚ÇÅ ‚•§ C‚ÇÇ} {F‚ÇÇ G‚ÇÇ : C‚ÇÇ ‚•§ C‚ÇÉ}
  {F'‚ÇÅ G'‚ÇÅ : D‚ÇÅ ‚•§ D‚ÇÇ} {F'‚ÇÇ G'‚ÇÇ : D‚ÇÇ ‚•§ D‚ÇÉ}
  {L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ} {L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ} {L‚ÇÉ : C‚ÇÉ ‚•§ D‚ÇÉ}
  (H‚ÇÅ‚ÇÇ : Comm_sq F‚ÇÅ L‚ÇÅ L‚ÇÇ F'‚ÇÅ) (H‚ÇÇ‚ÇÉ : Comm_sq F‚ÇÇ L‚ÇÇ L‚ÇÉ F'‚ÇÇ)
  (K‚ÇÅ‚ÇÇ : Comm_sq G‚ÇÅ L‚ÇÅ L‚ÇÇ G'‚ÇÅ) (K‚ÇÇ‚ÇÉ : Comm_sq G‚ÇÇ L‚ÇÇ L‚ÇÉ G'‚ÇÇ)
  (W‚ÇÅ : morphism_property C‚ÇÅ) (W‚ÇÇ : morphism_property C‚ÇÇ)
  [L‚ÇÅ.is_localization W‚ÇÅ] [L‚ÇÇ.is_localization W‚ÇÇ]
  (œÑ : F‚ÇÅ ‚ü∂ G‚ÇÅ) (œÑ' : F‚ÇÇ ‚ü∂ G‚ÇÇ)

lemma hcomp_lift_nat_trans' :
  lift_nat_trans' H‚ÇÅ‚ÇÇ K‚ÇÅ‚ÇÇ W‚ÇÅ œÑ ‚ó´ lift_nat_trans' H‚ÇÇ‚ÇÉ K‚ÇÇ‚ÇÉ W‚ÇÇ œÑ' =
    lift_nat_trans' (H‚ÇÅ‚ÇÇ.horiz_comp H‚ÇÇ‚ÇÉ) (K‚ÇÅ‚ÇÇ.horiz_comp K‚ÇÇ‚ÇÉ) W‚ÇÅ (œÑ ‚ó´ œÑ') :=
nat_trans_ext L‚ÇÅ W‚ÇÅ _ _ (Œª X, begin
  simp only [lift_nat_trans'_app, nat_trans.hcomp_app, assoc, G'‚ÇÇ.map_comp],
  rw ‚Üê nat_trans.naturality_assoc,
  erw lift_nat_trans'_app,
  simp only [assoc, Comm_sq.horiz_comp_iso_hom_app, Comm_sq.horiz_comp_iso_inv_app,
    functor.map_comp],
  erw ‚Üê K‚ÇÇ‚ÇÉ.iso.inv.naturality_assoc,
  refl,
end)

end

variables {W E}

/-def lift (F : C ‚•§ E) (hF : W.is_inverted_by F) (L : C ‚•§ D) [hL : L.is_localization W] :
  D ‚•§ E :=
(functor_equivalence L W E).inverse.obj ‚ü®F, hF‚ü©

instance lift_is_lifting (F : C ‚•§ E) (hF : W.is_inverted_by F) (L : C ‚•§ D)
  [hL : L.is_localization W] : lifting L W F (lift F hF L) :=
‚ü®(induced_functor _).map_iso ((functor_equivalence L W E).counit_iso.app ‚ü®F, hF‚ü©)‚ü©

@[simps]
def fac (F : C ‚•§ E) (hF : W.is_inverted_by F) (L : C ‚•§ D) [hL : L.is_localization W] :
  L ‚ãô lift F hF L ‚âÖ F :=
lifting.iso _ W _ _-/

end

section

variables {D‚ÇÅ D‚ÇÇ : Type*} [category D‚ÇÅ] [category D‚ÇÇ] (L‚ÇÅ : C ‚•§ D‚ÇÅ) (L‚ÇÇ : C ‚•§ D‚ÇÇ)
  [h‚ÇÅ : L‚ÇÅ.is_localization W] [h‚ÇÇ : L‚ÇÇ.is_localization W]

include h‚ÇÅ h‚ÇÇ
omit L

def uniq_equivalence : D‚ÇÅ ‚âå D‚ÇÇ :=
(equivalence_from_model L‚ÇÅ W).symm.trans (equivalence_from_model L‚ÇÇ W)

def comp_uniq_equivalence_functor_iso :
  L‚ÇÅ ‚ãô (uniq_equivalence W L‚ÇÅ L‚ÇÇ).functor ‚âÖ L‚ÇÇ :=
calc L‚ÇÅ ‚ãô (uniq_equivalence W L‚ÇÅ L‚ÇÇ).functor ‚âÖ (L‚ÇÅ ‚ãô
  (equivalence_from_model L‚ÇÅ W).inverse) ‚ãô (equivalence_from_model L‚ÇÇ W).functor : by refl
... ‚âÖ W.Q ‚ãô (equivalence_from_model L‚ÇÇ W).functor :
  iso_whisker_right (comp_equivalence_from_model_inverse_iso L‚ÇÅ W) _
... ‚âÖ L‚ÇÇ : Q_comp_equivalence_from_model_functor_iso L‚ÇÇ W

end

end localization

namespace functor

namespace is_localization

def of_equivalence {E : Type*} [category E] (L' : C ‚•§ E) (eq : D ‚âå E)
  [L.is_localization W] (e : L ‚ãô eq.functor ‚âÖ L') : L'.is_localization W :=
begin
  have h : W.is_inverted_by L',
  { rw ‚Üê morphism_property.is_inverted_by.iff_of_iso W e,
    exact morphism_property.is_inverted_by.of_comp W L (localization.inverts L W) eq.functor, },
  let F‚ÇÅ := localization.construction.lift L (localization.inverts L W),
  let F‚ÇÇ := localization.construction.lift L' h,
  letI : localization.lifting W.Q W (L ‚ãô eq.functor) F‚ÇÇ :=
    localization.lifting.of_isos W.Q W e.symm (iso.refl F‚ÇÇ),
  let e : F‚ÇÅ ‚ãô eq.functor ‚âÖ F‚ÇÇ := localization.lifting.uniq W.Q W (L ‚ãô eq.functor) _ _,
  exact
  { inverts := h,
    nonempty_is_equivalence := nonempty.intro (is_equivalence.of_iso e infer_instance) },
end

/-def of_iso {L‚ÇÅ L‚ÇÇ : C ‚•§ D} (e : L‚ÇÅ ‚âÖ L‚ÇÇ) [L‚ÇÅ.is_localization W] : L‚ÇÇ.is_localization W :=
begin
  have h : W.is_inverted_by L‚ÇÇ := Œª X Y f hf,
    by simpa only [is_iso_map_iff_of_nat_iso e.symm] using localization.inverts L‚ÇÅ W f hf,
  let F‚ÇÅ := localization.construction.lift L‚ÇÅ (localization.inverts L‚ÇÅ W),
  let F‚ÇÇ := localization.construction.lift L‚ÇÇ h,
  haveI : localization.lifting W.Q W L‚ÇÅ F‚ÇÇ :=
    localization.lifting.of_isos W.Q W e.symm (iso.refl F‚ÇÇ),
  exact
  { inverts := h,
    nonempty_is_equivalence := nonempty.intro
      (is_equivalence.of_iso (localization.lifting.uniq W.Q W L‚ÇÅ F‚ÇÅ F‚ÇÇ) infer_instance), },
end-/

end is_localization

end functor

namespace localization

lemma id_is_localization (hW : W ‚äÜ morphism_property.isomorphisms C):
  (ùü≠ C).is_localization W :=
functor.is_localization.mk' _ _
  (strict_universal_property_fixed_target_id _ _ hW)
  (strict_universal_property_fixed_target_id _ _ hW)


instance identity_functor_is_localization' :
  (ùü≠ C).is_localization (morphism_property.isomorphisms C) :=
functor.is_localization.mk' _ _
  (strict_universal_property_fixed_target_id _ _ (Œª X Y f hf, hf))
  (strict_universal_property_fixed_target_id _ _ (Œª X Y f hf, hf))

end localization

namespace localization

variables {C‚ÇÅ C‚ÇÇ C‚ÇÉ D‚ÇÅ D‚ÇÇ D‚ÇÉ : Type*} [category C‚ÇÅ] [category C‚ÇÇ] [category C‚ÇÉ]
  [category D‚ÇÅ] [category D‚ÇÇ] [category D‚ÇÉ]
  {L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ} {L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ} {L‚ÇÉ : C‚ÇÉ ‚•§ D‚ÇÉ}
  {F‚ÇÅ‚ÇÇ : C‚ÇÅ ‚•§ C‚ÇÇ} {F‚ÇÇ‚ÇÉ : C‚ÇÇ ‚•§ C‚ÇÉ} {F'‚ÇÅ‚ÇÇ : D‚ÇÅ ‚•§ D‚ÇÇ} {F'‚ÇÇ‚ÇÉ : D‚ÇÇ ‚•§ D‚ÇÉ}
  {F‚ÇÅ‚ÇÉ : C‚ÇÅ ‚•§ C‚ÇÉ} {F'‚ÇÅ‚ÇÉ : D‚ÇÅ ‚•§ D‚ÇÉ}
  {G‚ÇÅ‚ÇÇ : C‚ÇÅ ‚•§ C‚ÇÇ} {G‚ÇÇ‚ÇÉ : C‚ÇÇ ‚•§ C‚ÇÉ} {G'‚ÇÅ‚ÇÇ : D‚ÇÅ ‚•§ D‚ÇÇ} {G'‚ÇÇ‚ÇÉ : D‚ÇÇ ‚•§ D‚ÇÉ}
  {G‚ÇÅ‚ÇÉ : C‚ÇÅ ‚•§ C‚ÇÉ} {G'‚ÇÅ‚ÇÉ : D‚ÇÅ ‚•§ D‚ÇÉ}
  (H‚ÇÅ‚ÇÇ : Comm_sq F‚ÇÅ‚ÇÇ L‚ÇÅ L‚ÇÇ F'‚ÇÅ‚ÇÇ) (H‚ÇÇ‚ÇÉ : Comm_sq F‚ÇÇ‚ÇÉ L‚ÇÇ L‚ÇÉ F'‚ÇÇ‚ÇÉ)
  (H‚ÇÅ‚ÇÉ : Comm_sq F‚ÇÅ‚ÇÉ L‚ÇÅ L‚ÇÉ F'‚ÇÅ‚ÇÉ)
  (K‚ÇÅ‚ÇÇ : Comm_sq G‚ÇÅ‚ÇÇ L‚ÇÅ L‚ÇÇ G'‚ÇÅ‚ÇÇ) (K‚ÇÇ‚ÇÉ : Comm_sq G‚ÇÇ‚ÇÉ L‚ÇÇ L‚ÇÉ G'‚ÇÇ‚ÇÉ)
  (K‚ÇÅ‚ÇÉ : Comm_sq G‚ÇÅ‚ÇÉ L‚ÇÅ L‚ÇÉ G'‚ÇÅ‚ÇÉ)
  (e : F‚ÇÅ‚ÇÇ ‚ãô F‚ÇÇ‚ÇÉ ‚âÖ F‚ÇÅ‚ÇÉ)
  (e' : G‚ÇÅ‚ÇÇ ‚ãô G‚ÇÇ‚ÇÉ ‚âÖ G‚ÇÅ‚ÇÉ)
  (W‚ÇÅ : morphism_property C‚ÇÅ) (W‚ÇÇ : morphism_property C‚ÇÇ)
  [L‚ÇÅ.is_localization W‚ÇÅ]

include H‚ÇÅ‚ÇÇ H‚ÇÇ‚ÇÉ H‚ÇÅ‚ÇÉ e W‚ÇÅ W‚ÇÇ

def lifting_comp_iso : F'‚ÇÅ‚ÇÇ ‚ãô F'‚ÇÇ‚ÇÉ ‚âÖ F'‚ÇÅ‚ÇÉ :=
begin
  letI : lifting L‚ÇÅ W‚ÇÅ (F‚ÇÅ‚ÇÉ ‚ãô L‚ÇÉ) F'‚ÇÅ‚ÇÉ := ‚ü®H‚ÇÅ‚ÇÉ.iso‚ü©,
  letI : lifting L‚ÇÅ W‚ÇÅ (F‚ÇÅ‚ÇÉ ‚ãô L‚ÇÉ) (F'‚ÇÅ‚ÇÇ ‚ãô F'‚ÇÇ‚ÇÉ) := ‚ü®(H‚ÇÅ‚ÇÇ.horiz_comp H‚ÇÇ‚ÇÉ).iso ‚â™‚â´ iso_whisker_right e _‚ü©,
  exact lifting.uniq L‚ÇÅ W‚ÇÅ (F‚ÇÅ‚ÇÉ ‚ãô L‚ÇÉ) _ _,
end

@[simp]
def lifting_comp_iso_hom : (lifting_comp_iso H‚ÇÅ‚ÇÇ H‚ÇÇ‚ÇÉ H‚ÇÅ‚ÇÉ e W‚ÇÅ W‚ÇÇ).hom =
  lift_nat_trans' (H‚ÇÅ‚ÇÇ.horiz_comp H‚ÇÇ‚ÇÉ) H‚ÇÅ‚ÇÉ W‚ÇÅ e.hom :=
begin
  apply nat_trans_ext L‚ÇÅ W‚ÇÅ,
  intro X,
  dsimp only [lifting_comp_iso],
  simp only [lifting.uniq_hom_app, iso.trans_hom, iso_whisker_right_hom, nat_trans.comp_app,
    whisker_right_app, assoc, lift_nat_trans'_app],
end

@[simp]
def lifting_comp_iso_inv : (lifting_comp_iso H‚ÇÅ‚ÇÇ H‚ÇÇ‚ÇÉ H‚ÇÅ‚ÇÉ e W‚ÇÅ W‚ÇÇ).inv =
  lift_nat_trans' H‚ÇÅ‚ÇÉ (H‚ÇÅ‚ÇÇ.horiz_comp H‚ÇÇ‚ÇÉ) W‚ÇÅ e.inv :=
begin
  apply nat_trans_ext L‚ÇÅ W‚ÇÅ,
  intro X,
  dsimp only [lifting_comp_iso],
  simp only [lifting.uniq_inv_app, iso.trans_inv, iso_whisker_right_inv, nat_trans.comp_app,
    whisker_right_app, lift_nat_trans'_app],
end

variables (œÑ‚ÇÅ‚ÇÇ : F‚ÇÅ‚ÇÇ ‚ü∂ G‚ÇÅ‚ÇÇ) (œÑ‚ÇÇ‚ÇÉ : F‚ÇÇ‚ÇÉ ‚ü∂ G‚ÇÇ‚ÇÉ) (œÑ‚ÇÅ‚ÇÉ : F‚ÇÅ‚ÇÉ ‚ü∂ G‚ÇÅ‚ÇÉ)
  (comm_œÑ : (œÑ‚ÇÅ‚ÇÇ ‚ó´ œÑ‚ÇÇ‚ÇÉ) ‚â´ e'.hom = e.hom ‚â´ œÑ‚ÇÅ‚ÇÉ)

include comm_œÑ

lemma lifting_comp_iso_nat_trans_compatibility [L‚ÇÇ.is_localization W‚ÇÇ] :
  (lift_nat_trans' H‚ÇÅ‚ÇÇ K‚ÇÅ‚ÇÇ W‚ÇÅ œÑ‚ÇÅ‚ÇÇ ‚ó´ lift_nat_trans' H‚ÇÇ‚ÇÉ K‚ÇÇ‚ÇÉ W‚ÇÇ œÑ‚ÇÇ‚ÇÉ) ‚â´
    (lifting_comp_iso K‚ÇÅ‚ÇÇ K‚ÇÇ‚ÇÉ K‚ÇÅ‚ÇÉ e' W‚ÇÅ W‚ÇÇ).hom =
  (lifting_comp_iso H‚ÇÅ‚ÇÇ H‚ÇÇ‚ÇÉ H‚ÇÅ‚ÇÉ e W‚ÇÅ W‚ÇÇ).hom ‚â´ lift_nat_trans' H‚ÇÅ‚ÇÉ K‚ÇÅ‚ÇÉ W‚ÇÅ œÑ‚ÇÅ‚ÇÉ :=
by simp only [lifting_comp_iso_hom, comp_lift_nat_trans', hcomp_lift_nat_trans', ‚Üê comm_œÑ]

end localization

end category_theory
