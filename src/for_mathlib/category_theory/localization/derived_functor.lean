import for_mathlib.category_theory.localization.predicate
import category_theory.adjunction.limits

noncomputable theory

open category_theory category_theory.category

namespace category_theory

namespace functor

variables {C‚ÇÅ C‚ÇÇ C‚ÇÉ : Type*} [category C‚ÇÅ] [category C‚ÇÇ] [category C‚ÇÉ]
  (F : C‚ÇÅ ‚•§ C‚ÇÇ)

instance [is_equivalence F] :
  is_equivalence ((whiskering_left _ _ C‚ÇÉ).obj F) := sorry

end functor

namespace structured_arrow

variables {C‚ÇÄ C‚ÇÅ C‚ÇÇ C‚ÇÉ : Type*} [category C‚ÇÄ] [category C‚ÇÅ] [category C‚ÇÇ] [category C‚ÇÉ]
  (X‚ÇÉ X‚ÇÉ' : C‚ÇÉ) (f : X‚ÇÉ' ‚ü∂ X‚ÇÉ) (F : C‚ÇÅ ‚•§ C‚ÇÇ) (eF : C‚ÇÅ ‚âå C‚ÇÇ)
  (G G' G'' : C‚ÇÇ ‚•§ C‚ÇÉ) (œÑ œÑ' : G ‚ü∂ G') (œÑ'' : G' ‚ü∂ G'') (eG : G ‚âÖ G')

@[simps]
def whiskering_left : structured_arrow X‚ÇÉ (F ‚ãô G) ‚•§ structured_arrow X‚ÇÉ G :=
{ obj := Œª X‚ÇÇ, mk X‚ÇÇ.hom,
  map := Œª X‚ÇÇ X‚ÇÇ' œÜ, hom_mk (F.map œÜ.right) (w œÜ), }

def whiskering_left_equivalence :
equivalence (structured_arrow X‚ÇÉ (eF.functor ‚ãô G)) (structured_arrow X‚ÇÉ G) :=
{ functor := whiskering_left X‚ÇÉ eF.functor G,
  inverse := begin
    refine _ ‚ãô whiskering_left X‚ÇÉ eF.inverse (eF.functor ‚ãô G),
    sorry,
  end,
  unit_iso := sorry,
  counit_iso := sorry, }

instance [is_equivalence F] : is_equivalence (whiskering_left X‚ÇÉ F G) :=
is_equivalence.of_equivalence (whiskering_left_equivalence X‚ÇÉ (functor.as_equivalence F) G)

variables {X‚ÇÉ X‚ÇÉ'}

@[simps]
def precomp : structured_arrow X‚ÇÉ G ‚•§ structured_arrow X‚ÇÉ' G :=
{ obj := Œª X‚ÇÇ, mk (f ‚â´ X‚ÇÇ.hom),
  map := Œª X‚ÇÇ X‚ÇÇ' œÜ, hom_mk œÜ.right (by tidy), }

--instance [is_iso f] : is_equivalence (precomp f G) := sorry

variables {G G'} (X‚ÇÉ)

@[simps]
def postcomp : structured_arrow X‚ÇÉ G ‚•§ structured_arrow X‚ÇÉ G' :=
{ obj := Œª X‚ÇÇ, mk (X‚ÇÇ.hom ‚â´ œÑ.app X‚ÇÇ.right),
  map := Œª X‚ÇÇ X‚ÇÇ' œÜ, hom_mk œÜ.right begin
    dsimp,
    simp only [assoc, ‚Üê œÑ.naturality, w_assoc œÜ],
  end, }

variable (G)

@[simps]
def postcomp_id : postcomp X‚ÇÉ (ùüô G) ‚âÖ ùü≠ _ :=
nat_iso.of_components (Œª X, structured_arrow.iso_mk (iso.refl _) (by tidy)) (by tidy)

variable {G}

@[simps]
def postcomp_comp : postcomp X‚ÇÉ œÑ ‚ãô postcomp X‚ÇÉ œÑ'' ‚âÖ
  postcomp X‚ÇÉ (œÑ ‚â´ œÑ'') :=
nat_iso.of_components (Œª X, structured_arrow.iso_mk (iso.refl _) (by tidy)) (by tidy)

@[simps]
def postcomp_iso_of_eq (h : œÑ = œÑ') : postcomp X‚ÇÉ œÑ ‚âÖ postcomp X‚ÇÉ œÑ' :=
nat_iso.of_components (Œª X, structured_arrow.iso_mk (iso.refl _)
  (by { dsimp, rw [G'.map_id, comp_id, h], })) (by tidy)

@[simps]
def postcomp_iso : equivalence (structured_arrow X‚ÇÉ G) (structured_arrow X‚ÇÉ G') :=
{ functor := postcomp X‚ÇÉ eG.hom,
  inverse := postcomp X‚ÇÉ eG.inv,
  unit_iso := (postcomp_id X‚ÇÉ G).symm ‚â™‚â´ postcomp_iso_of_eq X‚ÇÉ _ _ eG.hom_inv_id.symm ‚â™‚â´
    (postcomp_comp _ _ _ _).symm,
  counit_iso := postcomp_comp _ _ _ _ ‚â™‚â´ postcomp_iso_of_eq X‚ÇÉ _ _ eG.inv_hom_id ‚â™‚â´
    (postcomp_id X‚ÇÉ G'), }

instance [is_iso œÑ] : is_equivalence (postcomp X‚ÇÉ œÑ) :=
is_equivalence.of_equivalence (postcomp_iso X‚ÇÉ (as_iso œÑ))

end structured_arrow

namespace functor

variables {C D H : Type*} [category C] [category D] [category H]
  (F : C ‚•§ D) (L : C ‚•§ H) (W : morphism_property C) [L.is_localization W]

class has_right_derived_functor : Prop :=
(has_initial' : limits.has_initial (structured_arrow F ((whiskering_left C _ D).obj W.Q)))

lemma has_right_derived_functor_iff :
  has_right_derived_functor F W ‚Üî
    limits.has_initial (structured_arrow F ((whiskering_left C H D).obj L)) :=
begin
  let Œ¶ :=
    structured_arrow.whiskering_left F ((whiskering_left _ _ _).obj
      (localization.equivalence_from_model L W).functor)
      ((whiskering_left C _ D).obj W.Q),
  let Œ¶' := structured_arrow.postcomp F ((whiskering_left _ _ D).map_iso
    (localization.Q_comp_equivalence_from_model_functor_iso L W)).inv,
  let e := as_equivalence (Œ¶' ‚ãô Œ¶),
  split,
  { intro h,
    haveI := h.has_initial',
    exact adjunction.has_colimits_of_shape_of_equivalence (Œ¶' ‚ãô Œ¶), },
  { introI,
    exact ‚ü®adjunction.has_colimits_of_shape_of_equivalence (inv (Œ¶' ‚ãô Œ¶))‚ü©, },
end

lemma has_right_derived_functor.has_initial [has_right_derived_functor F W] :
  limits.has_initial (structured_arrow F ((whiskering_left C H D).obj L)) :=
(has_right_derived_functor_iff F L W).1 infer_instance

def has_right_derived_functor.initial [has_right_derived_functor F W] :
  (structured_arrow F ((whiskering_left C H D).obj L)) :=
begin
  haveI := has_right_derived_functor.has_initial F L W,
  exact limits.initial _,
end

def derived_functor [has_right_derived_functor F W] : H ‚•§ D :=
(has_right_derived_functor.initial F L W).right

include L
def derived_functor_Œ± [has_right_derived_functor F W] : F ‚ü∂ L ‚ãô F.derived_functor L W :=
(has_right_derived_functor.initial F L W).hom

end functor

end category_theory
