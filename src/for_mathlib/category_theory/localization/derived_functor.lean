import for_mathlib.category_theory.localization.predicate
import category_theory.adjunction.limits
import category_theory.is_connected
import for_mathlib.category_theory.localization.products

noncomputable theory

open category_theory category_theory.category

namespace category_theory

@[simps]
instance localization.lifting.of_comp {C D E : Type*} [category C] [category D] [category E]
  (L : C ‚•§ D) (W : morphism_property C) [L.is_localization W] (F : D ‚•§ E) :
  localization.lifting L W (L ‚ãô F) F := ‚ü®iso.refl _‚ü©

section

variables (C : Type*) [category C]

inductive obj_rel : C ‚Üí C ‚Üí Prop
| of_hom ‚¶ÉX Y : C‚¶Ñ (f : X ‚ü∂ Y) : obj_rel X Y

def connected_components := quot (obj_rel C)

variable {C}

def to_connected_components (X : C) : connected_components C :=
quot.mk _ X

variable (C)

class is_preconnected' : Prop :=
(subsingleton_connected_components : subsingleton (connected_components C))

attribute [instance] is_preconnected'.subsingleton_connected_components

class is_connected' extends is_preconnected' C : Prop :=
[is_nonempty : nonempty C]

lemma connected_components.nat_trans_from_eq {D : Type*} [category D]
  (X Y : D) (Œ± : (functor.const C).obj X ‚ü∂ (functor.const C).obj Y)
  (j j' : C) (h : to_connected_components j = to_connected_components j') :
    Œ±.app j = (Œ±.app j' : X ‚ü∂ Y) :=
begin
  let Œ≤ : C ‚Üí (X ‚ü∂ Y) := Œª j, Œ±.app j,
  let l : connected_components C ‚Üí (X ‚ü∂ Y),
  { refine quot.lift Œ≤ _,
    rintro x y ‚ü®f‚ü©,
    dsimp [Œ≤],
    have eq := Œ±.naturality f,
    dsimp at eq,
    rw [id_comp, comp_id] at eq,
    rw eq, },
  have hl : ‚àÄ (j : C), Œ±.app j = l (to_connected_components j) := Œª j, rfl,
  simp only [hl, h],
end

lemma nat_trans_from_is_preconnected' {D : Type*} [category D]
  [is_preconnected' C] (X Y : D) (Œ± : (functor.const C).obj X ‚ü∂ (functor.const C).obj Y)
  (j j' : C) : Œ±.app j = (Œ±.app j' : X ‚ü∂ Y) :=
begin
  apply connected_components.nat_trans_from_eq,
  apply subsingleton.elim,
end

end

namespace morphism_property

variables {C : Type*} [category C] (W : morphism_property C)

class multiplicative : Prop :=
(contains_identities : W.contains_identities)
(comp [] : W.stable_under_composition)

section

variable [multiplicative W]

instance contains_identities_of_multiplicative : W.contains_identities :=
multiplicative.contains_identities

include W
@[protected, nolint unused_arguments]
structure category :=
(obj : C)

variable {W}

@[ext]
structure category.hom (X Y : W.category) :=
(f : X.obj ‚ü∂ Y.obj)
(hf : W f)

@[simps]
instance : category W.category :=
{ hom := category.hom,
  id := Œª X,
  { f := ùüô _,
    hf := contains_identities.id _ _, },
  comp := Œª X Y Z œÜ œÜ',
  { f := œÜ.f ‚â´ œÜ'.f,
    hf := multiplicative.comp W œÜ.f œÜ'.f œÜ.hf œÜ'.hf, }, }

end

end morphism_property

namespace functor

variables (C‚ÇÅ C‚ÇÇ C‚ÇÉ : Type*) [category C‚ÇÅ] [category C‚ÇÇ] [category C‚ÇÉ]
  (F : C‚ÇÅ ‚•§ C‚ÇÇ)

@[simps]
def whiskering_left_id : (whiskering_left C‚ÇÅ C‚ÇÅ C‚ÇÉ).obj (ùü≠ C‚ÇÅ) ‚âÖ ùü≠ _ :=
nat_iso.of_components (functor.left_unitor) (by tidy)

variables {C‚ÇÅ C‚ÇÇ}

@[simps]
def equivalence_whiskering_left (e : C‚ÇÅ ‚âå C‚ÇÇ) : (C‚ÇÇ ‚•§ C‚ÇÉ) ‚âå C‚ÇÅ ‚•§ C‚ÇÉ :=
{ functor := (whiskering_left _ _ _).obj e.functor,
  inverse := (whiskering_left _ _ _).obj e.inverse,
  unit_iso := (whiskering_left_id _ _).symm ‚â™‚â´ (whiskering_left _ _ C‚ÇÉ).map_iso e.counit_iso.symm,
  counit_iso := (whiskering_left _ _ C‚ÇÉ).map_iso e.unit_iso.symm ‚â™‚â´ whiskering_left_id _ _,
  functor_unit_iso_comp' := Œª F, begin
    ext X,
    dsimp,
    simp only [id_comp, comp_id, ‚Üê F.map_comp, equivalence.counit_inv_functor_comp, F.map_id],
  end, }

instance [is_equivalence F] :
  is_equivalence ((whiskering_left _ _ C‚ÇÉ).obj F) :=
is_equivalence.of_equivalence (equivalence_whiskering_left C‚ÇÉ (as_equivalence F))

end functor

namespace structured_arrow

variables {C‚ÇÄ C‚ÇÅ C‚ÇÇ C‚ÇÉ : Type*} [category C‚ÇÄ] [category C‚ÇÅ] [category C‚ÇÇ] [category C‚ÇÉ]
  (X‚ÇÉ X‚ÇÉ' : C‚ÇÉ) (f : X‚ÇÉ' ‚ü∂ X‚ÇÉ) (F : C‚ÇÅ ‚•§ C‚ÇÇ) (eF : C‚ÇÅ ‚âå C‚ÇÇ)
  (G G' G'' : C‚ÇÇ ‚•§ C‚ÇÉ) (œÑ œÑ' : G ‚ü∂ G') (œÑ'' : G' ‚ü∂ G'') (eG : G ‚âÖ G')

@[simps]
def whiskering_left : structured_arrow X‚ÇÉ (F ‚ãô G) ‚•§ structured_arrow X‚ÇÉ G :=
{ obj := Œª X‚ÇÇ, mk X‚ÇÇ.hom,
  map := Œª X‚ÇÇ X‚ÇÇ' œÜ, hom_mk (F.map œÜ.right) (w œÜ), }

def whiskering_left_equivalence :
equivalence (structured_arrow X‚ÇÉ (eF.functor ‚ãô G)) (structured_arrow X‚ÇÉ G) :=
{ functor := whiskering_left X‚ÇÉ eF.functor G,
  inverse := begin
    refine _ ‚ãô whiskering_left X‚ÇÉ eF.inverse (eF.functor ‚ãô G),
    sorry,
  end,
  unit_iso := sorry,
  counit_iso := sorry, }

instance [is_equivalence F] : is_equivalence (whiskering_left X‚ÇÉ F G) :=
is_equivalence.of_equivalence (whiskering_left_equivalence X‚ÇÉ (functor.as_equivalence F) G)

variables {X‚ÇÉ X‚ÇÉ'}

@[simps]
def precomp : structured_arrow X‚ÇÉ G ‚•§ structured_arrow X‚ÇÉ' G :=
{ obj := Œª X‚ÇÇ, mk (f ‚â´ X‚ÇÇ.hom),
  map := Œª X‚ÇÇ X‚ÇÇ' œÜ, hom_mk œÜ.right (by tidy), }

--instance [is_iso f] : is_equivalence (precomp f G) := sorry

variables {G G'} (X‚ÇÉ)

@[simps]
def postcomp : structured_arrow X‚ÇÉ G ‚•§ structured_arrow X‚ÇÉ G' :=
{ obj := Œª X‚ÇÇ, mk (X‚ÇÇ.hom ‚â´ œÑ.app X‚ÇÇ.right),
  map := Œª X‚ÇÇ X‚ÇÇ' œÜ, hom_mk œÜ.right begin
    dsimp,
    simp only [assoc, ‚Üê œÑ.naturality, w_assoc œÜ],
  end, }

variable (G)

@[simps]
def postcomp_id : postcomp X‚ÇÉ (ùüô G) ‚âÖ ùü≠ _ :=
nat_iso.of_components (Œª X, structured_arrow.iso_mk (iso.refl _) (by tidy)) (by tidy)

variable {G}

@[simps]
def postcomp_comp : postcomp X‚ÇÉ œÑ ‚ãô postcomp X‚ÇÉ œÑ'' ‚âÖ
  postcomp X‚ÇÉ (œÑ ‚â´ œÑ'') :=
nat_iso.of_components (Œª X, structured_arrow.iso_mk (iso.refl _) (by tidy)) (by tidy)

@[simps]
def postcomp_iso_of_eq (h : œÑ = œÑ') : postcomp X‚ÇÉ œÑ ‚âÖ postcomp X‚ÇÉ œÑ' :=
nat_iso.of_components (Œª X, structured_arrow.iso_mk (iso.refl _)
  (by { dsimp, rw [G'.map_id, comp_id, h], })) (by tidy)

@[simps]
def postcomp_iso : equivalence (structured_arrow X‚ÇÉ G) (structured_arrow X‚ÇÉ G') :=
{ functor := postcomp X‚ÇÉ eG.hom,
  inverse := postcomp X‚ÇÉ eG.inv,
  unit_iso := (postcomp_id X‚ÇÉ G).symm ‚â™‚â´ postcomp_iso_of_eq X‚ÇÉ _ _ eG.hom_inv_id.symm ‚â™‚â´
    (postcomp_comp _ _ _ _).symm,
  counit_iso := postcomp_comp _ _ _ _ ‚â™‚â´ postcomp_iso_of_eq X‚ÇÉ _ _ eG.inv_hom_id ‚â™‚â´
    (postcomp_id X‚ÇÉ G'), }

instance [is_iso œÑ] : is_equivalence (postcomp X‚ÇÉ œÑ) :=
is_equivalence.of_equivalence (postcomp_iso X‚ÇÉ (as_iso œÑ))

end structured_arrow

namespace functor

variables {C D H : Type*} [category C] [category D] [category H]
  {F : C ‚•§ D} (RF : H ‚•§ D) {L : C ‚•§ H} (Œ± : F ‚ü∂ L ‚ãô RF) (W : morphism_property C) [L.is_localization W]

class is_right_derived_functor : Prop :=
(is_initial [] : nonempty (limits.is_initial (structured_arrow.mk Œ± :
  structured_arrow F ((whiskering_left C H D).obj L))))

namespace is_right_derived_functor

variables (RF‚ÇÅ RF‚ÇÇ : H ‚•§ D) (Œ±‚ÇÅ : F ‚ü∂ L ‚ãô RF‚ÇÅ) (Œ±‚ÇÇ : F ‚ü∂ L ‚ãô RF‚ÇÇ)
  [RF‚ÇÅ.is_right_derived_functor Œ±‚ÇÅ] [RF‚ÇÇ.is_right_derived_functor Œ±‚ÇÇ]

def uniq' : (structured_arrow.mk Œ±‚ÇÅ :
  structured_arrow F ((whiskering_left C H D).obj L)) ‚âÖ structured_arrow.mk Œ±‚ÇÇ :=
limits.is_colimit.cocone_point_unique_up_to_iso
    (is_right_derived_functor.is_initial Œ±‚ÇÅ).some
    (is_right_derived_functor.is_initial Œ±‚ÇÇ).some

/- It should be slightly better to define natural transformation `RF‚ÇÅ ‚ü∂ G` for any `G` equipped
with a nat_trans, and then construct the isomorphism `uniq` using universal properties for
both `RF‚ÇÅ` and `RF‚ÇÇ`. -/

def uniq : RF‚ÇÅ ‚âÖ RF‚ÇÇ :=
(structured_arrow.proj _ _).map_iso (uniq' _ _ Œ±‚ÇÅ Œ±‚ÇÇ)

@[simp]
def uniq_hom_app_comm (X : C) : Œ±‚ÇÅ.app X ‚â´ (uniq _ _ Œ±‚ÇÅ Œ±‚ÇÇ).hom.app (L.obj X) = Œ±‚ÇÇ.app X :=
congr_app (structured_arrow.w (uniq' _ _ Œ±‚ÇÅ Œ±‚ÇÇ).hom) X

@[simp]
def uniq_inv_app_comm (X : C) : Œ±‚ÇÇ.app X ‚â´ (uniq _ _ Œ±‚ÇÅ Œ±‚ÇÇ).inv.app (L.obj X) = Œ±‚ÇÅ.app X :=
congr_app (structured_arrow.w (uniq' _ _ Œ±‚ÇÅ Œ±‚ÇÇ).inv) X

end is_right_derived_functor

variables (F)

class has_right_derived_functor : Prop :=
(has_initial' : limits.has_initial (structured_arrow F ((whiskering_left C _ D).obj W.Q)))

variable (L)

lemma has_right_derived_functor_iff :
  has_right_derived_functor F W ‚Üî
    limits.has_initial (structured_arrow F ((whiskering_left C H D).obj L)) :=
begin
  let Œ¶ := structured_arrow.whiskering_left F ((whiskering_left _ _ _).obj
      (localization.equivalence_from_model L W).functor)
      ((whiskering_left C _ D).obj W.Q),
  let Œ¶' := structured_arrow.postcomp F ((whiskering_left _ _ D).map_iso
    (localization.Q_comp_equivalence_from_model_functor_iso L W)).inv,
  split,
  { intro h,
    haveI := h.has_initial',
    exact adjunction.has_colimits_of_shape_of_equivalence (Œ¶' ‚ãô Œ¶), },
  { introI,
    exact ‚ü®adjunction.has_colimits_of_shape_of_equivalence (inv (Œ¶' ‚ãô Œ¶))‚ü©, },
end

lemma is_right_derived_functor.has_right_derived_functor [RF.is_right_derived_functor Œ±] :
  F.has_right_derived_functor W :=
begin
  rw F.has_right_derived_functor_iff L W,
  exact limits.is_initial.has_initial (is_right_derived_functor.is_initial Œ±).some,
end

lemma has_right_derived_functor.has_initial [has_right_derived_functor F W] :
  limits.has_initial (structured_arrow F ((whiskering_left C H D).obj L)) :=
(has_right_derived_functor_iff F L W).1 infer_instance

def has_right_derived_functor.initial [has_right_derived_functor F W] :
  (structured_arrow F ((whiskering_left C H D).obj L)) :=
begin
  haveI := has_right_derived_functor.has_initial F L W,
  exact limits.initial _,
end

def right_derived_functor [has_right_derived_functor F W] : H ‚•§ D :=
(has_right_derived_functor.initial F L W).right

def right_derived_functor_Œ± [has_right_derived_functor F W] :
  F ‚ü∂ L ‚ãô F.right_derived_functor L W :=
(has_right_derived_functor.initial F L W).hom

instance right_derived_functor_is_right_derived_functor [has_right_derived_functor F W] :
  (F.right_derived_functor L W).is_right_derived_functor (F.right_derived_functor_Œ± L W) :=
‚ü®‚ü®begin
  haveI := has_right_derived_functor.has_initial F L W,
  exact limits.is_initial.of_iso limits.initial_is_initial
    (structured_arrow.iso_mk (iso.refl _) (by tidy)),
end‚ü©‚ü©

end functor

section

variables {C D : Type*} [category C] [category D]
  (W : morphism_property C) (W' : morphism_property D)

structure localizor_morphism :=
(functor : C ‚•§ D)
(mapW : ‚àÄ ‚¶ÉX Y : C‚¶Ñ (f : X ‚ü∂ Y) (hf : W f), W' (functor.map f))

namespace localizor_morphism

variables {W W'} (Œ¶ : localizor_morphism W W') [morphism_property.multiplicative W]
  [morphism_property.multiplicative W']

@[simps]
def induced_functor : W.category ‚•§ W'.category :=
{ obj := Œª X, ‚ü®Œ¶.functor.obj X.obj‚ü©,
  map := Œª X Y œÜ,
  { f := Œ¶.functor.map œÜ.f,
    hf := Œ¶.mapW œÜ.f œÜ.hf, }, }

@[derive category]
def right_resolution (Y : D) := structured_arrow (‚ü®Y‚ü© : W'.category) Œ¶.induced_functor

@[simps]
def right_resolution.mk {Y : D} (X : C) (f : Y ‚ü∂ Œ¶.functor.obj X) (hf : W' f) :
  Œ¶.right_resolution Y :=
structured_arrow.mk (‚ü®f, hf‚ü© : (‚ü®Y‚ü© : W'.category) ‚ü∂ Œ¶.induced_functor.obj ‚ü®X‚ü©)

end localizor_morphism

end

namespace right_derivability_structure

variables {C‚ÇÄ C H : Type*} [category C] [category C‚ÇÄ] [category H]
  {W‚ÇÄ : morphism_property C‚ÇÄ}
  {W : morphism_property C} (L : C ‚•§ H) [L.is_localization W] (Œ¶ : localizor_morphism W‚ÇÄ W)
  [morphism_property.multiplicative W‚ÇÄ] [morphism_property.multiplicative W]

structure basic :=
(hL : (Œ¶.functor ‚ãô L).is_localization W‚ÇÄ)
  -- hL should be a property of `Œ¶`, regardless of the choice of the localization functor `L`
(right_resolution_connected : ‚àÄ (Y : C), is_connected' (Œ¶.right_resolution Y))
(nonempty_arrow_right_resolution :
  ‚àÄ ‚¶ÉY‚ÇÅ Y‚ÇÇ : C‚¶Ñ (f : Y‚ÇÅ ‚ü∂ Y‚ÇÇ), ‚àÉ (X‚ÇÅ : Œ¶.right_resolution Y‚ÇÅ) (X‚ÇÇ : Œ¶.right_resolution Y‚ÇÇ)
  (f' : X‚ÇÅ.right.obj ‚ü∂ X‚ÇÇ.right.obj), X‚ÇÅ.hom.1 ‚â´ Œ¶.functor.map f' = f ‚â´ X‚ÇÇ.hom.1)

namespace basic

variables {L Œ¶} (Œ≤ : basic L Œ¶) {D : Type*} [category D]

def some_right_resolution (Y : C) : Œ¶.right_resolution Y :=
(Œ≤.right_resolution_connected Y).is_nonempty.some

variables {F : C ‚•§ D} (hF : W‚ÇÄ.is_inverted_by (Œ¶.functor ‚ãô F))

namespace existence_derived_functor

include Œ≤ hF

def RF : H ‚•§ D :=
begin
  haveI := Œ≤.hL,
  exact localization.lift (Œ¶.functor ‚ãô F) hF (Œ¶.functor ‚ãô L),
end

def Œµ : (Œ¶.functor ‚ãô L) ‚ãô RF Œ≤ hF ‚âÖ Œ¶.functor ‚ãô F :=
begin
  haveI := Œ≤.hL,
  haveI : localization.lifting (Œ¶.functor ‚ãô L) W‚ÇÄ (Œ¶.functor ‚ãô F) (RF Œ≤ hF) :=
    localization.lifting_lift _ _ _,
  refine localization.lifting.iso (Œ¶.functor ‚ãô L) W‚ÇÄ _ _,
end

def Œ±' (X : C) : (functor.const (Œ¶.right_resolution X)).obj (F.obj X) ‚ü∂
  (functor.const (Œ¶.right_resolution X)).obj ((RF Œ≤ hF).obj (L.obj X)) :=
{ app := Œª X‚ÇÄ, F.map X‚ÇÄ.hom.1 ‚â´ (Œµ Œ≤ hF).inv.app _ ‚â´
    (RF Œ≤ hF).map (localization.iso_of_hom L W _ X‚ÇÄ.hom.2).inv,
  naturality' := Œª X‚ÇÄ X‚ÇÄ' œÜ, begin
    dsimp,
    simp only [functor.map_inv, id_comp, comp_id],
    have eq‚ÇÅ := œÜ.w,
    have eq‚ÇÇ := (Œµ Œ≤ hF).inv.naturality œÜ.right.1,
    dsimp at eq‚ÇÅ eq‚ÇÇ,
    rw id_comp at eq‚ÇÅ,
    rw eq‚ÇÅ,
    dsimp,
    rw [functor.map_comp, assoc, reassoc_of eq‚ÇÇ],
    congr' 2,
    simp only [functor.map_comp],
    erw is_iso.comp_inv_eq, -- should be tidied
    rw is_iso.inv_hom_id_assoc,
  end, }

def Œ±_app (X : C) : F.obj X ‚ü∂ (RF Œ≤ hF).obj (L.obj X) :=
(Œ±' Œ≤ hF X).app (Œ≤.some_right_resolution X)

lemma Œ±_app_eq {X : C} (X‚ÇÄ : Œ¶.right_resolution X) :
  (Œ±_app Œ≤ hF) X = (Œ±' Œ≤ hF X).app X‚ÇÄ :=
begin
  haveI := Œ≤.right_resolution_connected X,
  apply nat_trans_from_is_preconnected',
end

@[simps]
def Œ± : F ‚ü∂ L ‚ãô RF Œ≤ hF :=
{ app := Œª X, (Œ±_app Œ≤ hF) X,
  naturality' := Œª Y‚ÇÅ Y‚ÇÇ f, begin
    obtain ‚ü®X‚ÇÅ, X‚ÇÇ, f', fac‚ü© := Œ≤.nonempty_arrow_right_resolution f,
    rw [Œ±_app_eq Œ≤ hF X‚ÇÅ, Œ±_app_eq Œ≤ hF X‚ÇÇ],
    dsimp [Œ±'],
    have eq‚ÇÅ := F.congr_map fac,
    have eq‚ÇÇ := (Œµ Œ≤ hF).inv.naturality f',
    simp only [functor.map_comp] at eq‚ÇÅ,
    dsimp at eq‚ÇÇ,
    simp only [assoc, ‚Üê reassoc_of eq‚ÇÅ, reassoc_of eq‚ÇÇ, ‚Üê functor.map_comp],
    congr' 3,
    rw [is_iso.eq_inv_comp, ‚Üê L.map_comp_assoc, fac, L.map_comp, assoc,
      is_iso.hom_inv_id, comp_id],
  end, }

instance (X‚ÇÄ : C‚ÇÄ) : is_iso ((Œ± Œ≤ hF).app (Œ¶.functor.obj X‚ÇÄ)) :=
begin
  let X‚ÇÄ' := localizor_morphism.right_resolution.mk Œ¶ X‚ÇÄ (ùüô _)
    (morphism_property.contains_identities.id W _),
  dsimp [Œ±],
  rw Œ±_app_eq Œ≤ hF (localizor_morphism.right_resolution.mk Œ¶ X‚ÇÄ (ùüô _)
    (morphism_property.contains_identities.id W _)),
  dsimp [Œ±'],
  simp only [functor.map_id, is_iso.inv_id, comp_id, id_comp],
  apply_instance,
end

@[simps]
def RF' : structured_arrow F ((whiskering_left C H D).obj L) :=
structured_arrow.mk (Œ± Œ≤ hF)

instance is_iso_RF'_hom_app (X‚ÇÄ : C‚ÇÄ) :
  is_iso ((RF' Œ≤ hF).hom.app (Œ¶.functor.obj X‚ÇÄ)) :=
(infer_instance : is_iso ((Œ± Œ≤ hF).app (Œ¶.functor.obj X‚ÇÄ)))

instance (G : structured_arrow F ((whiskering_left C H D).obj L)) :
  subsingleton (RF' Œ≤ hF ‚ü∂ G) :=
‚ü®Œª œÜ‚ÇÅ œÜ‚ÇÇ, begin
  apply structured_arrow.ext,
  haveI := Œ≤.hL,
  apply localization.nat_trans_ext (Œ¶.functor ‚ãô L) W‚ÇÄ,
  intro X‚ÇÄ,
  have eq‚ÇÅ := congr_app œÜ‚ÇÅ.w (Œ¶.functor.obj X‚ÇÄ),
  have eq‚ÇÇ := congr_app œÜ‚ÇÇ.w (Œ¶.functor.obj X‚ÇÄ),
  dsimp at eq‚ÇÅ eq‚ÇÇ ‚ä¢,
  rw [id_comp] at eq‚ÇÅ eq‚ÇÇ,
  rw [‚Üê cancel_epi ((Œ± Œ≤ hF).app (Œ¶.functor.obj X‚ÇÄ))],
  dsimp,
  rw [‚Üê eq‚ÇÅ, eq‚ÇÇ],
end‚ü©

def RF_œÑ' (G : structured_arrow F ((whiskering_left C H D).obj L)) :
  RF Œ≤ hF ‚ü∂ G.right :=
begin
  haveI := Œ≤.hL,
  exact localization.lift_nat_trans (Œ¶.functor ‚ãô L) W‚ÇÄ _ _ _ _
    ((Œµ Œ≤ hF).hom ‚â´ whisker_left _ G.hom ‚â´ (functor.associator _ _ _).inv),
end

@[simp]
lemma RF_œÑ'_app_eq (G : structured_arrow F ((whiskering_left C H D).obj L)) (X‚ÇÄ : C‚ÇÄ) :
  (RF_œÑ' Œ≤ hF G).app (L.obj (Œ¶.functor.obj X‚ÇÄ)) =
    (Œµ Œ≤ hF).hom.app X‚ÇÄ ‚â´ G.hom.app (Œ¶.functor.obj X‚ÇÄ) :=
begin
  haveI := Œ≤.hL,
  dsimp [RF_œÑ'],
  erw localization.lift_nat_trans_app,
  simp only [localization.lifting.of_comp_iso, iso.refl_hom, nat_trans.id_app,
    nat_trans.comp_app, whisker_left_app, functor.associator_inv_app,
    comp_id, iso.refl_inv, assoc],
  erw id_comp,
end

def RF_œÑ (G : structured_arrow F ((whiskering_left C H D).obj L)) :
  RF' Œ≤ hF ‚ü∂ G :=
begin
  haveI := Œ≤.hL,
  refine structured_arrow.hom_mk (RF_œÑ' Œ≤ hF G) _,
  ext X,
  let X‚ÇÄ := Œ≤.some_right_resolution X,
  have eq := (RF_œÑ' Œ≤ hF G).naturality (L.map X‚ÇÄ.hom.f),
  haveI : is_iso (L.map X‚ÇÄ.hom.f) := localization.inverts L W _ X‚ÇÄ.hom.hf,
  dsimp at ‚ä¢ eq,
  simp only [‚Üê cancel_mono (G.right.map (L.map X‚ÇÄ.hom.f)), assoc, ‚Üê eq, RF_œÑ'_app_eq,
    Œ±_app_eq Œ≤ hF X‚ÇÄ, Œ±', ‚Üê functor.map_comp_assoc],
  erw [is_iso.inv_hom_id, functor.map_id, id_comp, iso.inv_hom_id_app_assoc, G.hom.naturality],
  refl,
end

instance (G : structured_arrow F ((whiskering_left C H D).obj L)) :
  unique (RF' Œ≤ hF ‚ü∂ G) :=
unique_of_subsingleton (RF_œÑ Œ≤ hF G)

lemma is_initial_RF' : limits.is_initial (RF' Œ≤ hF) := limits.is_initial.of_unique _

instance RF_is_right_derived_functor :
  (RF Œ≤ hF).is_right_derived_functor (Œ± _ _) :=
‚ü®‚ü®is_initial_RF' Œ≤ hF‚ü©‚ü©

end existence_derived_functor

variable (F)

open existence_derived_functor

/-
The following lemma is a consequence of Lemma 6.5 of
_Structures de d√©rivabilit√©_ by Bruno Kahn, Georges Maltsiniotis,
Advances in mathematics 218 (2018).
-/

lemma existence_derived_functor : F.has_right_derived_functor W :=
functor.is_right_derived_functor.has_right_derived_functor F (RF Œ≤ hF) L (Œ± _ _) W

include Œ≤ hF

lemma is_iso_app (F' : H ‚•§ D) (Œ±' : F ‚ü∂ L ‚ãô F') [F'.is_right_derived_functor Œ±'] (X‚ÇÄ : C‚ÇÄ) :
  is_iso (Œ±'.app (Œ¶.functor.obj X‚ÇÄ)) :=
begin
  rw ‚Üê functor.is_right_derived_functor.uniq_hom_app_comm (RF Œ≤ hF) F' (Œ± Œ≤ hF) Œ±'
    (Œ¶.functor.obj X‚ÇÄ),
  apply_instance,
end

end basic

end right_derivability_structure

end category_theory
