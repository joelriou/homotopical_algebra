import for_mathlib.category_theory.localization.predicate
import category_theory.adjunction.limits
import category_theory.is_connected
import for_mathlib.category_theory.localization.products
import for_mathlib.category_theory.localization.opposite

noncomputable theory

open category_theory category_theory.category

namespace category_theory

namespace limits

def is_terminal.of_equivalence {C D : Type*} [category C] [category D] (e : C ‚âå D) {X : C}
  (hX : is_terminal X) : is_terminal (e.functor.obj X) :=
begin
  change is_limit _,
  let e' : functor.empty C ‚ãô e.functor ‚âÖ functor.empty D := functor.empty_ext _ _,
  equiv_rw (is_limit.postcompose_inv_equiv e' _).symm,
  exact is_limit.of_iso_limit (is_limit_of_preserves e.functor hX)
    (cones.ext (iso.refl _) (by rintro ‚ü®‚ü®‚ü©‚ü©)),
end

end limits

@[simps]
instance localization.lifting.of_comp {C D E : Type*} [category C] [category D] [category E]
  (L : C ‚•§ D) (W : morphism_property C) [L.is_localization W] (F : D ‚•§ E) :
  localization.lifting L W (L ‚ãô F) F := ‚ü®iso.refl _‚ü©

section

variables (C : Type*) [category C]

inductive obj_rel : C ‚Üí C ‚Üí Prop
| of_hom ‚¶ÉX Y : C‚¶Ñ (f : X ‚ü∂ Y) : obj_rel X Y

def connected_components := quot (obj_rel C)

variable {C}

def to_connected_components (X : C) : connected_components C :=
quot.mk _ X

variable (C)

class is_preconnected' : Prop :=
(subsingleton_connected_components : subsingleton (connected_components C))

attribute [instance] is_preconnected'.subsingleton_connected_components

class is_connected' extends is_preconnected' C : Prop :=
[is_nonempty : nonempty C]

lemma connected_components.nat_trans_from_eq {D : Type*} [category D]
  (X Y : D) (Œ± : (functor.const C).obj X ‚ü∂ (functor.const C).obj Y)
  (j j' : C) (h : to_connected_components j = to_connected_components j') :
    Œ±.app j = (Œ±.app j' : X ‚ü∂ Y) :=
begin
  let Œ≤ : C ‚Üí (X ‚ü∂ Y) := Œª j, Œ±.app j,
  let l : connected_components C ‚Üí (X ‚ü∂ Y),
  { refine quot.lift Œ≤ _,
    rintro x y ‚ü®f‚ü©,
    dsimp [Œ≤],
    have eq := Œ±.naturality f,
    dsimp at eq,
    rw [id_comp, comp_id] at eq,
    rw eq, },
  have hl : ‚àÄ (j : C), Œ±.app j = l (to_connected_components j) := Œª j, rfl,
  simp only [hl, h],
end

lemma nat_trans_from_is_preconnected' {D : Type*} [category D]
  [is_preconnected' C] (X Y : D) (Œ± : (functor.const C).obj X ‚ü∂ (functor.const C).obj Y)
  (j j' : C) : Œ±.app j = (Œ±.app j' : X ‚ü∂ Y) :=
begin
  apply connected_components.nat_trans_from_eq,
  apply subsingleton.elim,
end

@[simps]
def connected_components.op_equiv :
  connected_components C ‚âÉ connected_components C·µí·µñ :=
{ to_fun := quot.lift (Œª X, to_connected_components (opposite.op X))
    (by { rintros X Y ‚ü®f‚ü©, symmetry, exact quot.sound ‚ü®f.op‚ü©, }),
  inv_fun := quot.lift (Œª X, to_connected_components (opposite.unop X))
    (by { rintros X Y ‚ü®f‚ü©, symmetry, exact quot.sound ‚ü®f.unop‚ü©, }),
  left_inv := by { rintro ‚ü®X‚ü©, refl, },
  right_inv := by { rintro ‚ü®X‚ü©, refl, }, }

variables {C} {D E : Type*} [category D] [category E]

def connected_components.map (F : C ‚•§ D) :
  connected_components C ‚Üí connected_components D :=
quot.lift (Œª X, to_connected_components (F.obj X))
  (by { rintros X Y ‚ü®f‚ü©, exact quot.sound ‚ü®F.map f‚ü©, })

@[simp]
lemma connected_components.map_id (C : Type*) [category C] :
  connected_components.map (ùü≠ C) = id := by tidy

@[simp]
lemma connected_components.map_id_apply (x : connected_components C) :
  connected_components.map (ùü≠ C) x = x :=
by simp only [connected_components.map_id, id.def]

@[simp]
lemma connected_components.map_comp (F : C ‚•§ D) (G : D ‚•§ E) :
  connected_components.map (F ‚ãô G) =
    connected_components.map G ‚àò connected_components.map F := by tidy

@[simp]
lemma connected_components.map_comp_apply (F : C ‚•§ D) (G : D ‚•§ E) (x : connected_components C) :
  connected_components.map (F ‚ãô G) x =
  connected_components.map G (connected_components.map F x) :=
by simp only [connected_components.map_comp]

lemma connected_components.map_eq_of_nat_trans {F G : C ‚•§ D} (œÑ : F ‚ü∂ G) :
  connected_components.map F = connected_components.map G :=
by { ext ‚ü®X‚ü©, exact quot.sound ‚ü®œÑ.app X‚ü©, }

lemma connected_components.map_eq_of_nat_trans_apply {F G : C ‚•§ D} (œÑ : F ‚ü∂ G)
  (x : connected_components C):
  connected_components.map F x = connected_components.map G x :=
by rw connected_components.map_eq_of_nat_trans œÑ

@[simps]
def connected_components.equiv_of_equivalence (e : C ‚âå D) :
  connected_components C ‚âÉ connected_components D :=
{ to_fun := connected_components.map e.functor,
  inv_fun := connected_components.map e.inverse,
  left_inv := Œª x, by simpa only [connected_components.map_comp_apply,
    connected_components.map_id_apply]
    using connected_components.map_eq_of_nat_trans_apply e.unit_iso.inv x,
  right_inv := Œª x, by simpa only [connected_components.map_comp_apply,
    connected_components.map_id_apply]
    using connected_components.map_eq_of_nat_trans_apply e.counit_iso.hom x, }

lemma is_preconnected'.of_equivalence (e : C ‚âå D) (h : is_preconnected' C) :
  is_preconnected' D :=
‚ü®‚ü®Œª X Y, (connected_components.equiv_of_equivalence e).symm.injective (subsingleton.elim _ _)‚ü©‚ü©

lemma is_connected'.of_equivalence (e : C ‚âå D) (h : is_connected' C) :
  is_connected' D :=
begin
  haveI : nonempty D := ‚ü®e.functor.obj h.is_nonempty.some‚ü©,
  haveI : is_preconnected' D := is_preconnected'.of_equivalence e h.1,
  constructor,
end

lemma is_preconnected'.op (h : is_preconnected' C) : is_preconnected' C·µí·µñ :=
‚ü®‚ü®Œª X Y, (connected_components.op_equiv C).symm.injective (subsingleton.elim _ _)‚ü©‚ü©

lemma is_preconnected'.unop (h : is_preconnected' C·µí·µñ) : is_preconnected' C :=
‚ü®‚ü®Œª X Y, (connected_components.op_equiv C).injective (subsingleton.elim _ _)‚ü©‚ü©

lemma is_connected'.op (h : is_connected' C) : is_connected' C·µí·µñ :=
begin
  haveI : nonempty C·µí·µñ := ‚ü®opposite.op h.is_nonempty.some‚ü©,
  haveI : is_preconnected' C·µí·µñ := is_preconnected'.op infer_instance,
  constructor,
end

lemma is_connected'.unop (h : is_connected' C·µí·µñ) : is_connected' C :=
begin
  haveI : nonempty C := ‚ü®opposite.unop h.is_nonempty.some‚ü©,
  haveI : is_preconnected' C := is_preconnected'.unop infer_instance,
  constructor,
end

end

namespace morphism_property

variables {C : Type*} [category C] (W : morphism_property C)

class multiplicative : Prop :=
(contains_identities [] : W.contains_identities)
(comp [] : W.stable_under_composition)

section

variable [multiplicative W]

instance contains_identities_of_multiplicative : W.contains_identities :=
multiplicative.contains_identities _

instance : multiplicative W.op :=
{ contains_identities := (multiplicative.contains_identities W).op,
  comp := (multiplicative.comp W).op, }

include W
@[protected, nolint unused_arguments]
structure category :=
(obj : C)

variable {W}

@[ext]
structure category.hom (X Y : W.category) :=
(f : X.obj ‚ü∂ Y.obj)
(hf : W f)

@[simps]
instance : category W.category :=
{ hom := category.hom,
  id := Œª X,
  { f := ùüô _,
    hf := contains_identities.id _ _, },
  comp := Œª X Y Z œÜ œÜ',
  { f := œÜ.f ‚â´ œÜ'.f,
    hf := multiplicative.comp W œÜ.f œÜ'.f œÜ.hf œÜ'.hf, }, }

@[simps]
def category.mk_iso {X Y : W.category} (e : X.obj ‚âÖ Y.obj) (h‚ÇÅ : W e.hom) (h‚ÇÇ : W e.inv) :
  X ‚âÖ Y :=
{ hom := ‚ü®e.hom, h‚ÇÅ‚ü©,
  inv := ‚ü®e.inv, h‚ÇÇ‚ü©, }

end

end morphism_property

namespace functor

variables (C‚ÇÅ C‚ÇÇ C‚ÇÉ : Type*) [category C‚ÇÅ] [category C‚ÇÇ] [category C‚ÇÉ]
  (F : C‚ÇÅ ‚•§ C‚ÇÇ)

@[simps]
def whiskering_left_id : (whiskering_left C‚ÇÅ C‚ÇÅ C‚ÇÉ).obj (ùü≠ C‚ÇÅ) ‚âÖ ùü≠ _ :=
nat_iso.of_components (functor.left_unitor) (by tidy)

variables {C‚ÇÅ C‚ÇÇ}

@[simps]
def equivalence_whiskering_left (e : C‚ÇÅ ‚âå C‚ÇÇ) : (C‚ÇÇ ‚•§ C‚ÇÉ) ‚âå C‚ÇÅ ‚•§ C‚ÇÉ :=
{ functor := (whiskering_left _ _ _).obj e.functor,
  inverse := (whiskering_left _ _ _).obj e.inverse,
  unit_iso := (whiskering_left_id _ _).symm ‚â™‚â´ (whiskering_left _ _ C‚ÇÉ).map_iso e.counit_iso.symm,
  counit_iso := (whiskering_left _ _ C‚ÇÉ).map_iso e.unit_iso.symm ‚â™‚â´ whiskering_left_id _ _,
  functor_unit_iso_comp' := Œª F, begin
    ext X,
    dsimp,
    simp only [id_comp, comp_id, ‚Üê F.map_comp, equivalence.counit_inv_functor_comp, F.map_id],
  end, }

instance [is_equivalence F] :
  is_equivalence ((whiskering_left _ _ C‚ÇÉ).obj F) :=
is_equivalence.of_equivalence (equivalence_whiskering_left C‚ÇÉ (as_equivalence F))

end functor

namespace structured_arrow

variables {C‚ÇÄ C‚ÇÅ C‚ÇÇ C‚ÇÉ : Type*} [category C‚ÇÄ] [category C‚ÇÅ] [category C‚ÇÇ] [category C‚ÇÉ]
  (X‚ÇÉ X‚ÇÉ' : C‚ÇÉ) (f : X‚ÇÉ' ‚ü∂ X‚ÇÉ) (F : C‚ÇÅ ‚•§ C‚ÇÇ) (eF : C‚ÇÅ ‚âå C‚ÇÇ)
  (G G' G'' : C‚ÇÇ ‚•§ C‚ÇÉ) (œÑ œÑ' : G ‚ü∂ G') (œÑ'' : G' ‚ü∂ G'') (eG : G ‚âÖ G')

@[simps]
def whiskering_left : structured_arrow X‚ÇÉ (F ‚ãô G) ‚•§ structured_arrow X‚ÇÉ G :=
{ obj := Œª X‚ÇÇ, mk X‚ÇÇ.hom,
  map := Œª X‚ÇÇ X‚ÇÇ' œÜ, hom_mk (F.map œÜ.right) (w œÜ), }

variables {X‚ÇÉ X‚ÇÉ'}

@[simps]
def precomp : structured_arrow X‚ÇÉ G ‚•§ structured_arrow X‚ÇÉ' G :=
{ obj := Œª X‚ÇÇ, mk (f ‚â´ X‚ÇÇ.hom),
  map := Œª X‚ÇÇ X‚ÇÇ' œÜ, hom_mk œÜ.right (by tidy), }

variables {G G'} (X‚ÇÉ)

@[simps]
def postcomp : structured_arrow X‚ÇÉ G ‚•§ structured_arrow X‚ÇÉ G' :=
{ obj := Œª X‚ÇÇ, mk (X‚ÇÇ.hom ‚â´ œÑ.app X‚ÇÇ.right),
  map := Œª X‚ÇÇ X‚ÇÇ' œÜ, hom_mk œÜ.right begin
    dsimp,
    simp only [assoc, ‚Üê œÑ.naturality, w_assoc œÜ],
  end, }

variable (G)

@[simps]
def postcomp_id : postcomp X‚ÇÉ (ùüô G) ‚âÖ ùü≠ _ :=
nat_iso.of_components (Œª X, structured_arrow.iso_mk (iso.refl _) (by tidy)) (by tidy)

variable {G}

@[simps]
def postcomp_comp : postcomp X‚ÇÉ œÑ ‚ãô postcomp X‚ÇÉ œÑ'' ‚âÖ
  postcomp X‚ÇÉ (œÑ ‚â´ œÑ'') :=
nat_iso.of_components (Œª X, structured_arrow.iso_mk (iso.refl _) (by tidy)) (by tidy)

@[simps]
def postcomp_iso_of_eq (h : œÑ = œÑ') : postcomp X‚ÇÉ œÑ ‚âÖ postcomp X‚ÇÉ œÑ' :=
nat_iso.of_components (Œª X, structured_arrow.iso_mk (iso.refl _)
  (by { dsimp, rw [G'.map_id, comp_id, h], })) (by tidy)

@[simps]
def postcomp_iso : equivalence (structured_arrow X‚ÇÉ G) (structured_arrow X‚ÇÉ G') :=
{ functor := postcomp X‚ÇÉ eG.hom,
  inverse := postcomp X‚ÇÉ eG.inv,
  unit_iso := (postcomp_id X‚ÇÉ G).symm ‚â™‚â´ postcomp_iso_of_eq X‚ÇÉ _ _ eG.hom_inv_id.symm ‚â™‚â´
    (postcomp_comp _ _ _ _).symm,
  counit_iso := postcomp_comp _ _ _ _ ‚â™‚â´ postcomp_iso_of_eq X‚ÇÉ _ _ eG.inv_hom_id ‚â™‚â´
    (postcomp_id X‚ÇÉ G'), }

instance [is_iso œÑ] : is_equivalence (postcomp X‚ÇÉ œÑ) :=
is_equivalence.of_equivalence (postcomp_iso X‚ÇÉ (as_iso œÑ))

variable (G)

@[simps]
def whiskering_left_equivalence :
equivalence (structured_arrow X‚ÇÉ (eF.functor ‚ãô G)) (structured_arrow X‚ÇÉ G) :=
{ functor := whiskering_left X‚ÇÉ eF.functor G,
  inverse := (postcomp_iso X‚ÇÉ ((functor.left_unitor _).symm ‚â™‚â´
      iso_whisker_right eF.counit_iso.symm _‚â™‚â´ functor.associator _ _ _)).functor ‚ãô
    whiskering_left X‚ÇÉ eF.inverse (eF.functor ‚ãô G),
  unit_iso := nat_iso.of_components
    (Œª Y, structured_arrow.iso_mk (eF.unit_iso.app _) begin
      dsimp,
      simp only [comp_id, id_comp],
      congr' 2,
      simpa only [‚Üê cancel_mono (eF.counit_iso.hom.app (eF.functor.obj Y.right)),
        equivalence.functor_unit_comp, iso.inv_hom_id_app],
    end) (by tidy),
  counit_iso := nat_iso.of_components
    (Œª X, structured_arrow.iso_mk (eF.counit_iso.app _) begin
      dsimp,
      simp only [id_comp, assoc, ‚Üê G.map_comp, iso.inv_hom_id_app],
      dsimp,
      simp only [functor.map_id, comp_id],
    end) (by tidy), }

instance [is_equivalence F] : is_equivalence (whiskering_left X‚ÇÉ F G) :=
is_equivalence.of_equivalence (whiskering_left_equivalence X‚ÇÉ (functor.as_equivalence F) G)

end structured_arrow

namespace functor

variables {C D H : Type*} [category C] [category D] [category H]
  {F : C ‚•§ D} (RF : H ‚•§ D) {L : C ‚•§ H} (Œ± : F ‚ü∂ L ‚ãô RF) (W : morphism_property C) [L.is_localization W]

class is_right_derived_functor : Prop :=
(is_initial [] : nonempty (limits.is_initial (structured_arrow.mk Œ± :
  structured_arrow F ((whiskering_left C H D).obj L))))

namespace is_right_derived_functor

variables (RF‚ÇÅ RF‚ÇÇ : H ‚•§ D) (Œ±‚ÇÅ : F ‚ü∂ L ‚ãô RF‚ÇÅ) (Œ±‚ÇÇ : F ‚ü∂ L ‚ãô RF‚ÇÇ)
  [RF‚ÇÅ.is_right_derived_functor Œ±‚ÇÅ] [RF‚ÇÇ.is_right_derived_functor Œ±‚ÇÇ]

def uniq' : (structured_arrow.mk Œ±‚ÇÅ :
  structured_arrow F ((whiskering_left C H D).obj L)) ‚âÖ structured_arrow.mk Œ±‚ÇÇ :=
limits.is_colimit.cocone_point_unique_up_to_iso
    (is_right_derived_functor.is_initial Œ±‚ÇÅ).some
    (is_right_derived_functor.is_initial Œ±‚ÇÇ).some

/- It should be slightly better to define natural transformation `RF‚ÇÅ ‚ü∂ G` for any `G` equipped
with a nat_trans, and then construct the isomorphism `uniq` using universal properties for
both `RF‚ÇÅ` and `RF‚ÇÇ`. -/

def uniq : RF‚ÇÅ ‚âÖ RF‚ÇÇ :=
(structured_arrow.proj _ _).map_iso (uniq' _ _ Œ±‚ÇÅ Œ±‚ÇÇ)

@[simp]
def uniq_hom_app_comm (X : C) : Œ±‚ÇÅ.app X ‚â´ (uniq _ _ Œ±‚ÇÅ Œ±‚ÇÇ).hom.app (L.obj X) = Œ±‚ÇÇ.app X :=
congr_app (structured_arrow.w (uniq' _ _ Œ±‚ÇÅ Œ±‚ÇÇ).hom) X

@[simp]
def uniq_inv_app_comm (X : C) : Œ±‚ÇÇ.app X ‚â´ (uniq _ _ Œ±‚ÇÅ Œ±‚ÇÇ).inv.app (L.obj X) = Œ±‚ÇÅ.app X :=
congr_app (structured_arrow.w (uniq' _ _ Œ±‚ÇÅ Œ±‚ÇÇ).inv) X

end is_right_derived_functor

variables (F)

class has_right_derived_functor : Prop :=
(has_initial' : limits.has_initial (structured_arrow F ((whiskering_left C _ D).obj W.Q)))

variable (L)

lemma has_right_derived_functor_iff :
  has_right_derived_functor F W ‚Üî
    limits.has_initial (structured_arrow F ((whiskering_left C H D).obj L)) :=
begin
  let Œ¶ := structured_arrow.whiskering_left F ((whiskering_left _ _ _).obj
      (localization.equivalence_from_model L W).functor)
      ((whiskering_left C _ D).obj W.Q),
  let Œ¶' := structured_arrow.postcomp F ((whiskering_left _ _ D).map_iso
    (localization.Q_comp_equivalence_from_model_functor_iso L W)).inv,
  split,
  { intro h,
    haveI := h.has_initial',
    exact adjunction.has_colimits_of_shape_of_equivalence (Œ¶' ‚ãô Œ¶), },
  { introI,
    exact ‚ü®adjunction.has_colimits_of_shape_of_equivalence (inv (Œ¶' ‚ãô Œ¶))‚ü©, },
end

lemma is_right_derived_functor.has_right_derived_functor [RF.is_right_derived_functor Œ±] :
  F.has_right_derived_functor W :=
begin
  rw F.has_right_derived_functor_iff L W,
  exact limits.is_initial.has_initial (is_right_derived_functor.is_initial Œ±).some,
end

lemma has_right_derived_functor.has_initial [has_right_derived_functor F W] :
  limits.has_initial (structured_arrow F ((whiskering_left C H D).obj L)) :=
(has_right_derived_functor_iff F L W).1 infer_instance

def has_right_derived_functor.initial [has_right_derived_functor F W] :
  (structured_arrow F ((whiskering_left C H D).obj L)) :=
begin
  haveI := has_right_derived_functor.has_initial F L W,
  exact limits.initial _,
end

def right_derived_functor [has_right_derived_functor F W] : H ‚•§ D :=
(has_right_derived_functor.initial F L W).right

def right_derived_functor_Œ± [has_right_derived_functor F W] :
  F ‚ü∂ L ‚ãô F.right_derived_functor L W :=
(has_right_derived_functor.initial F L W).hom

instance right_derived_functor_is_right_derived_functor [has_right_derived_functor F W] :
  (F.right_derived_functor L W).is_right_derived_functor (F.right_derived_functor_Œ± L W) :=
‚ü®‚ü®begin
  haveI := has_right_derived_functor.has_initial F L W,
  exact limits.is_initial.of_iso limits.initial_is_initial
    (structured_arrow.iso_mk (iso.refl _) (by tidy)),
end‚ü©‚ü©

end functor

section

variables {C D : Type*} [category C] [category D]
  (W : morphism_property C) (W' : morphism_property D)

structure localizor_morphism :=
(functor : C ‚•§ D)
(mapW : ‚àÄ ‚¶ÉX Y : C‚¶Ñ (f : X ‚ü∂ Y) (hf : W f), W' (functor.map f))

namespace localizor_morphism

variables {W W'} (Œ¶ : localizor_morphism W W')

section

@[simps]
def op : localizor_morphism W.op W'.op :=
{ functor := Œ¶.functor.op,
  mapW := Œª X Y f hf, Œ¶.mapW _ hf, }

variables [morphism_property.multiplicative W] [morphism_property.multiplicative W']

@[simps]
def induced_functor : W.category ‚•§ W'.category :=
{ obj := Œª X, ‚ü®Œ¶.functor.obj X.obj‚ü©,
  map := Œª X Y œÜ,
  { f := Œ¶.functor.map œÜ.f,
    hf := Œ¶.mapW œÜ.f œÜ.hf, }, }

@[derive category]
def right_resolution (Y : D) := structured_arrow (‚ü®Y‚ü© : W'.category) Œ¶.induced_functor

@[simps]
def right_resolution.mk {Y : D} (X : C) (f : Y ‚ü∂ Œ¶.functor.obj X) (hf : W' f) :
  Œ¶.right_resolution Y :=
structured_arrow.mk (‚ü®f, hf‚ü© : (‚ü®Y‚ü© : W'.category) ‚ü∂ Œ¶.induced_functor.obj ‚ü®X‚ü©)

@[derive category]
def left_resolution (Y : D) := costructured_arrow Œ¶.induced_functor (‚ü®Y‚ü© : W'.category)

@[simps]
def left_resolution.mk {Y : D} (X : C) (f : Œ¶.functor.obj X ‚ü∂ Y) (hf : W' f) :
  Œ¶.left_resolution Y :=
costructured_arrow.mk (‚ü®f, hf‚ü© : Œ¶.induced_functor.obj ‚ü®X‚ü© ‚ü∂ (‚ü®Y‚ü© : W'.category))

variable {Œ¶}

@[simps]
def left_resolution.op {Y : D} (X : Œ¶.left_resolution Y) :
  Œ¶.op.right_resolution (opposite.op Y) :=
right_resolution.mk Œ¶.op (opposite.op X.left.1) X.hom.1.op X.hom.2

@[simps]
def right_resolution.unop {Y : D} (X : Œ¶.op.right_resolution (opposite.op Y)) :
  Œ¶.left_resolution Y :=
left_resolution.mk Œ¶ (opposite.unop X.right.1) X.hom.1.unop X.hom.2

@[simps]
def left_resolution.unop_op {Y : D} (X : Œ¶.left_resolution Y) :
  X.op.unop ‚âÖ X :=
costructured_arrow.iso_mk
  (morphism_property.category.mk_iso (iso.refl _)
    (morphism_property.contains_identities.id _ _)
    (morphism_property.contains_identities.id _ _))
  (by { ext, dsimp, simp, })

@[simps]
def right_resolution.op_unop {Y : D} (X : Œ¶.op.right_resolution (opposite.op Y)) :
  X.unop.op ‚âÖ X :=
structured_arrow.iso_mk
  (morphism_property.category.mk_iso (iso.refl _)
    (morphism_property.contains_identities.id _ _)
    (morphism_property.contains_identities.id _ _))
  (by { ext, dsimp, simp, })

variable (Œ¶)

@[simps]
def left_resolution.op_functor (Y : D) :
  Œ¶.left_resolution Y ‚•§ (Œ¶.op.right_resolution (opposite.op Y))·µí·µñ :=
{ obj := Œª X, opposite.op (left_resolution.op X),
  map := Œª X‚ÇÅ X‚ÇÇ f, quiver.hom.op (structured_arrow.hom_mk ‚ü®f.left.1.op, f.left.2‚ü©
    (by { ext, dsimp, simpa only [‚Üê costructured_arrow.w f], })), }

@[simps]
def right_resolution.unop_functor (Y : D) :
  (Œ¶.op.right_resolution (opposite.op Y))·µí·µñ ‚•§ Œ¶.left_resolution Y :=
{ obj := Œª X, (opposite.unop X).unop,
  map := Œª X‚ÇÅ X‚ÇÇ f, costructured_arrow.hom_mk ‚ü®f.unop.right.1.unop, f.unop.right.2‚ü©
    (by { ext, dsimp, simpa only [‚Üê structured_arrow.w f.unop], }), }

@[simps]
def left_resolution.op_equivalence (Y : D) :
  Œ¶.left_resolution Y ‚âå (Œ¶.op.right_resolution (opposite.op Y))·µí·µñ :=
{ functor := left_resolution.op_functor _ _,
  inverse := right_resolution.unop_functor _ _,
  unit_iso := nat_iso.of_components (Œª X, X.unop_op.symm) (by tidy),
  counit_iso := nat_iso.of_components (Œª X, ((opposite.unop X).op_unop).symm.op)
    (Œª X Y f, quiver.hom.unop_inj (by tidy)),
  functor_unit_iso_comp' := Œª X, quiver.hom.unop_inj (by tidy), }

end

variables {C' D' : Type*} [category C'] [category D'] (L‚ÇÅ : C ‚•§ C') (L‚ÇÇ : D ‚•§ D')
  [L‚ÇÅ.is_localization W] [L‚ÇÇ.is_localization W']

abbreviation lift_functor : C' ‚•§ D' :=
localization.lift (Œ¶.functor ‚ãô L‚ÇÇ)
  (Œª X Y f (hf : W f),
    by { dsimp, exact localization.inverts L‚ÇÇ W' _ (Œ¶.mapW f hf), }) L‚ÇÅ

def fac_functor : L‚ÇÅ ‚ãô Œ¶.lift_functor L‚ÇÅ L‚ÇÇ ‚âÖ Œ¶.functor ‚ãô L‚ÇÇ :=
localization.fac _ _ _

class is_localization_equivalence : Prop :=
(nonempty_is_equivalence : nonempty (is_equivalence (Œ¶.lift_functor W.Q W'.Q)))

namespace is_localization_equivalence

lemma iff_aux (C'' D'' : Type*) [category C''] [category D''] (L‚ÇÅ' : C ‚•§ C'') (L‚ÇÇ' : D ‚•§ D'')
  [L‚ÇÅ'.is_localization W] [L‚ÇÇ'.is_localization W']
  (h : is_equivalence (Œ¶.lift_functor L‚ÇÅ L‚ÇÇ)) : is_equivalence (Œ¶.lift_functor L‚ÇÅ' L‚ÇÇ') :=
begin
  let F‚ÇÅ : C' ‚•§ C'' := localization.lift L‚ÇÅ' (localization.inverts L‚ÇÅ' W) L‚ÇÅ,
  let F‚ÇÇ : D' ‚•§ D'' := localization.lift L‚ÇÇ' (localization.inverts L‚ÇÇ' W') L‚ÇÇ,
  have e : Œ¶.lift_functor L‚ÇÅ L‚ÇÇ ‚ãô F‚ÇÇ ‚âÖ F‚ÇÅ ‚ãô Œ¶.lift_functor L‚ÇÅ' L‚ÇÇ' :=
    localization.lift_nat_iso L‚ÇÅ W (L‚ÇÅ ‚ãô Œ¶.lift_functor L‚ÇÅ L‚ÇÇ ‚ãô F‚ÇÇ)
      (L‚ÇÅ ‚ãô F‚ÇÅ ‚ãô Œ¶.lift_functor L‚ÇÅ' L‚ÇÇ') _ _ begin
      refine (functor.associator _ _ _).symm ‚â™‚â´ iso_whisker_right (Œ¶.fac_functor L‚ÇÅ L‚ÇÇ) _ ‚â™‚â´
        functor.associator _ _ _ ‚â™‚â´ iso_whisker_left _ (localization.fac _ _ _) ‚â™‚â´
        (Œ¶.fac_functor L‚ÇÅ' L‚ÇÇ').symm ‚â™‚â´
        iso_whisker_right (localization.fac L‚ÇÅ' (localization.inverts L‚ÇÅ' W) L‚ÇÅ).symm _ ‚â™‚â´
        functor.associator _ _ _,
    end,
  exact is_equivalence.cancel_comp_left F‚ÇÅ _ infer_instance
    (is_equivalence.of_iso e infer_instance),
end

lemma iff (F : C' ‚•§ D') (e : L‚ÇÅ ‚ãô F ‚âÖ Œ¶.functor ‚ãô L‚ÇÇ) :
  Œ¶.is_localization_equivalence ‚Üî nonempty (is_equivalence F) :=
begin
  have h : nonempty (is_equivalence F) ‚Üî nonempty (is_equivalence (Œ¶.lift_functor L‚ÇÅ L‚ÇÇ)),
  { letI : localization.lifting L‚ÇÅ W (Œ¶.functor ‚ãô L‚ÇÇ) F := ‚ü®e‚ü©,
    let e' : F ‚âÖ Œ¶.lift_functor L‚ÇÅ L‚ÇÇ :=
      localization.lift_nat_iso L‚ÇÅ W (Œ¶.functor ‚ãô L‚ÇÇ) (Œ¶.functor ‚ãô L‚ÇÇ) _ _ (iso.refl _),
    exact ‚ü®Œª h‚ÇÅ, ‚ü®is_equivalence.of_iso e' h‚ÇÅ.some‚ü©,
      Œª h‚ÇÇ, ‚ü®is_equivalence.of_iso e'.symm h‚ÇÇ.some‚ü©‚ü©, },
  rw h, clear h,
  split,
  { intro h,
    exact ‚ü®(iff_aux Œ¶ _ _ _ _ _ _ h.nonempty_is_equivalence.some)‚ü©, },
  { intro h,
    exact ‚ü®‚ü®(iff_aux Œ¶ _ _ _ _ _ _ h.some)‚ü©‚ü©, },
end

lemma iff_is_equivalence_lift_functor :
  Œ¶.is_localization_equivalence ‚Üî nonempty (is_equivalence (Œ¶.lift_functor L‚ÇÅ L‚ÇÇ)) :=
is_localization_equivalence.iff Œ¶ L‚ÇÅ L‚ÇÇ (Œ¶.lift_functor L‚ÇÅ L‚ÇÇ) (Œ¶.fac_functor L‚ÇÅ L‚ÇÇ)

lemma iff_is_localization :
  Œ¶.is_localization_equivalence ‚Üî (Œ¶.functor ‚ãô L‚ÇÇ).is_localization W :=
begin
  split,
  { intro h,
    rw iff_is_equivalence_lift_functor Œ¶ W.Q L‚ÇÇ at h,
    letI := h.some,
    exact functor.is_localization.of_equivalence W.Q W (Œ¶.functor ‚ãô L‚ÇÇ)
      (functor.as_equivalence (Œ¶.lift_functor W.Q L‚ÇÇ)) (Œ¶.fac_functor _ _), },
  { introI,
    rw iff_is_equivalence_lift_functor Œ¶ (Œ¶.functor ‚ãô L‚ÇÇ) L‚ÇÇ,
    exact ‚ü®is_equivalence.of_iso (localization.lifting.uniq (Œ¶.functor ‚ãô L‚ÇÇ) W
      (Œ¶.functor ‚ãô L‚ÇÇ) (ùü≠ _) _) infer_instance‚ü©, },
end

instance [hŒ¶ : Œ¶.is_localization_equivalence] :
  is_equivalence (Œ¶.lift_functor L‚ÇÅ L‚ÇÇ) :=
((iff_is_equivalence_lift_functor Œ¶ L‚ÇÅ L‚ÇÇ).mp hŒ¶).some

instance is_localization_of_is_localization_equivalence [hŒ¶ : Œ¶.is_localization_equivalence] :
  (Œ¶.functor ‚ãô L‚ÇÇ).is_localization W :=
by simpa only [‚Üê iff_is_localization Œ¶ L‚ÇÇ] using hŒ¶

instance op_is_localization_equivalence [hŒ¶ : Œ¶.is_localization_equivalence] :
  Œ¶.op.is_localization_equivalence :=
begin
  rw iff_is_localization Œ¶ W'.Q at hŒ¶,
  rw iff_is_localization Œ¶.op W'.Q.op,
  haveI := hŒ¶,
  change (Œ¶.functor ‚ãô W'.Q).op.is_localization W.op,
  apply_instance,
end

end is_localization_equivalence

end localizor_morphism

end

namespace right_derivability_structure

variables {C‚ÇÄ C H : Type*} [category C] [category C‚ÇÄ] [category H]
  {W‚ÇÄ : morphism_property C‚ÇÄ}
  {W : morphism_property C} (Œ¶ : localizor_morphism W‚ÇÄ W)
  [localizor_morphism.is_localization_equivalence Œ¶]
  [morphism_property.multiplicative W‚ÇÄ] [morphism_property.multiplicative W]

structure basic :=
(right_resolution_connected : ‚àÄ (Y : C), is_connected' (Œ¶.right_resolution Y))
(nonempty_arrow_right_resolution :
  ‚àÄ ‚¶ÉY‚ÇÅ Y‚ÇÇ : C‚¶Ñ (f : Y‚ÇÅ ‚ü∂ Y‚ÇÇ), ‚àÉ (X‚ÇÅ : Œ¶.right_resolution Y‚ÇÅ) (X‚ÇÇ : Œ¶.right_resolution Y‚ÇÇ)
  (f' : X‚ÇÅ.right.obj ‚ü∂ X‚ÇÇ.right.obj), X‚ÇÅ.hom.1 ‚â´ Œ¶.functor.map f' = f ‚â´ X‚ÇÇ.hom.1)

namespace basic

variables {Œ¶} (Œ≤ : basic Œ¶) (L : C ‚•§ H) [L.is_localization W]
  {D : Type*} [category D]

def some_right_resolution (Y : C) : Œ¶.right_resolution Y :=
(Œ≤.right_resolution_connected Y).is_nonempty.some

variables {F : C ‚•§ D} (hF : W‚ÇÄ.is_inverted_by (Œ¶.functor ‚ãô F))

namespace existence_derived_functor

include Œ≤ hF

def RF : H ‚•§ D :=
localization.lift (Œ¶.functor ‚ãô F) hF (Œ¶.functor ‚ãô L)

def Œµ : (Œ¶.functor ‚ãô L) ‚ãô RF Œ≤ L hF ‚âÖ Œ¶.functor ‚ãô F :=
begin
  letI : localization.lifting (Œ¶.functor ‚ãô L) W‚ÇÄ (Œ¶.functor ‚ãô F) (RF Œ≤ L hF) :=
    localization.lifting_lift _ _ _,
  refine localization.lifting.iso (Œ¶.functor ‚ãô L) W‚ÇÄ _ _,
end

def Œ±' (X : C) : (functor.const (Œ¶.right_resolution X)).obj (F.obj X) ‚ü∂
  (functor.const (Œ¶.right_resolution X)).obj ((RF Œ≤ L hF).obj (L.obj X)) :=
{ app := Œª X‚ÇÄ, F.map X‚ÇÄ.hom.1 ‚â´ (Œµ Œ≤ L hF).inv.app _ ‚â´
    (RF Œ≤ L hF).map (localization.iso_of_hom L W _ X‚ÇÄ.hom.2).inv,
  naturality' := Œª X‚ÇÄ X‚ÇÄ' œÜ, begin
    dsimp,
    simp only [functor.map_inv, id_comp, comp_id],
    have eq‚ÇÅ := œÜ.w,
    have eq‚ÇÇ := (Œµ Œ≤ L hF).inv.naturality œÜ.right.1,
    dsimp at eq‚ÇÅ eq‚ÇÇ,
    rw id_comp at eq‚ÇÅ,
    rw eq‚ÇÅ,
    dsimp,
    rw [functor.map_comp, assoc, reassoc_of eq‚ÇÇ],
    congr' 2,
    simp only [functor.map_comp],
    erw is_iso.comp_inv_eq, -- should be tidied
    rw is_iso.inv_hom_id_assoc,
  end, }

def Œ±_app (X : C) : F.obj X ‚ü∂ (RF Œ≤ L hF).obj (L.obj X) :=
(Œ±' Œ≤ L hF X).app (Œ≤.some_right_resolution X)

lemma Œ±_app_eq {X : C} (X‚ÇÄ : Œ¶.right_resolution X) :
  (Œ±_app Œ≤ L hF) X = (Œ±' Œ≤ L hF X).app X‚ÇÄ :=
begin
  haveI := Œ≤.right_resolution_connected X,
  apply nat_trans_from_is_preconnected',
end

@[simps]
def Œ± : F ‚ü∂ L ‚ãô RF Œ≤ L hF :=
{ app := Œª X, (Œ±_app Œ≤ L hF) X,
  naturality' := Œª Y‚ÇÅ Y‚ÇÇ f, begin
    obtain ‚ü®X‚ÇÅ, X‚ÇÇ, f', fac‚ü© := Œ≤.nonempty_arrow_right_resolution f,
    rw [Œ±_app_eq Œ≤ L hF X‚ÇÅ, Œ±_app_eq Œ≤ L hF X‚ÇÇ],
    dsimp [Œ±'],
    have eq‚ÇÅ := F.congr_map fac,
    have eq‚ÇÇ := (Œµ Œ≤ L hF).inv.naturality f',
    simp only [functor.map_comp] at eq‚ÇÅ,
    dsimp at eq‚ÇÇ,
    simp only [assoc, ‚Üê reassoc_of eq‚ÇÅ, reassoc_of eq‚ÇÇ, ‚Üê functor.map_comp],
    congr' 3,
    rw [is_iso.eq_inv_comp, ‚Üê L.map_comp_assoc, fac, L.map_comp, assoc,
      is_iso.hom_inv_id, comp_id],
  end, }

instance (X‚ÇÄ : C‚ÇÄ) : is_iso ((Œ± Œ≤ L hF).app (Œ¶.functor.obj X‚ÇÄ)) :=
begin
  let X‚ÇÄ' := localizor_morphism.right_resolution.mk Œ¶ X‚ÇÄ (ùüô _)
    (morphism_property.contains_identities.id W _),
  dsimp [Œ±],
  rw Œ±_app_eq Œ≤ L hF (localizor_morphism.right_resolution.mk Œ¶ X‚ÇÄ (ùüô _)
    (morphism_property.contains_identities.id W _)),
  dsimp [Œ±'],
  simp only [functor.map_id, is_iso.inv_id, comp_id, id_comp],
  apply_instance,
end

@[simps]
def RF' : structured_arrow F ((whiskering_left C H D).obj L) :=
structured_arrow.mk (Œ± Œ≤ L hF)

instance is_iso_RF'_hom_app (X‚ÇÄ : C‚ÇÄ) :
  is_iso ((RF' Œ≤ L hF).hom.app (Œ¶.functor.obj X‚ÇÄ)) :=
(infer_instance : is_iso ((Œ± Œ≤ L hF).app (Œ¶.functor.obj X‚ÇÄ)))

instance (G : structured_arrow F ((whiskering_left C H D).obj L)) :
  subsingleton (RF' Œ≤ L hF ‚ü∂ G) :=
‚ü®Œª œÜ‚ÇÅ œÜ‚ÇÇ, begin
  apply structured_arrow.ext,
  apply localization.nat_trans_ext (Œ¶.functor ‚ãô L) W‚ÇÄ,
  intro X‚ÇÄ,
  have eq‚ÇÅ := congr_app œÜ‚ÇÅ.w (Œ¶.functor.obj X‚ÇÄ),
  have eq‚ÇÇ := congr_app œÜ‚ÇÇ.w (Œ¶.functor.obj X‚ÇÄ),
  dsimp at eq‚ÇÅ eq‚ÇÇ ‚ä¢,
  rw [id_comp] at eq‚ÇÅ eq‚ÇÇ,
  rw [‚Üê cancel_epi ((Œ± Œ≤ L hF).app (Œ¶.functor.obj X‚ÇÄ))],
  dsimp,
  rw [‚Üê eq‚ÇÅ, eq‚ÇÇ],
end‚ü©

def RF_œÑ' (G : structured_arrow F ((whiskering_left C H D).obj L)) :
  RF Œ≤ L hF ‚ü∂ G.right :=
localization.lift_nat_trans (Œ¶.functor ‚ãô L) W‚ÇÄ _ _ _ _
  ((Œµ Œ≤ L hF).hom ‚â´ whisker_left _ G.hom ‚â´ (functor.associator _ _ _).inv)

@[simp]
lemma RF_œÑ'_app_eq (G : structured_arrow F ((whiskering_left C H D).obj L)) (X‚ÇÄ : C‚ÇÄ) :
  (RF_œÑ' Œ≤ L hF G).app (L.obj (Œ¶.functor.obj X‚ÇÄ)) =
    (Œµ Œ≤ L hF).hom.app X‚ÇÄ ‚â´ G.hom.app (Œ¶.functor.obj X‚ÇÄ) :=
begin
  dsimp [RF_œÑ'],
  erw localization.lift_nat_trans_app,
  simp only [localization.lifting.of_comp_iso, iso.refl_hom, nat_trans.id_app,
    nat_trans.comp_app, whisker_left_app, functor.associator_inv_app,
    comp_id, iso.refl_inv, assoc],
  erw id_comp,
end

def RF_œÑ (G : structured_arrow F ((whiskering_left C H D).obj L)) :
  RF' Œ≤ L hF ‚ü∂ G :=
begin
  refine structured_arrow.hom_mk (RF_œÑ' Œ≤ L hF G) _,
  ext X,
  let X‚ÇÄ := Œ≤.some_right_resolution X,
  have eq := (RF_œÑ' Œ≤ L hF G).naturality (L.map X‚ÇÄ.hom.f),
  haveI : is_iso (L.map X‚ÇÄ.hom.f) := localization.inverts L W _ X‚ÇÄ.hom.hf,
  dsimp at ‚ä¢ eq,
  simp only [‚Üê cancel_mono (G.right.map (L.map X‚ÇÄ.hom.f)), assoc, ‚Üê eq, RF_œÑ'_app_eq,
    Œ±_app_eq Œ≤ L hF X‚ÇÄ, Œ±', ‚Üê functor.map_comp_assoc],
  erw [is_iso.inv_hom_id, functor.map_id, id_comp, iso.inv_hom_id_app_assoc, G.hom.naturality],
  refl,
end

instance (G : structured_arrow F ((whiskering_left C H D).obj L)) :
  unique (RF' Œ≤ L hF ‚ü∂ G) :=
unique_of_subsingleton (RF_œÑ Œ≤ L hF G)

lemma is_initial_RF' : limits.is_initial (RF' Œ≤ L hF) := limits.is_initial.of_unique _

instance RF_is_right_derived_functor :
  (RF Œ≤ L hF).is_right_derived_functor (Œ± _ _ _) :=
‚ü®‚ü®is_initial_RF' Œ≤ L hF‚ü©‚ü©

end existence_derived_functor

variable (F)

open existence_derived_functor

/-
The following lemma is a consequence of Lemma 6.5 of
_Structures de d√©rivabilit√©_ by Bruno Kahn, Georges Maltsiniotis,
Advances in mathematics 218 (2018).
-/

lemma existence_derived_functor : F.has_right_derived_functor W :=
functor.is_right_derived_functor.has_right_derived_functor F (RF Œ≤ W.Q hF) W.Q (Œ± _ _ _) W

include Œ≤ hF

lemma is_iso_app (F' : H ‚•§ D) (Œ±' : F ‚ü∂ L ‚ãô F') [F'.is_right_derived_functor Œ±'] (X‚ÇÄ : C‚ÇÄ) :
  is_iso (Œ±'.app (Œ¶.functor.obj X‚ÇÄ)) :=
begin
  rw ‚Üê functor.is_right_derived_functor.uniq_hom_app_comm (RF Œ≤ L hF) F' (Œ± Œ≤ L hF) Œ±'
    (Œ¶.functor.obj X‚ÇÄ),
  apply_instance,
end

end basic

end right_derivability_structure

namespace functor

variables {C D H : Type*} [category C] [category D] [category H]
  {F : C ‚•§ D} (LF : H ‚•§ D) {L : C ‚•§ H} (Œ± : L ‚ãô LF ‚ü∂ F) (W : morphism_property C) [L.is_localization W]

class is_left_derived_functor : Prop :=
(is_terminal [] : nonempty (limits.is_terminal (costructured_arrow.mk Œ± :
  costructured_arrow ((whiskering_left C H D).obj L) F)))

namespace is_left_derived_functor

variables (LF‚ÇÅ LF‚ÇÇ : H ‚•§ D) (Œ±‚ÇÅ : L ‚ãô LF‚ÇÅ ‚ü∂ F) (Œ±‚ÇÇ : L ‚ãô LF‚ÇÇ ‚ü∂ F)
  [LF‚ÇÅ.is_left_derived_functor Œ±‚ÇÅ] [LF‚ÇÇ.is_left_derived_functor Œ±‚ÇÇ]

def uniq' : (costructured_arrow.mk Œ±‚ÇÅ :
  costructured_arrow ((whiskering_left C H D).obj L) F) ‚âÖ costructured_arrow.mk Œ±‚ÇÇ :=
limits.is_limit.cone_point_unique_up_to_iso
    (is_left_derived_functor.is_terminal Œ±‚ÇÅ).some
    (is_left_derived_functor.is_terminal Œ±‚ÇÇ).some

def uniq : LF‚ÇÅ ‚âÖ LF‚ÇÇ :=
(costructured_arrow.proj _ _).map_iso (uniq' _ _ Œ±‚ÇÅ Œ±‚ÇÇ)

@[simp]
def uniq_hom_app_comm (X : C) : (uniq _ _ Œ±‚ÇÅ Œ±‚ÇÇ).hom.app (L.obj X) ‚â´ Œ±‚ÇÇ.app X = Œ±‚ÇÅ.app X :=
congr_app (costructured_arrow.w (uniq' _ _ Œ±‚ÇÅ Œ±‚ÇÇ).hom) X

@[simp]
def uniq_inv_app_comm (X : C) : (uniq _ _ Œ±‚ÇÅ Œ±‚ÇÇ).inv.app (L.obj X) ‚â´ Œ±‚ÇÅ.app X = Œ±‚ÇÇ.app X :=
congr_app (costructured_arrow.w (uniq' _ _ Œ±‚ÇÅ Œ±‚ÇÇ).inv) X

end is_left_derived_functor

variables (F L)

class has_left_derived_functor : Prop :=
(has_terminal' : limits.has_terminal (costructured_arrow ((whiskering_left C _ D).obj W.Q) F))

namespace costructured_arrow_equivalence_op

@[simps]
def functor : (costructured_arrow ((whiskering_left C H D).obj L) F) ‚•§
    (structured_arrow F.op ((whiskering_left C·µí·µñ H·µí·µñ D·µí·µñ).obj L.op))·µí·µñ :=
{ obj := Œª X, opposite.op (structured_arrow.mk
    (show F.op ‚ü∂ ((whiskering_left C·µí·µñ H·µí·µñ D·µí·µñ).obj L.op).obj X.left.op,
      by exact (functor.op_hom _ _).map X.hom.op)),
  map := Œª X‚ÇÅ X‚ÇÇ f, quiver.hom.op
    (structured_arrow.hom_mk ((functor.op_hom H D).map (quiver.hom.op f.left))
      (by { rw ‚Üê costructured_arrow.w f, refl, })), }

@[simps]
def inverse : (structured_arrow F.op ((whiskering_left C·µí·µñ H·µí·µñ D·µí·µñ).obj L.op))·µí·µñ ‚•§
    (costructured_arrow ((whiskering_left C H D).obj L) F) :=
{ obj := Œª X, costructured_arrow.mk
      (show ((whiskering_left C H D).obj L).obj X.unop.right.unop ‚ü∂ F,
        by exact ((functor.op_inv C D).map X.unop.hom).unop ‚â´ F.op_unop_iso.hom),
  map := Œª X‚ÇÅ X‚ÇÇ f, costructured_arrow.hom_mk (((functor.op_inv _ _).map f.unop.right).unop)
      (by { rw ‚Üê structured_arrow.w f.unop, dsimp, ext, tidy, }), }

@[simps]
def unit_iso : ùü≠ _ ‚âÖ functor F L ‚ãô inverse F L :=
nat_iso.of_components (Œª X, costructured_arrow.iso_mk (functor.op_unop_iso X.left).symm
    (by { ext, dsimp, tidy, })) (by tidy)

@[simps]
def counit_iso : inverse F L ‚ãô functor F L ‚âÖ ùü≠ _ :=
nat_iso.of_components (Œª X, begin
  change opposite.op (opposite.unop _) ‚âÖ opposite.op (opposite.unop _),
  apply iso.op,
  refine structured_arrow.iso_mk (functor.unop_op_iso _).symm _,
  ext, dsimp, tidy,
end) (Œª X Y f, quiver.hom.unop_inj (by { dsimp, tidy, }))

end costructured_arrow_equivalence_op

def costructured_arrow_equivalence_op :
  (costructured_arrow ((whiskering_left C H D).obj L) F) ‚âå
    (structured_arrow F.op ((whiskering_left C·µí·µñ H·µí·µñ D·µí·µñ).obj L.op))·µí·µñ :=
{ functor := costructured_arrow_equivalence_op.functor _ _,
  inverse := costructured_arrow_equivalence_op.inverse _ _,
  unit_iso := costructured_arrow_equivalence_op.unit_iso _ _,
  counit_iso := costructured_arrow_equivalence_op.counit_iso _ _,
  functor_unit_iso_comp' := Œª X, quiver.hom.unop_inj begin
    dsimp [structured_arrow.iso_mk, structured_arrow.hom_mk, comma.iso_mk],
    tidy,
  end, }

variable (L)

lemma has_left_derived_functor_iff_op :
  has_left_derived_functor F W ‚Üî has_right_derived_functor F.op W.op :=
begin
  have h : F.has_left_derived_functor W ‚Üî
    limits.has_terminal (costructured_arrow ((whiskering_left C _ D).obj W.Q) F) :=
    ‚ü®Œª h, h.1, Œª h, ‚ü®h‚ü©‚ü©,
  rw [h, has_right_derived_functor_iff F.op W.Q.op W.op],
  have e := costructured_arrow_equivalence_op F W.Q,
  split,
  { introI,
    haveI : limits.has_terminal
      (structured_arrow F.op ((whiskering_left C·µí·µñ (W.localization)·µí·µñ D·µí·µñ).obj W.Q.op))·µí·µñ :=
      adjunction.has_limits_of_shape_of_equivalence e.inverse,
    exact limits.has_initial_of_has_terminal_op, },
  { introI,
    exact adjunction.has_limits_of_shape_of_equivalence e.functor, },
end

lemma has_left_derived_functor_iff :
  has_left_derived_functor F W ‚Üî
    limits.has_terminal (costructured_arrow ((whiskering_left C H D).obj L) F) :=
begin
  rw [has_left_derived_functor_iff_op, has_right_derived_functor_iff F.op L.op W.op],
  have e := costructured_arrow_equivalence_op F L,
  split,
  { introI,
    exact adjunction.has_limits_of_shape_of_equivalence e.functor, },
  { introI,
    haveI : limits.has_terminal
      (structured_arrow F.op ((whiskering_left C·µí·µñ H·µí·µñ D·µí·µñ).obj L.op))·µí·µñ :=
      adjunction.has_limits_of_shape_of_equivalence e.inverse,
    exact limits.has_initial_of_has_terminal_op, },
end

lemma is_left_derived_functor.has_left_derived_functor [LF.is_left_derived_functor Œ±] :
  F.has_left_derived_functor W :=
begin
  rw F.has_left_derived_functor_iff L W,
  exact limits.is_terminal.has_terminal (is_left_derived_functor.is_terminal Œ±).some,
end

variables {F L LF F Œ±}

lemma is_left_derived_functor.op (hŒ± : LF.is_left_derived_functor Œ±) :
  @is_right_derived_functor _ _ _ _ _ _ F.op LF.op L.op ((functor.op_hom _ _).map Œ±.op) :=
is_right_derived_functor.mk
  (nonempty.intro (limits.initial_unop_of_terminal
    (limits.is_terminal.of_equivalence (costructured_arrow_equivalence_op F L)
      hŒ±.is_terminal.some)))

variables (F L LF F Œ±)

lemma has_left_derived_functor.has_terminal [has_left_derived_functor F W] :
  limits.has_terminal (costructured_arrow ((whiskering_left C H D).obj L) F) :=
(has_left_derived_functor_iff F L W).1 infer_instance

def has_left_derived_functor.initial [has_left_derived_functor F W] :
  (costructured_arrow ((whiskering_left C H D).obj L) F) :=
begin
  haveI := has_left_derived_functor.has_terminal F L W,
  exact limits.terminal _,
end

def left_derived_functor [has_left_derived_functor F W] : H ‚•§ D :=
(has_left_derived_functor.initial F L W).left

def left_derived_functor_Œ± [has_left_derived_functor F W] :
  L ‚ãô F.left_derived_functor L W ‚ü∂ F :=
(has_left_derived_functor.initial F L W).hom

instance left_derived_functor_is_left_derived_functor [has_left_derived_functor F W] :
  (F.left_derived_functor L W).is_left_derived_functor (F.left_derived_functor_Œ± L W) :=
‚ü®‚ü®begin
  haveI := has_left_derived_functor.has_terminal F L W,
  exact limits.is_terminal.of_iso limits.terminal_is_terminal
    (costructured_arrow.iso_mk (iso.refl _) (by tidy)),
end‚ü©‚ü©

end functor

namespace left_derivability_structure

variables {C‚ÇÄ C H : Type*} [category C] [category C‚ÇÄ] [category H]
  {W‚ÇÄ : morphism_property C‚ÇÄ}
  {W : morphism_property C} (L : C ‚•§ H) [L.is_localization W] (Œ¶ : localizor_morphism W‚ÇÄ W)
  [localizor_morphism.is_localization_equivalence Œ¶]
  [morphism_property.multiplicative W‚ÇÄ] [morphism_property.multiplicative W]

structure basic :=
(left_resolution_connected : ‚àÄ (Y : C), is_connected' (Œ¶.left_resolution Y))
(nonempty_arrow_left_resolution :
  ‚àÄ ‚¶ÉY‚ÇÅ Y‚ÇÇ : C‚¶Ñ (f : Y‚ÇÅ ‚ü∂ Y‚ÇÇ), ‚àÉ (X‚ÇÅ : Œ¶.left_resolution Y‚ÇÅ) (X‚ÇÇ : Œ¶.left_resolution Y‚ÇÇ)
  (f' : X‚ÇÅ.left.obj ‚ü∂ X‚ÇÇ.left.obj), Œ¶.functor.map f' ‚â´ X‚ÇÇ.hom.1 = X‚ÇÅ.hom.1 ‚â´ f)

namespace basic

variables {L Œ¶}

def op (Œ≤ : basic  Œ¶) : right_derivability_structure.basic Œ¶.op :=
{ right_resolution_connected := Œª Y, (is_connected'.of_equivalence
      (localizor_morphism.left_resolution.op_equivalence Œ¶ (opposite.unop Y))
      (Œ≤.left_resolution_connected (opposite.unop Y))).unop,
  nonempty_arrow_right_resolution := Œª Y‚ÇÅ Y‚ÇÇ f, begin
    obtain ‚ü®X‚ÇÅ, X‚ÇÇ, f', fac‚ü© := Œ≤.nonempty_arrow_left_resolution f.unop,
    exact ‚ü®X‚ÇÇ.op, X‚ÇÅ.op, f'.op, quiver.hom.unop_inj fac‚ü©,
  end, }

variables (Œ≤ : basic Œ¶) {D : Type*} [category D] (F : C ‚•§ D)
  (hF : W‚ÇÄ.is_inverted_by (Œ¶.functor ‚ãô F))

include Œ≤ hF

lemma existence_derived_functor : F.has_left_derived_functor W :=
by simpa only [functor.has_left_derived_functor_iff_op]
  using Œ≤.op.existence_derived_functor F.op hF.op

lemma is_iso_app (F' : H ‚•§ D) (Œ±' : L ‚ãô F' ‚ü∂ F) [hŒ±' : F'.is_left_derived_functor Œ±'] (X‚ÇÄ : C‚ÇÄ) :
  is_iso (Œ±'.app (Œ¶.functor.obj X‚ÇÄ)) :=
begin
  suffices : is_iso (Œ±'.app (Œ¶.functor.obj X‚ÇÄ)).op,
  { haveI := this,
    exact is_iso.of_iso ((as_iso (Œ±'.app (Œ¶.functor.obj X‚ÇÄ)).op).unop), },
  let Œ±'' : F.op ‚ü∂ L.op ‚ãô F'.op := (functor.op_hom C D).map Œ±'.op,
  haveI : F'.op.is_right_derived_functor Œ±'' := hŒ±'.op,
  exact Œ≤.op.is_iso_app L.op F.op hF.op F'.op Œ±'' (opposite.op X‚ÇÄ),
end

end basic

end left_derivability_structure

end category_theory
