import for_mathlib.category_theory.localization.preadditive
import category_theory.triangulated.pretriangulated
import for_mathlib.category_theory.localization.calculus_of_fractions

noncomputable theory

namespace category_theory

open category limits

class morphism_property.compatible_with_shift {C : Type*} [category C]
  (W : morphism_property C) (A : Type*) [add_monoid A] [has_shift C A] : Prop :=
(translate : ‚àÄ (a : A), W.inverse_image (shift_functor C a) = W)

lemma morphism_property.compatible_with_shift.iff {C : Type*} [category C]
  (W : morphism_property C) {A : Type*} [add_monoid A] [has_shift C A]
  [h : W.compatible_with_shift A]
  {X Y : C} (f : X ‚ü∂ Y) (a : A) : W ((shift_functor C a).map f) ‚Üî W f :=
by { conv_rhs { rw ‚Üê h.translate a }, refl, }

namespace shift

variables {C D : Type*} [category C] [category D]
  (L : C ‚•§ D) (W : morphism_property C) [L.is_localization W]
  {A : Type*} [add_monoid A] [has_shift C A] [W.compatible_with_shift A]

variable (C)

local attribute [reducible] discrete.add_monoidal

variable {C}

include L W

lemma comp_localization_inverts (a : A) : W.is_inverted_by (shift_functor C a ‚ãô L) :=
Œª X Y f hf,
begin
  dsimp,
  rw ‚Üê morphism_property.compatible_with_shift.iff W f a at hf,
  exact localization.inverts L W _ hf,
end

variable (A)

def localization : has_shift D A :=
begin
  let F := Œª (a : A), localization.lift (shift_functor C a ‚ãô L)
    (shift.comp_localization_inverts L W a) L,
  let H : Œ† (a : A), Comm_sq (shift_functor C a) L L (F a) :=
    Œª a, ‚ü®localization.lifting.iso L W (shift_functor C a ‚ãô L) (F a)‚ü©,
  let H‚ÇÄ : Comm_sq (ùü≠ C) L L (ùü≠ D) := Comm_sq.horiz_refl L,
  let Œµ : ùü≠ D ‚âÖ F 0 := localization.lift_nat_iso' H‚ÇÄ (H 0) W (shift_functor_zero C A).symm,
  let Œº : Œ† (a‚ÇÅ a‚ÇÇ : A), F a‚ÇÅ ‚ãô F a‚ÇÇ ‚âÖ F (a‚ÇÅ + a‚ÇÇ) := Œª a‚ÇÅ a‚ÇÇ,
    localization.lifting_comp_iso (H a‚ÇÅ) (H a‚ÇÇ) (H (a‚ÇÅ+a‚ÇÇ))
      (shift_functor_add C a‚ÇÅ a‚ÇÇ).symm W W,
  let e : Œ† {a‚ÇÅ a‚ÇÇ : A} (h : a‚ÇÅ = a‚ÇÇ), shift_functor C a‚ÇÅ ‚âÖ shift_functor C a‚ÇÇ :=
    Œª a‚ÇÅ a‚ÇÇ h, eq_to_iso (by rw h),
  have Heq : Œ† {a b : A} (h : a = b) (X : C), (H a).iso.inv.app X = eq_to_hom (by rw h) ‚â´ (H b).iso.inv.app X ‚â´ eq_to_hom (by rw h),
  { intros a b h X,
    subst h,
    simp only [eq_to_hom_refl, id_comp, comp_id], },
  have associativity : ‚àÄ (a‚ÇÅ a‚ÇÇ a‚ÇÉ : A),
    eq_to_hom (by rw functor.assoc) ‚â´ (Œº a‚ÇÅ a‚ÇÇ).hom ‚ó´ ùüô (F a‚ÇÉ) ‚â´ (Œº (a‚ÇÅ + a‚ÇÇ) a‚ÇÉ).hom ‚â´ eq_to_hom (congr_arg F (add_assoc a‚ÇÅ a‚ÇÇ a‚ÇÉ)) =
    ùüô (F a‚ÇÅ) ‚ó´ (Œº a‚ÇÇ a‚ÇÉ).hom ‚â´ (Œº a‚ÇÅ (a‚ÇÇ + a‚ÇÉ)).hom,
  { intros a‚ÇÅ a‚ÇÇ a‚ÇÉ,
    dsimp only [Œº],
    simp only [eq_to_hom_refl, id_comp, ‚Üê localization.lift_nat_trans'_id (H a‚ÇÉ) W,
      ‚Üê localization.lift_nat_trans'_id (H a‚ÇÅ) W, localization.lifting_comp_iso_hom,
      localization.hcomp_lift_nat_trans', localization.comp_lift_nat_trans', localization.comp_lift_nat_trans'_assoc],
    refine localization.nat_trans_ext L W _ _ (Œª X, _),
    have this : (shift_functor_add C a‚ÇÅ a‚ÇÇ).symm.hom ‚ó´ ùüô (shift_functor C a‚ÇÉ) ‚â´ (shift_functor_add C (a‚ÇÅ + a‚ÇÇ) a‚ÇÉ).symm.hom =
      eq_to_hom (functor.assoc _ _ _) ‚â´ (ùüô (shift_functor C a‚ÇÅ) ‚ó´ (shift_functor_add C a‚ÇÇ a‚ÇÉ).symm.hom ‚â´ (shift_functor_add C a‚ÇÅ (a‚ÇÇ + a‚ÇÉ)).symm.hom) ‚â´
        eq_to_hom (by rw (add_assoc a‚ÇÅ a‚ÇÇ a‚ÇÉ)),
    { ext X,
      dsimp,
      simp only [obj_Œº_app, eq_to_iso.inv, id_comp, assoc, Œº_inv_hom_app, comp_id, functor.map_id, eq_to_hom_app, eq_to_hom_map], },
    simp only [nat_trans.comp_app, eq_to_hom_app, localization.lift_nat_trans'_app,
      localization.lift_nat_trans'_app, Comm_sq.horiz_comp_assoc_iso, assoc, this,
      Heq (add_assoc a‚ÇÅ a‚ÇÇ a‚ÇÉ), eq_to_hom_trans, L.map_comp, eq_to_hom_map, eq_to_hom_refl,
      eq_to_hom_trans_assoc, id_comp, comp_id], },
  have left_unitality : ‚àÄ (a : A), Œµ.hom ‚ó´ ùüô (F a) ‚â´ (Œº 0 a).hom =
    eq_to_hom (by simpa only [zero_add]),
  { intro a,
    dsimp [Œµ, Œº],
    rw ‚Üê localization.lift_nat_trans'_id (H a) W,
    erw localization.lifting_comp_iso_nat_trans_compatibility H‚ÇÄ (H a) (H (0 + a)) (H 0) (H a) (H (0 + a))
      ((functor.right_unitor _) ‚â™‚â´ e (zero_add a).symm) (shift_functor_add C 0 a).symm W W
      (shift_functor_zero C A).inv (ùüô _) (ùüô _) begin
        ext X,
        dsimp,
        simp only [eq_to_hom_map, obj_Œµ_app, eq_to_iso.inv, eq_to_hom_app, id_comp, assoc,
          Œº_inv_hom_app],
      end,
    simp only [localization.lifting_comp_iso_hom, localization.lift_nat_trans'_id, comp_id],
    refine localization.nat_trans_ext L W _ _ (Œª X, _),
    rw [localization.lift_nat_trans'_app, eq_to_hom_app, Heq (zero_add a), iso.trans_hom,
      nat_trans.comp_app, functor.right_unitor_hom_app, eq_to_iso.hom, eq_to_hom_app],
    erw id_comp,
    simpa only [eq_to_hom_map, eq_to_hom_trans_assoc, eq_to_hom_refl, id_comp,
      Comm_sq.refl_horiz_comp_iso, iso.hom_inv_id_app_assoc], },
  have right_unitality : ‚àÄ (a : A), ùüô (F a) ‚ó´ Œµ.hom ‚â´ (Œº a 0).hom =
    eq_to_hom (by simpa only [add_zero]),
  { intro a,
    dsimp only [Œµ, Œº],
    rw ‚Üê localization.lift_nat_trans'_id (H a) W,
    rw localization.lift_nat_iso'_hom,
    erw localization.lifting_comp_iso_nat_trans_compatibility (H a) H‚ÇÄ (H (a + 0)) (H a) (H 0) (H (a + 0))
      ((functor.right_unitor _) ‚â™‚â´ e (add_zero a).symm) (shift_functor_add C a 0).symm W W
      (ùüô _) (shift_functor_zero C A).inv (ùüô _) begin
        ext X,
        dsimp,
        simp only [Œµ_app_obj, eq_to_iso.inv, functor.map_id, assoc, comp_id, Œº_inv_hom_app, eq_to_hom_app, id_comp,
          eq_to_hom_map],
      end,
    simp only [localization.lifting_comp_iso_hom, localization.lift_nat_trans'_id, comp_id],
    refine localization.nat_trans_ext L W _ _ (Œª X, _),
    rw [localization.lift_nat_trans'_app, eq_to_hom_app, Heq (add_zero a), iso.trans_hom,
      nat_trans.comp_app, functor.right_unitor_hom_app, eq_to_iso.hom, eq_to_hom_app],
    erw id_comp,
    simpa only [eq_to_hom_map, eq_to_hom_trans_assoc, eq_to_hom_refl, id_comp,
      Comm_sq.horiz_comp_refl_iso, iso.hom_inv_id_app_assoc], },
  exact has_shift_mk D A
  { F := F,
    Œµ := Œµ,
    Œº := Œº,
    associativity := Œª a‚ÇÅ a‚ÇÇ a‚ÇÉ X, begin
      have h := congr_app (associativity a‚ÇÅ a‚ÇÇ a‚ÇÉ) X,
      simp only [nat_trans.comp_app, nat_trans.hcomp_app, eq_to_hom_app, eq_to_hom_refl,
        nat_trans.id_app, id_comp, functor.map_id, comp_id] at h,
      erw id_comp at h,
      exact h,
    end,
    left_unitality := Œª a X, by simpa only [iso.trans_hom, nat_trans.comp_app,
      eq_to_iso.hom, eq_to_hom_app, nat_iso.hcomp, nat_trans.hcomp_id_app,
      iso.refl_hom] using congr_app (left_unitality a) X,
    right_unitality := Œª a X, by simpa only [iso.trans_hom, nat_trans.comp_app,
      eq_to_iso.hom, eq_to_hom_app, nat_iso.hcomp, iso.refl_hom,
      nat_trans.id_hcomp_app] using congr_app (right_unitality a) X, },
end

variable {A}

@[simp]
def localization_comm_shift (a : A) :
  shift_functor C a ‚ãô L ‚âÖ L ‚ãô @shift_functor D A _ _ (shift.localization L W A) a :=
(localization.fac _ _ _).symm

/- show that the localized shift functors are additive if `A` is an add_comm_group
  and D has finite products: this is because these functors are equivalences of categories. -/

end shift

namespace triangulated

open pretriangulated

section

variables (C : Type*) [category C] [has_shift C ‚Ñ§] [has_zero_object C] [has_zero_morphisms C]

@[simps]
def contractible_triangle_functor : C ‚•§ triangle C :=
{ obj := Œª X, contractible_triangle C X,
  map := Œª X Y f,
  { hom‚ÇÅ := f,
    hom‚ÇÇ := f,
    hom‚ÇÉ := 0, }, }

variable {C}

def triangle.mk_iso (T T' : triangle C) (e‚ÇÅ : T.obj‚ÇÅ ‚âÖ T'.obj‚ÇÅ) (e‚ÇÇ : T.obj‚ÇÇ ‚âÖ T'.obj‚ÇÇ)
  (e‚ÇÉ : T.obj‚ÇÉ ‚âÖ T'.obj‚ÇÉ)
  (comm‚ÇÅ : T.mor‚ÇÅ ‚â´ e‚ÇÇ.hom = e‚ÇÅ.hom ‚â´ T'.mor‚ÇÅ)
  (comm‚ÇÇ : T.mor‚ÇÇ ‚â´ e‚ÇÉ.hom = e‚ÇÇ.hom ‚â´ T'.mor‚ÇÇ)
  (comm‚ÇÉ : T.mor‚ÇÉ ‚â´ (shift_functor C 1).map e‚ÇÅ.hom = e‚ÇÉ.hom ‚â´ T'.mor‚ÇÉ) : T ‚âÖ T' :=
{ hom :=
  { hom‚ÇÅ := e‚ÇÅ.hom,
    hom‚ÇÇ := e‚ÇÇ.hom,
    hom‚ÇÉ := e‚ÇÉ.hom,
    comm‚ÇÅ' := comm‚ÇÅ,
    comm‚ÇÇ' := comm‚ÇÇ,
    comm‚ÇÉ' := comm‚ÇÉ, },
  inv :=
  { hom‚ÇÅ := e‚ÇÅ.inv,
    hom‚ÇÇ := e‚ÇÇ.inv,
    hom‚ÇÉ := e‚ÇÉ.inv,
    comm‚ÇÅ' := by rw [‚Üê cancel_mono e‚ÇÇ.hom, assoc, e‚ÇÇ.inv_hom_id, comp_id, assoc, comm‚ÇÅ, e‚ÇÅ.inv_hom_id_assoc],
    comm‚ÇÇ' := by { rw [‚Üê cancel_mono e‚ÇÉ.hom, assoc, e‚ÇÉ.inv_hom_id, comp_id, assoc, comm‚ÇÇ, e‚ÇÇ.inv_hom_id_assoc], },
    comm‚ÇÉ' := by { rw [‚Üê cancel_epi e‚ÇÉ.hom, ‚Üê assoc, ‚Üê comm‚ÇÉ, assoc, ‚Üê functor.map_comp, e‚ÇÅ.hom_inv_id, functor.map_id, comp_id, e‚ÇÉ.hom_inv_id_assoc], }, },
  hom_inv_id' := by { ext; apply iso.hom_inv_id, },
  inv_hom_id' := by { ext; apply iso.inv_hom_id, }, }

end


variables {C D : Type*} [category C] [category D]
  [has_zero_object C] [has_shift C ‚Ñ§] [preadditive C]
  [has_zero_object D] [has_shift D ‚Ñ§] [preadditive D]
  [‚àÄ n : ‚Ñ§, functor.additive (shift_functor C n)] [hC : pretriangulated C]
  [‚àÄ n : ‚Ñ§, functor.additive (shift_functor D n)]
  (L : C ‚•§ D) (W : morphism_property C) [L.is_localization W]
  [W.compatible_with_shift ‚Ñ§] [functor.additive L]
  (comm_shift : shift_functor C (1 : ‚Ñ§) ‚ãô L ‚âÖ L ‚ãô shift_functor D (1 : ‚Ñ§))
  [left_calculus_of_fractions W] [right_calculus_of_fractions W]
--  [hL‚ÇÇ : functor.additive L]
/- state SM6 -/

include L comm_shift

namespace localization

@[simps]
def functor : triangulated_functor_struct C D :=
{ comm_shift := comm_shift,
  .. L }

include hC
@[simp]
def distinguished_triangles : set (triangle D) :=
Œª T, ‚àÉ (T' : triangle C) (e : T ‚âÖ (functor L comm_shift).map_triangle.obj T'), T' ‚àà dist_triang C

lemma isomorphic_distinguished {T‚ÇÅ T‚ÇÇ : triangle D} (e : T‚ÇÇ ‚âÖ T‚ÇÅ)
  (h : T‚ÇÅ ‚àà distinguished_triangles L comm_shift) : T‚ÇÇ ‚àà distinguished_triangles L comm_shift :=
by { rcases h with ‚ü®T', e', hT'‚ü©, exact ‚ü®T', e ‚â™‚â´ e',  hT'‚ü©, }

include W

lemma contractible_distinguished (X : D) : contractible_triangle D X ‚àà distinguished_triangles L comm_shift :=
begin
  haveI := localization.ess_surj L W,
  let e := ((contractible_triangle_functor D).map_iso
    (L.obj_obj_preimage_iso X)),
  refine ‚ü®contractible_triangle C (L.obj_preimage X), _, contractible_distinguished _‚ü©,
  { refine e.symm ‚â™‚â´ triangle.mk_iso _ _ (iso.refl _) (iso.refl _) L.map_zero_object.symm _ _ _,
    tidy, },
end

end localization

def localization [pretriangulated C] : pretriangulated D :=
{ distinguished_triangles := localization.distinguished_triangles L comm_shift,
  isomorphic_distinguished := Œª T‚ÇÅ hT‚ÇÅ T‚ÇÇ e,
    localization.isomorphic_distinguished L comm_shift e hT‚ÇÅ,
  contractible_distinguished := localization.contractible_distinguished L W comm_shift,
  distinguished_cocone_triangle := sorry,
  rotate_distinguished_triangle := sorry,
  complete_distinguished_triangle_morphism := sorry, }

end triangulated

end category_theory
