import for_mathlib.category_theory.localization.preadditive
import category_theory.triangulated.basic

noncomputable theory

namespace category_theory

class morphism_property.compatible_with_shift {C : Type*} [category C]
  (W : morphism_property C) (A : Type*) [add_monoid A] [has_shift C A] : Prop :=
(translate : ‚àÄ (a : A), W.inverse_image (shift_functor C a) = W)

lemma morphism_property.compatible_with_shift.iff {C : Type*} [category C]
  (W : morphism_property C) {A : Type*} [add_monoid A] [has_shift C A]
  [h : W.compatible_with_shift A]
  {X Y : C} (f : X ‚ü∂ Y) (a : A) : W ((shift_functor C a).map f) ‚Üî W f :=
by { conv_rhs { rw ‚Üê h.translate a }, refl, }

namespace shift

variables {C D : Type*} [category C] [category D]
  (L : C ‚•§ D) (W : morphism_property C) [L.is_localization W]
  {A : Type*} [add_monoid A] [has_shift C A] [W.compatible_with_shift A]

include L W

lemma comp_localization_inverts (a : A) : W.is_inverted_by (shift_functor C a ‚ãô L) :=
Œª X Y f hf,
begin
  dsimp,
  rw ‚Üê morphism_property.compatible_with_shift.iff W f a at hf,
  exact localization.inverts L W _ hf,
end

variable (A)

def localization : has_shift D A :=
begin
  letI : localization.lifting L W (shift_functor C (0 : A) ‚ãô L) (ùü≠ D) :=
    ‚ü®iso_whisker_right (shift_functor_zero C A).symm L‚ü©,
  let F := Œª (a : A), localization.lift (shift_functor C a ‚ãô L)
    (shift.comp_localization_inverts L W a) L,
  let H : Œ† (a : A), Comm_sq (shift_functor C a) L L (F a) :=
    Œª a, ‚ü®localization.lifting.iso L W (shift_functor C a ‚ãô L) (F a)‚ü©,
  let Œµ : ùü≠ D ‚âÖ F 0 := localization.lifting.uniq L W (shift_functor C (0 : A) ‚ãô L) _ _,
  let Œº : Œ† (a‚ÇÅ a‚ÇÇ : A), F a‚ÇÅ ‚ãô F a‚ÇÇ ‚âÖ F (a‚ÇÅ + a‚ÇÇ) := Œª a‚ÇÅ a‚ÇÇ,
    localization.lifting_comp_iso (H a‚ÇÅ) (H a‚ÇÇ) (H (a‚ÇÅ+a‚ÇÇ))
      (shift_functor_add C a‚ÇÅ a‚ÇÇ).symm W W W,
  have left_unitality : ‚àÄ (a : A), nat_iso.hcomp Œµ (iso.refl (F a)) ‚â™‚â´ Œº 0 a =
    eq_to_iso (by simpa only [zero_add]),
  { sorry, },
  exact has_shift_mk D A
  { F := F,
    Œµ := Œµ,
    Œº := Œº,
    associativity := sorry,
    left_unitality := Œª a X, begin
      have h := congr_arg (Œª (e : _ ‚âÖ _), e.hom) (left_unitality a),
      simpa only [iso.trans_hom, nat_trans.comp_app, eq_to_iso.hom, eq_to_hom_app,
        nat_iso.hcomp, nat_trans.hcomp_id_app, iso.refl_hom] using congr_app h X,
    end,
    right_unitality := sorry, },
end

end shift

end category_theory
