import category_theory.shift

noncomputable theory

namespace category_theory

open category

variables (C : Type*) {A : Type*} [category C] [add_monoid A] [has_shift C A]

def shift_functor_zero' {a : A} (ha : a = 0) : shift_functor C a ‚âÖ ùü≠ _ :=
by { subst ha, exact shift_functor_zero C A, }

def shift_functor_add' {a‚ÇÅ a‚ÇÇ s : A} (h : a‚ÇÅ + a‚ÇÇ = s) :
  shift_functor C s ‚âÖ shift_functor C a‚ÇÅ ‚ãô shift_functor C a‚ÇÇ :=
by { subst h, exact shift_functor_add C a‚ÇÅ a‚ÇÇ, }

lemma shift_functor_add'_eq {a‚ÇÅ a‚ÇÇ s : A} (h : a‚ÇÅ + a‚ÇÇ = s) :
  shift_functor_add' C h = eq_to_iso (by rw h) ‚â™‚â´
    shift_functor_add C a‚ÇÅ a‚ÇÇ :=
begin
  subst h,
  ext1,
  simpa only [iso.trans_hom, eq_to_iso_refl, iso.refl_hom, id_comp],
end

include C A

local attribute [reducible] discrete.add_monoidal endofunctor_monoidal_category

lemma shift_functor_assoc' {a‚ÇÅ a‚ÇÇ a‚ÇÉ a‚ÇÅ‚ÇÇ a‚ÇÇ‚ÇÉ s : A} (h‚ÇÅ‚ÇÇ‚ÇÉ : a‚ÇÅ + a‚ÇÇ + a‚ÇÉ = s)
  (h‚ÇÅ‚ÇÇ : a‚ÇÅ + a‚ÇÇ = a‚ÇÅ‚ÇÇ) (h‚ÇÇ‚ÇÉ : a‚ÇÇ + a‚ÇÉ = a‚ÇÇ‚ÇÉ) :
  (shift_functor_add' C (show a‚ÇÅ‚ÇÇ + a‚ÇÉ = s, by rw [‚Üê h‚ÇÅ‚ÇÇ, h‚ÇÅ‚ÇÇ‚ÇÉ])) ‚â™‚â´
    iso_whisker_right (shift_functor_add' C h‚ÇÅ‚ÇÇ) _ ‚â™‚â´ functor.associator _ _ _ =
  (shift_functor_add' C (show a‚ÇÅ + a‚ÇÇ‚ÇÉ = s, by rw [‚Üê h‚ÇÇ‚ÇÉ, ‚Üê add_assoc, h‚ÇÅ‚ÇÇ‚ÇÉ]))
    ‚â™‚â´ iso_whisker_left _ (shift_functor_add' C h‚ÇÇ‚ÇÉ) :=
begin
  ext1,
  rw ‚Üê cancel_mono (iso_whisker_left (shift_functor C a‚ÇÅ) (shift_functor_add' C h‚ÇÇ‚ÇÉ)).inv,
  substs h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÇ‚ÇÉ,
  ext X,
  simp only [shift_functor_add'_eq],
  sorry,
end

end category_theory
