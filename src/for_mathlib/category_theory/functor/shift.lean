import category_theory.shift
import tactic.linarith

noncomputable theory

namespace category_theory

open category

namespace functor

universes v u

variables {C D : Type*} [category C] [category D] (F : C ‚•§ D)
  (A G : Type*) [add_monoid A] [add_group G]
  [has_shift C A] [has_shift D A] [has_shift C G] [has_shift D G]
  [has_shift C ‚Ñ§] [has_shift D ‚Ñ§]

def comm_shift_iso := Œ† (a : A), shift_functor C a ‚ãô F ‚âÖ F ‚ãô shift_functor D a

@[simps]
def comm_shift_iso‚ÇÄ : shift_functor C (0 : A) ‚ãô F ‚âÖ F ‚ãô shift_functor D (0 : A) :=
calc shift_functor C (0 : A) ‚ãô F ‚âÖ ùü≠ _ ‚ãô F : iso_whisker_right (shift_functor_zero C A) _
... ‚âÖ F : left_unitor F
... ‚âÖ F ‚ãô ùü≠ _ : (right_unitor F).symm
... ‚âÖ F ‚ãô shift_functor D (0 : A) : iso_whisker_left _ (shift_functor_zero D A).symm

variable {A}

@[simps]
def comm_shift_iso_add (a b : A)
  (e‚ÇÅ : shift_functor C a ‚ãô F ‚âÖ F ‚ãô shift_functor D a)
  (e‚ÇÇ : shift_functor C b ‚ãô F ‚âÖ F ‚ãô shift_functor D b) :
  shift_functor C (a + b) ‚ãô F ‚âÖ F ‚ãô shift_functor D (a + b) :=
calc shift_functor C (a + b) ‚ãô F ‚âÖ (shift_functor C a ‚ãô shift_functor C b) ‚ãô F :
  iso_whisker_right (shift_functor_add C a b) _
... ‚âÖ _ : functor.associator _ _ _
... ‚âÖ _ : iso_whisker_left _ e‚ÇÇ
... ‚âÖ _ : (functor.associator _ _ _).symm
... ‚âÖ _ : iso_whisker_right e‚ÇÅ _
... ‚âÖ _ : functor.associator _ _ _
... ‚âÖ _ : iso_whisker_left _ (shift_functor_add D a b).symm

@[simps]
def comm_shift_iso_cancel_add (a b : A)
  (e‚ÇÅ : shift_functor C (a + b) ‚ãô F ‚âÖ F ‚ãô shift_functor D (a + b))
  (e‚ÇÇ : shift_functor C b ‚ãô F ‚âÖ F ‚ãô shift_functor D b)
  [is_equivalence (shift_functor D b)] :
  shift_functor C a ‚ãô F ‚âÖ F ‚ãô shift_functor D a :=
begin
  let eq := as_equivalence (shift_functor D b),
  calc shift_functor C a ‚ãô F ‚âÖ _ ‚ãô ùü≠ D : (right_unitor _).symm
  ... ‚âÖ _ : iso_whisker_left _ eq.unit_iso
  ... ‚âÖ _ : functor.associator _ _ _
  ... ‚âÖ _ : iso_whisker_left _ (functor.associator _ _ _).symm
  ... ‚âÖ _ : iso_whisker_left _ (iso_whisker_right e‚ÇÇ.symm _)
  ... ‚âÖ _ : (functor.associator _ _ _).symm
  ... ‚âÖ _ : iso_whisker_right (functor.associator _ _ _).symm _
  ... ‚âÖ _ : iso_whisker_right (iso_whisker_right (shift_functor_add C a b).symm _) _
  ... ‚âÖ _ : iso_whisker_right e‚ÇÅ _
  ... ‚âÖ _ : functor.associator _ _ _
  ... ‚âÖ _ : iso_whisker_left _ (iso_whisker_right ((shift_functor_add D a b)) _)
  ... ‚âÖ _ : iso_whisker_left _ (functor.associator _ _ _)
  ... ‚âÖ _ : iso_whisker_left _ (iso_whisker_left _ eq.unit_iso.symm)
  ... ‚âÖ _ : (functor.associator _ _ _).symm
  ... ‚âÖ _ : right_unitor _
end

lemma comm_shift_iso_cancel_add' (a b : A)
  (e‚ÇÅ : shift_functor C a ‚ãô F ‚âÖ F ‚ãô shift_functor D a)
  (e‚ÇÇ : shift_functor C b ‚ãô F ‚âÖ F ‚ãô shift_functor D b)
  [is_equivalence (shift_functor D b)] :
  e‚ÇÅ = F.comm_shift_iso_cancel_add a b (F.comm_shift_iso_add a b e‚ÇÅ e‚ÇÇ) e‚ÇÇ :=
begin
  ext X,
  dsimp [comm_shift_iso_cancel_add, comm_shift_iso_add],
  simp only [assoc, id_comp, comp_id, functor.map_id,
    ‚Üê functor.map_comp],
  apply (shift_functor D b).map_injective,
  sorry,
end

namespace comm_shift_iso

variables {F} {A}

@[simp]
def add (e : comm_shift_iso F A) (a b : A) :
  shift_functor C (a + b) ‚ãô F ‚âÖ F ‚ãô shift_functor D (a + b) :=
comm_shift_iso_add F a b (e a) (e b)

end comm_shift_iso

variables (F A)

@[ext]
structure comm_shift :=
(iso : comm_shift_iso F A)
(iso_zero : iso 0 = comm_shift_iso‚ÇÄ F A)
(iso_add : ‚àÄ (a b : A), iso (a + b) = iso.add a b)

namespace comm_shift

variables {F A}

lemma iso_add_eq_of_iso_eq (e‚ÇÅ e‚ÇÇ : F.comm_shift A) (a b : A)
  (ha : e‚ÇÅ.iso a = e‚ÇÇ.iso a) (hb : e‚ÇÅ.iso b = e‚ÇÇ.iso b) :
  e‚ÇÅ.iso (a + b) = e‚ÇÇ.iso (a + b) :=
by simp only [e‚ÇÅ.iso_add, e‚ÇÇ.iso_add, comm_shift_iso.add, ha, hb]

lemma iso_eq_of_iso_add_eq (e‚ÇÅ e‚ÇÇ : F.comm_shift A) (a b : A)
  (hb : e‚ÇÅ.iso b = e‚ÇÇ.iso b) (hab : e‚ÇÅ.iso (a + b) = e‚ÇÇ.iso (a+b))
  [is_equivalence (shift_functor D b)] : e‚ÇÅ.iso a = e‚ÇÇ.iso a :=
begin
  rw F.comm_shift_iso_cancel_add' a b (e‚ÇÅ.iso a) (e‚ÇÅ.iso b),
  rw F.comm_shift_iso_cancel_add' a b (e‚ÇÇ.iso a) (e‚ÇÇ.iso b),
  congr' 1,
  change e‚ÇÅ.iso.add a b = e‚ÇÇ.iso.add a b,
  rw [‚Üê e‚ÇÅ.iso_add, ‚Üê e‚ÇÇ.iso_add, hab],
end

@[ext]
lemma iso_eq_of_iso_one_eq (e‚ÇÅ e‚ÇÇ : F.comm_shift ‚Ñ§)
  (h : e‚ÇÅ.iso (1 : ‚Ñ§) = e‚ÇÇ.iso (1 : ‚Ñ§)) : e‚ÇÅ = e‚ÇÇ :=
begin
  suffices : ‚àÄ (n : ‚Ñï), e‚ÇÅ.iso (n : ‚Ñ§) = e‚ÇÇ.iso (n : ‚Ñ§),
  { ext n : 2,
    cases n,
    { apply this, },
    { have eq : (-[1+n]+(1+n)) = 0,
      { simp only [int.neg_succ_of_nat_coe, nat.cast_add, nat.cast_one, neg_add_rev],
        linarith, },
      refine iso_eq_of_iso_add_eq e‚ÇÅ e‚ÇÇ (-[1+n]) (1+n) (this _) _,
      rw [eq, e‚ÇÅ.iso_zero, e‚ÇÇ.iso_zero], }, },
  intro n,
  induction n with n hn,
  { exact e‚ÇÅ.iso_zero.trans (e‚ÇÇ.iso_zero.symm), },
  { rw [nat.cast_succ, e‚ÇÅ.iso_add, e‚ÇÇ.iso_add, comm_shift_iso.add, comm_shift_iso.add, hn, h], },
end

end comm_shift

section

namespace comm_shift_iso

variable (e : shift_functor C (1 : ‚Ñ§) ‚ãô F ‚âÖ F ‚ãô shift_functor D (1 : ‚Ñ§))

noncomputable def ‚Ñï_mk : Œ† (n : ‚Ñï), shift_functor C (n : ‚Ñ§) ‚ãô F ‚âÖ F ‚ãô shift_functor D (n : ‚Ñ§)
| 0 := F.comm_shift_iso‚ÇÄ ‚Ñ§
| (n+1) := F.comm_shift_iso_add (n : ‚Ñ§) 1 (‚Ñï_mk n) e



end comm_shift_iso

end
--local attribute [instance] endofunctor_monoidal_category

--(comm_shift : shift_functor C (1 : ‚Ñ§) ‚ãô to_functor ‚âÖ to_functor ‚ãô shift_functor D (1 : ‚Ñ§)

end functor

end category_theory
