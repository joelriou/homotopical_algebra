import category_theory.quotient
import category_theory.limits.shapes.zero_morphisms
import category_theory.preadditive.additive_functor
import group_theory.subgroup.basic

namespace category_theory

open limits

namespace quotient

variables {C D : Type*} [category C] [category D] {r : hom_rel C}

lemma functor_map_surjective (X Y : C) :
  function.surjective (Œª (f : X ‚ü∂ Y), (functor r).map f) := surjective_quot_mk _

lemma nat_trans_ext {F G : quotient r ‚•§ D} (œÑ‚ÇÅ œÑ‚ÇÇ : F ‚ü∂ G)
  (h : ‚àÄ (X : C), œÑ‚ÇÅ.app ((functor r).obj X) = œÑ‚ÇÇ.app ((functor r).obj X)) : œÑ‚ÇÅ = œÑ‚ÇÇ :=
by { ext X, cases X, exact h X, }

def lift_nat_trans (F G : quotient r ‚•§ D) (œÑ : functor _ ‚ãô F ‚ü∂ functor _ ‚ãô G) :
  F ‚ü∂ G :=
{ app := by { rintro ‚ü®X‚ü©, exact œÑ.app X, },
  naturality' := by { rintros ‚ü®X‚ü© ‚ü®Y‚ü© ‚ü®f‚ü©, exact œÑ.naturality f, }, }

@[simp]
lemma lift_nat_trans_app (F G : quotient r ‚•§ D) (œÑ : functor _ ‚ãô F ‚ü∂ functor _ ‚ãô G) (X : C) :
  (lift_nat_trans F G œÑ).app ((functor r).obj X) = œÑ.app X := rfl

@[simp]
lemma lift_nat_trans_id (F : quotient r ‚•§ D) :
  lift_nat_trans F F (ùüô _) = ùüô _ :=
nat_trans_ext _ _ (Œª X, rfl)

@[simp, reassoc]
lemma lift_nat_trans_comp (F G H : quotient r ‚•§ D) (œÑ : functor _ ‚ãô F ‚ü∂ functor _ ‚ãô G)
  (œÑ' : functor _ ‚ãô G ‚ü∂ functor _ ‚ãô H) :
  lift_nat_trans F G œÑ ‚â´ lift_nat_trans G H œÑ' = lift_nat_trans F H (œÑ ‚â´ œÑ') :=
nat_trans_ext _ _ (Œª X, by simp)

@[simps]
def lift_nat_iso (F G : quotient r ‚•§ D) (e : functor _ ‚ãô F ‚âÖ functor _ ‚ãô G) :
  F ‚âÖ G :=
{ hom := lift_nat_trans _ _ e.hom,
  inv := lift_nat_trans _ _ e.inv, }

variable (r)

def lift_nat_trans' {F G : C ‚•§ D} (œÑ : F ‚ü∂ G)
  (hF : ‚àÄ (X Y : C) (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (h : r f‚ÇÅ f‚ÇÇ), F.map f‚ÇÅ = F.map f‚ÇÇ)
  (hG : ‚àÄ (X Y : C) (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (h : r f‚ÇÅ f‚ÇÇ), G.map f‚ÇÅ = G.map f‚ÇÇ) :
  lift r F hF ‚ü∂ lift r G hG :=
lift_nat_trans _ _
    ((quotient.lift.is_lift r F hF).hom ‚â´ œÑ ‚â´ (quotient.lift.is_lift r G hG).inv)

@[simp]
lemma lift_nat_trans'_app {F G : C ‚•§ D} (œÑ : F ‚ü∂ G)
  (hF : ‚àÄ (X Y : C) (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (h : r f‚ÇÅ f‚ÇÇ), F.map f‚ÇÅ = F.map f‚ÇÇ)
  (hG : ‚àÄ (X Y : C) (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (h : r f‚ÇÅ f‚ÇÇ), G.map f‚ÇÅ = G.map f‚ÇÇ) (X : C) :
  (lift_nat_trans' r œÑ hF hG).app ((functor r).obj X) = œÑ.app X :=
begin
  dsimp [lift_nat_trans'],
  simp,
end

@[simp]
lemma lift_nat_trans'_id (F : C ‚•§ D)
  (hF : ‚àÄ (X Y : C) (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (h : r f‚ÇÅ f‚ÇÇ), F.map f‚ÇÅ = F.map f‚ÇÇ) :
  lift_nat_trans' r (ùüô F) hF hF = ùüô _ :=
nat_trans_ext _ _ (Œª X, by { dsimp, simp, })

@[simp]
lemma lift_nat_trans'_comp {F G H : C ‚•§ D} (œÑ : F ‚ü∂ G) (œÑ' : G ‚ü∂ H)
  (hF : ‚àÄ (X Y : C) (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (h : r f‚ÇÅ f‚ÇÇ), F.map f‚ÇÅ = F.map f‚ÇÇ)
  (hG : ‚àÄ (X Y : C) (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (h : r f‚ÇÅ f‚ÇÇ), G.map f‚ÇÅ = G.map f‚ÇÇ)
  (hH : ‚àÄ (X Y : C) (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (h : r f‚ÇÅ f‚ÇÇ), H.map f‚ÇÅ = H.map f‚ÇÇ) :
  lift_nat_trans' r œÑ hF hG ‚â´ lift_nat_trans' r œÑ' hG hH =
    lift_nat_trans' r (œÑ ‚â´ œÑ') hF hH :=
nat_trans_ext _ _ (Œª X, by simp)

@[simps]
def lift_nat_iso' {F G : C ‚•§ D} (e : F ‚âÖ G)
  (hF : ‚àÄ (X Y : C) (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (h : r f‚ÇÅ f‚ÇÇ), F.map f‚ÇÅ = F.map f‚ÇÇ)
  (hG : ‚àÄ (X Y : C) (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (h : r f‚ÇÅ f‚ÇÇ), G.map f‚ÇÅ = G.map f‚ÇÇ) :
  lift r F hF ‚âÖ lift r G hG :=
{ hom := lift_nat_trans' r e.hom hF hG,
  inv := lift_nat_trans' r e.inv hG hF, }

lemma lift_map_eq (F : C ‚•§ D)
  (hF : ‚àÄ (X Y : C) (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (h : r f‚ÇÅ f‚ÇÇ), F.map f‚ÇÅ = F.map f‚ÇÇ)
  {X Y : C} (f : X ‚ü∂ Y) :
  (lift r F hF).map ((functor r).map f) = F.map f :=
by rw [functor_map, lift_map]

open_locale zero_object

lemma is_zero_of_is_zero {X : C} (hX : is_zero X) :
  is_zero ((functor r).obj X) :=
begin
  haveI : has_zero_object C := ‚ü®‚ü®_, hX‚ü©‚ü©,
  refine limits.is_zero.of_iso _ ((functor r).map_iso (is_zero.iso_zero hX)),
  split,
  { rintro ‚ü®Y‚ü©,
    haveI := (has_zero_object.unique_from Y),
    refine ‚ü®‚ü®‚ü®(functor r).map default‚ü©, _‚ü©‚ü©,
    intro f,
    obtain ‚ü®g, rfl‚ü© := functor_map_surjective _ _ f,
    rw subsingleton.elim g default, },
  { rintro ‚ü®Y‚ü©,
    haveI := (has_zero_object.unique_to Y),
    refine ‚ü®‚ü®‚ü®(functor r).map default‚ü©, _‚ü©‚ü©,
    intro f,
    obtain ‚ü®g, rfl‚ü© := functor_map_surjective _ _ f,
    rw subsingleton.elim g default, },
end

instance [has_zero_object C] : has_zero_object (quotient r) :=
‚ü®‚ü®_, is_zero_of_is_zero _ (is_zero_zero C)‚ü©‚ü©

section preadditive

variables [preadditive C] [congruence r]
  (add : ‚àÄ ‚¶ÉX Y : C‚¶Ñ ‚¶Éf‚ÇÅ g‚ÇÅ f‚ÇÇ g‚ÇÇ : X ‚ü∂ Y‚¶Ñ (h‚ÇÅ : r f‚ÇÅ g‚ÇÅ) (h‚ÇÇ : r f‚ÇÇ g‚ÇÇ), (r (f‚ÇÅ + f‚ÇÇ) (g‚ÇÅ + g‚ÇÇ)))
  (neg : ‚àÄ ‚¶ÉX Y : C‚¶Ñ ‚¶Éf g : X ‚ü∂ Y‚¶Ñ (h : r f g), r (-f) (-g))

lemma comp_closure_eq_self : comp_closure r = r :=
begin
  ext X Y f‚ÇÅ f‚ÇÇ,
  split,
  { intro h,
    simpa only [‚Üê functor_map_eq_iff r] using quot.sound h, },
  { exact comp_closure.of _ _ _, },
end

variable {r}

include add

def preadditive.add {X Y : quotient r} (œÜ œÜ' : X ‚ü∂ Y) : X ‚ü∂ Y :=
begin
  refine quot.lift‚ÇÇ (Œª x y, quot.mk _ (x+y)) _ _ œÜ œÜ',
  { intros x y‚ÇÅ y‚ÇÇ h,
    rw comp_closure_eq_self at h,
    change (functor r).map (x+y‚ÇÅ) = (functor r).map (x+y‚ÇÇ),
    rw functor_map_eq_iff,
    exact add (refl _) h, },
  { intros x‚ÇÅ x‚ÇÇ y h,
    rw comp_closure_eq_self at h,
    change (functor r).map (x‚ÇÅ+y) = (functor r).map (x‚ÇÇ+y),
    rw functor_map_eq_iff,
    exact add h (refl _), },
end

omit add

include neg

def preadditive.neg {X Y : quotient r} (œÜ : X ‚ü∂ Y) : X ‚ü∂ Y :=
begin
  refine quot.lift (Œª x, quot.mk _ (-x)) _ œÜ,
  intros x y h,
  rw comp_closure_eq_self at h,
  change (functor r).map (-x) = (functor r).map (-y),
  rw functor_map_eq_iff,
  exact neg h,
end

include add
variable (r)

def preadditive.hom_group (X Y : quotient r) : add_comm_group (X ‚ü∂ Y) :=
{ add := preadditive.add add,
  add_assoc := by { rintros ‚ü®x‚ü© ‚ü®y‚ü© ‚ü®z‚ü©, exact (functor r).congr_map (add_assoc x y z), },
  zero := (functor r).map 0,
  zero_add := by { rintro ‚ü®x‚ü©, exact (functor r).congr_map (zero_add x), },
  add_zero := by { rintro ‚ü®x‚ü©, exact (functor r).congr_map (add_zero x), },
  neg := preadditive.neg neg,
  add_left_neg := by { rintro ‚ü®x‚ü©, exact (functor r).congr_map (add_left_neg x), },
  add_comm := by { rintros ‚ü®x‚ü© ‚ü®y‚ü©, exact (functor r).congr_map (add_comm x y), }, }

@[protected]
def preadditive :
  preadditive (quotient r) :=
{ hom_group := preadditive.hom_group r add neg,
  add_comp' := Œª X Y Z, begin
    rintros ‚ü®x‚ÇÅ‚ü© ‚ü®x‚ÇÇ‚ü© ‚ü®y‚ü©,
    exact (functor r).congr_map (preadditive.add_comp _ _ _ x‚ÇÅ x‚ÇÇ y),
  end,
  comp_add' := Œª X Y Z, begin
    rintros ‚ü®x‚ü© ‚ü®y‚ÇÅ‚ü© ‚ü®y‚ÇÇ‚ü©,
    exact (functor r).congr_map (preadditive.comp_add _ _ _ x y‚ÇÅ y‚ÇÇ),
  end, }

lemma functor_additive :
  @functor.additive C (quotient r) _ _ _ (quotient.preadditive r add neg) (functor r) := { }

omit add neg

lemma lift_additive {D : Type*} [category D] [preadditive D] [preadditive (quotient r)]
  [(functor r).additive] (F : C ‚•§ D) [F.additive]
  (H : ‚àÄ (x y : C) (f‚ÇÅ f‚ÇÇ : x ‚ü∂ y), r f‚ÇÅ f‚ÇÇ ‚Üí F.map f‚ÇÅ = F.map f‚ÇÇ) :
  (lift r F H).additive :=
‚ü®begin
  rintro ‚ü®X‚ü© ‚ü®Y‚ü© ‚ü®f‚ÇÅ : X ‚ü∂ Y‚ü© ‚ü®f‚ÇÇ : X ‚ü∂ Y‚ü©,
  change (lift r F H).map ((functor r).map f‚ÇÅ + (functor r).map f‚ÇÇ) = F.map f‚ÇÅ + F.map f‚ÇÇ,
  simpa only [‚Üê functor.map_add],
end‚ü©

end preadditive

end quotient

end category_theory
