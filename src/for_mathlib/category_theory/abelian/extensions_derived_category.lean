import for_mathlib.category_theory.abelian.extensions
import for_mathlib.algebra.homology.double

noncomputable theory

open category_theory category_theory.limits category_theory.category derived_category

namespace homological_complex

variables {C Œπ : Type*} [category C] [has_zero_morphisms C] [has_zero_object C]
  (c : complex_shape Œπ) (n : Œπ) [decidable_eq Œπ]

end homological_complex

variables {C : Type*} [category C] [abelian C]

@[simps]
def category_theory.short_complex.short_exact.extension
  {S : short_complex C} (ex : S.short_exact) :
  category_theory.abelian.extension S.X‚ÇÉ S.X‚ÇÅ :=
{ X := S.X‚ÇÇ,
  i := S.f,
  p := S.g,
  w := S.zero,
  ex := begin
    refine (short_complex.short_exact.iff_of_iso _).1 ex,
    exact (short_complex.mk_iso (iso.refl _) (iso.refl _) (iso.refl _) (by tidy) (by tidy)),
  end, }

instance category_theory.preadditive.is_iso_neg {C : Type*} [category C] [preadditive C]
  {X Y : C} (f : X ‚ü∂ Y) [is_iso f] : is_iso (-f) :=
by simpa only [iso.trans_hom, preadditive.mul_iso_hom, units.coe_neg_one, iso.refl_hom,
  neg_smul, one_zsmul, as_iso_hom, preadditive.neg_comp, id_comp]
  using is_iso.of_iso ((preadditive.mul_iso (-1 : units ‚Ñ§) (iso.refl X)).trans (as_iso f))

@[simp]
lemma category_theory.preadditive.neg_inv {C : Type*} [category C] [preadditive C]
  {X Y : C} (f : X ‚ü∂ Y) [is_iso f] : inv (-f) = - inv f :=
by rw [‚Üê cancel_mono (-f), is_iso.inv_hom_id, preadditive.neg_comp,
  preadditive.comp_neg, neg_neg, is_iso.inv_hom_id]

open category_theory category_theory.limits category_theory.category derived_category

namespace category_theory.abelian

namespace extension

variables {A B : C} (e : extension A B)

def œÉ := cochain_complex.double.œÉ (neg_add_self 1) e.w
def Œπ := cochain_complex.double.Œπ (neg_add_self 1) e.p
def œÉ' := cochain_complex.double.œÉ' (neg_add_self 1) e.w
def œÄ := cochain_complex.double.œÄ (neg_add_self 1) e.i

def homotopy_œÄœÉ'_œÉŒπ : homotopy (e.œÄ ‚â´ e.œÉ') (-e.œÉ ‚â´ e.Œπ)  :=
cochain_complex.double.homotopy_œÄœÉ'_œÉŒπ (neg_add_self 1) e.w

instance : quasi_iso e.œÉ :=
cochain_complex.double.quasi_iso_œÉ (neg_add_self 1) e.w e.ex

instance : quasi_iso e.œÉ' :=
cochain_complex.double.quasi_iso_œÉ' (neg_add_self 1) e.w e.ex

def Œ¥' : (single_functor C 0).obj A ‚ü∂ (single_functor C (-1)).obj B :=
-inv (Q.map e.œÉ) ‚â´ Q.map e.œÄ

lemma Œ¥'_eq : e.Œ¥' = -inv (Q.map e.œÉ) ‚â´ Q.map e.œÄ := rfl

lemma Œ¥'_eq' : e.Œ¥' = Q.map e.Œπ ‚â´ inv (Q.map e.œÉ') :=
by simp only [Œ¥', ‚Üê cancel_epi (Q.map e.œÉ), ‚Üê cancel_mono (Q.map e.œÉ'), assoc,
  is_iso.hom_inv_id_assoc, preadditive.comp_neg, preadditive.neg_comp, is_iso.inv_hom_id,
  comp_id, ‚Üê Q.map_comp, derived_category.Q_map_eq_of_homotopy _ _ e.homotopy_œÄœÉ'_œÉŒπ,
  functor.map_neg, neg_neg]

lemma Œ¥_eq'' : e.Œ¥' = (short_complex.short_exact.extension e.ex).Œ¥' := rfl

def Œ¥ : (single_functor C 0).obj A ‚ü∂ ((single_functor C 0).obj B)‚ü¶(1 : ‚Ñ§)‚üß :=
e.Œ¥' ‚â´ (single_functor_shift_iso C 0 1 (-1) (neg_add_self 1)).inv.app B

def triangle : pretriangulated.triangle (derived_category C) :=
pretriangulated.triangle.mk ((single_functor C 0).map e.i) ((single_functor C 0).map e.p) e.Œ¥

@[simps]
def single_short_complex : short_complex (cochain_complex C ‚Ñ§) :=
short_complex.mk ((homological_complex.single C _ 0).map e.i)
  ((homological_complex.single C _ 0).map e.p)
  (by rw [‚Üê functor.map_comp, e.w, functor.map_zero])

lemma single_short_complex_short_exact : e.single_short_complex.short_exact :=
short_complex.short_exact.map_of_exact e.ex (homological_complex.single C (complex_shape.up ‚Ñ§) 0)

def iso_mapping_cone := cochain_complex.double_iso_mapping_cone e.i

lemma compatibility_mapping_cone_œÉ : e.œÉ = (cochain_complex.double_iso_mapping_cone e.i).hom ‚â´
  cochain_complex.from_mapping_cone_of_ses e.single_short_complex_short_exact :=
begin
  refine cochain_complex.from_double_ext (neg_add_self 1) _ _ _ _,
  { dsimp,
    simp only [œÉ, cochain_complex.from_mapping_cone_of_ses, single_short_complex_g,
      cochain_complex.double.œÉ_f‚ÇÅ, id_comp, cochain_complex.double.desc.f‚ÇÅ, assoc,
      zero_eq_neg, preadditive.is_iso.comp_left_eq_zero],
    erw [cochain_complex.mapping_cone.inl_desc_v, cochain_complex.hom_complex.cochain.zero_v,
      comp_zero], },
  { dsimp,
    simp only [œÉ, cochain_complex.from_mapping_cone_of_ses, single_short_complex_g,
      cochain_complex.double.œÉ_f‚ÇÇ, homological_complex.single_obj_X_self_inv,
      eq_to_hom_refl, comp_id, id_comp, cochain_complex.double.desc.f‚ÇÇ, assoc],
    erw [cochain_complex.mapping_cone.inr_desc_f],
    dsimp,
    simp only [eq_self_iff_true, comp_id, id_comp, if_true], },
end

open cochain_complex.hom_complex

lemma compatibility_mapping_cone_œÄ :
  e.œÄ = -(cochain_complex.double_iso_mapping_cone e.i).hom ‚â´
  cochain_complex.mapping_cone.Œ¥ ((homological_complex.single C _ 0).map e.i) ‚â´
  (cochain_complex.single_shift_iso C 0 1 (-1) (neg_add_self 1).symm).hom.app B :=
begin
  refine cochain_complex.to_single_ext _ _ (-1) _,
  simp only [œÄ, cochain_complex.mapping_cone.Œ¥, cochain_complex.double.œÄ_f, eq_to_hom_refl,
    cochain_complex.double.desc.f‚ÇÅ, comp_id, homological_complex.single_obj_X_self_inv,
    id_comp, cochain_complex.double_iso_mapping_cone_hom, homological_complex.neg_f_apply,
    homological_complex.comp_f, cochain_complex.double.desc_f,
    cochain_complex.hom_complex.cocycle.hom_of_f,
    cochain_complex.hom_complex.cocycle.right_shift_coe,
    cochain_complex.mapping_cone.Œ¥_as_cocycle_coe, assoc,
    cochain_complex.hom_complex.cochain.right_shift_v _ 1 0
      (zero_add 1).symm (-1) (-1) (by linarith) 0 (neg_add_self 1).symm, cochain.neg_v,
    preadditive.neg_comp, preadditive.comp_neg, neg_neg],
  erw cochain_complex.mapping_cone.inl_fst_assoc,
  dsimp [cochain_complex.double.X_iso‚ÇÅ, homological_complex.X_iso_of_eq, iso.refl,
    cochain_complex.single_shift_iso, cochain_complex.single_shift_iso_app],
  simp only [cochain_complex.lift_single_f, id_comp],
  erw [id_comp, id_comp],
  refl,
end

lemma Œ¥_eq_triangle_of_ses_Œ¥ :
  e.Œ¥ = triangle_of_ses_Œ¥ e.single_short_complex_short_exact :=
begin
  dsimp [triangle_of_ses_Œ¥, Œ¥, Œ¥', mapping_cone_triangle],
  simp only [‚Üê cancel_epi (Q.map (cochain_complex.from_mapping_cone_of_ses
    e.single_short_complex_short_exact)), is_iso.hom_inv_id_assoc,
    ‚Üê Q.map (cochain_complex.double_iso_mapping_cone e.i).hom,
    preadditive.neg_comp, preadditive.comp_neg,
    e.compatibility_mapping_cone_œÉ, functor.map_neg, Q.map_comp, preadditive.neg_inv,
    is_iso.inv_comp, neg_neg, assoc,
    ‚Üê cancel_epi (Q.map (cochain_complex.double_iso_mapping_cone e.i).hom), mapping_cone_Œ¥,
    ‚Üê cancel_mono ((comm_shift_Q C 1).inv.app ((homological_complex.single C _ 0).obj B)),
    iso.hom_inv_id_app, single_functor_shift_iso_inv_app, compatibility_mapping_cone_œÄ],
    erw [‚Üê Q.map_comp, iso.hom_inv_id_app, Q.map_id],
    refl,
end

lemma triangle_iso : e.triangle ‚âÖ triangle_of_ses e.single_short_complex_short_exact :=
pretriangulated.triangle.mk_iso _ _ (iso.refl _) (iso.refl _) (iso.refl _) (by tidy) (by tidy)
  (by { dsimp [triangle], simp only [category_theory.functor.map_id, comp_id,
    id_comp, Œ¥_eq_triangle_of_ses_Œ¥], })

lemma triangle_distinguished : e.triangle ‚àà dist_triang (derived_category C) :=
pretriangulated.isomorphic_distinguished _ (triangle_of_ses_dist _) _ e.triangle_iso

lemma iso_of_triangle_map (e‚ÇÅ e‚ÇÇ : extension A B)
  (œÜ : e‚ÇÅ.triangle ‚ü∂ e‚ÇÇ.triangle) (hœÜ‚ÇÅ : œÜ.hom‚ÇÅ = ùüô _) (hœÜ‚ÇÉ : œÜ.hom‚ÇÉ = ùüô _) : e‚ÇÅ ‚âÖ e‚ÇÇ :=
as_iso begin
  have eq‚ÇÅ := œÜ.comm‚ÇÅ,
  have eq‚ÇÇ := œÜ.comm‚ÇÇ,
  dsimp only [triangle] at eq‚ÇÅ eq‚ÇÇ,
  simp only [pretriangulated.triangle.mk_mor‚ÇÅ, hœÜ‚ÇÅ] at eq‚ÇÅ,
  erw id_comp at eq‚ÇÅ,
  simp only [pretriangulated.triangle.mk_mor‚ÇÇ, hœÜ‚ÇÉ] at eq‚ÇÇ,
  erw comp_id at eq‚ÇÇ,
  refine extension.hom.mk' ((single_functor C 0).preimage œÜ.hom‚ÇÇ) _ _,
  { apply (single_functor C 0).map_injective,
    rw [functor.map_comp, functor.image_preimage, eq‚ÇÅ], },
  { apply (single_functor C 0).map_injective,
    rw [functor.map_comp, functor.image_preimage, eq‚ÇÇ], },
end

section naturality

variables {S‚ÇÅ S‚ÇÇ : short_complex C} (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ)
  (ex‚ÇÅ : S‚ÇÅ.short_exact) (ex‚ÇÇ : S‚ÇÇ.short_exact)

include œÜ ex‚ÇÅ ex‚ÇÇ

@[reassoc]
lemma œÉ_naturality :
  ex‚ÇÅ.extension.œÉ ‚â´ (homological_complex.single C _ 0).map œÜ.œÑ‚ÇÉ =
    cochain_complex.double.map (neg_add_self 1) S‚ÇÅ.f S‚ÇÇ.f œÜ.œÑ‚ÇÅ œÜ.œÑ‚ÇÇ œÜ.comm‚ÇÅ‚ÇÇ.symm ‚â´
      ex‚ÇÇ.extension.œÉ :=
begin
  refine cochain_complex.to_single_ext _ _ 0 _,
  { dsimp only [short_complex.short_exact.extension, extension.œÉ],
    simp only [homological_complex.comp_f, cochain_complex.double.œÉ_f‚ÇÇ,
      homological_complex.single_obj_X_self_inv, eq_to_hom_refl,
      comp_id, homological_complex.single_map_f_self, homological_complex.single_obj_X_self_hom,
      assoc, cochain_complex.double.map_f‚ÇÇ, iso.inv_hom_id_assoc, iso.cancel_iso_hom_left,
      œÜ.comm‚ÇÇ‚ÇÉ],
    erw id_comp, },
end

@[reassoc]
lemma œÄ_naturality :
  ex‚ÇÅ.extension.œÄ ‚â´ (homological_complex.single C _ (-1 : ‚Ñ§)).map œÜ.œÑ‚ÇÅ =
    cochain_complex.double.map (neg_add_self 1) S‚ÇÅ.f S‚ÇÇ.f œÜ.œÑ‚ÇÅ œÜ.œÑ‚ÇÇ œÜ.comm‚ÇÅ‚ÇÇ.symm ‚â´
    ex‚ÇÇ.extension.œÄ :=
begin
  refine cochain_complex.to_single_ext _ _ (-1) _,
  { dsimp only [short_complex.short_exact.extension, extension.œÄ],
    simp only [homological_complex.comp_f, cochain_complex.double.œÄ_f, eq_to_hom_refl,
      cochain_complex.double.desc.f‚ÇÅ, comp_id, homological_complex.single_map_f_self,
      homological_complex.single_obj_X_self_hom, homological_complex.single_obj_X_self_inv,
      cochain_complex.double.map_f‚ÇÅ, assoc, iso.inv_hom_id, iso.cancel_iso_hom_left],
    apply id_comp, },
end

@[reassoc]
lemma Œ¥'_naturality :
  ex‚ÇÅ.extension.Œ¥' ‚â´ (single_functor C (-1)).map œÜ.œÑ‚ÇÅ =
    (single_functor C 0).map œÜ.œÑ‚ÇÉ ‚â´ ex‚ÇÇ.extension.Œ¥' :=
begin
  dsimp only [extension.Œ¥', single_functor, functor.comp_map],
  have hœÉ := Q.congr_map (œÉ_naturality œÜ ex‚ÇÅ ex‚ÇÇ),
  have hœÄ := Q.congr_map (œÄ_naturality œÜ ex‚ÇÅ ex‚ÇÇ),
  simp only [Q.map_comp, ‚Üê cancel_mono (inv (Q.map ex‚ÇÇ.extension.œÉ)), assoc,
    is_iso.hom_inv_id, comp_id] at hœÉ,
  simp only [Q.map_comp] at hœÄ,
  simp only [‚Üê cancel_epi (Q.map ex‚ÇÅ.extension.œÉ), assoc, is_iso.hom_inv_id_assoc,
    hœÄ, ‚Üê hœÉ, preadditive.comp_neg, preadditive.neg_comp],
end

@[reassoc]
lemma Œ¥_naturality :
  ex‚ÇÅ.extension.Œ¥ ‚â´ ((single_functor C 0).map œÜ.œÑ‚ÇÅ)‚ü¶1‚üß' =
    (single_functor C 0).map œÜ.œÑ‚ÇÉ ‚â´ ex‚ÇÇ.extension.Œ¥ :=
begin
  dsimp only [extension.triangle, pretriangulated.triangle.mk, extension.Œ¥],
  simpa only [‚Üê Œ¥'_naturality_assoc œÜ ex‚ÇÅ ex‚ÇÇ, assoc, nat_trans.naturality],
end

@[simps]
def triangle_map : ex‚ÇÅ.extension.triangle ‚ü∂ ex‚ÇÇ.extension.triangle :=
{ hom‚ÇÅ := (single_functor C 0).map œÜ.œÑ‚ÇÅ,
  hom‚ÇÇ := (single_functor C 0).map œÜ.œÑ‚ÇÇ,
  hom‚ÇÉ := (single_functor C 0).map œÜ.œÑ‚ÇÉ,
  comm‚ÇÅ' := by simpa only [functor.map_comp] using (single_functor C 0).congr_map œÜ.comm‚ÇÅ‚ÇÇ.symm,
  comm‚ÇÇ' := by simpa only [functor.map_comp] using (single_functor C 0).congr_map œÜ.comm‚ÇÇ‚ÇÉ.symm,
  comm‚ÇÉ' := Œ¥_naturality œÜ ex‚ÇÅ ex‚ÇÇ, }

end naturality

end extension

namespace extensions

variables {A B : C} (e : extension A B)

def Œ¥ : extensions A B ‚Üí ((single_functor C 0).obj A ‚ü∂
  ((single_functor C 0).obj B)‚ü¶(1 : ‚Ñ§)‚üß) :=
quot.lift extension.Œ¥ begin
  rintros E‚ÇÅ E‚ÇÇ ‚ü®e‚ü©,
  have eq := extension.Œ¥_naturality
    ((extension.to_short_exact_sequence_functor A B).map e.hom) E‚ÇÅ.ex E‚ÇÇ.ex,
  dsimp at eq,
  simpa only [category_theory.functor.map_id, id_comp, comp_id] using eq,
end

variable (C)

@[simps]
def Œ¥_nat_trans : extensions_functor C ‚ü∂
  ((single_functor C 0).op ‚ãô (single_functor C 0 ‚ãô shift_functor _ (1 : ‚Ñ§) ‚ãô yoneda).flip).flip :=
{ app := Œª B,
  { app := Œª A, extensions.Œ¥,
    naturality' := Œª A‚ÇÅ A‚ÇÇ œÄ, begin
      ext e,
      obtain ‚ü®E, rfl‚ü© := quotient.surjective_quotient_mk' e,
      have eq := extension.Œ¥_naturality (E.pull_short_complex œÄ.unop)
        ((E.pull œÄ.unop).ex) E.ex,
      dsimp at eq,
      simpa only [category_theory.functor.map_id, comp_id] using eq,
    end, },
  naturality' := begin
    rintro B‚ÇÅ B‚ÇÇ Œπ,
    ext A e,
    obtain ‚ü®E, rfl‚ü© := quotient.surjective_quotient_mk' e,
    have eq := extension.Œ¥_naturality (E.push_short_complex Œπ) E.ex (E.push Œπ).ex,
    dsimp at eq,
    simpa only [category_theory.functor.map_id, id_comp] using eq.symm,
  end, }

variables {C}

lemma Œ¥_nat_trans_surjective'
  (œÜ : (single_functor C 0).obj A ‚ü∂ ((single_functor C 0).obj B)‚ü¶(1 : ‚Ñ§)‚üß) :
  ‚àÉ (e : extension A B), œÜ = e.Œ¥ :=
begin
  obtain ‚ü®œÜ, rfl‚ü© : ‚àÉ (œÜ' : (single_functor C 0).obj A ‚ü∂ (single_functor C (-1)).obj B),
    œÜ = œÜ' ‚â´ (single_functor_shift_iso C 0 1 (-1) (neg_add_self 1)).inv.app B,
  { refine ‚ü®œÜ ‚â´ (single_functor_shift_iso C 0 1 (-1) (neg_add_self 1)).hom.app B, _‚ü©,
    simp only [assoc, iso.hom_inv_id_app],
    erw comp_id, },
  suffices : ‚àÉ (E' A' : C) (f' : A ‚ü∂ A') (i' : B ‚ü∂ E') (p' : E' ‚ü∂ A') (w : i' ‚â´ p' = 0)
    (ex : (short_complex.mk _ _ w).short_exact),
      œÜ ‚â´ Q.map ex.extension.œÉ' = (single_functor C 0).map f' ‚â´ Q.map ex.extension.Œπ,
  { obtain ‚ü®E', A', f', i', p', w, ex, z‚ü© := this,
    refine ‚ü®ex.extension.pull f', _‚ü©,
    have eq := extension.Œ¥_naturality (ex.extension.pull_short_complex f')
      (ex.extension.pull f').ex ex.extension.ex,
    simp only [extension.pull_short_complex, category_theory.functor.map_id, comp_id] at eq,
    refine trans _ eq.symm,
    dsimp only [extension.Œ¥],
    rw ‚Üê assoc,
    congr' 1,
    erw [extension.Œ¥'_eq', ‚Üê cancel_mono (Q.map ex.extension.œÉ'), assoc, assoc, is_iso.inv_hom_id,
      comp_id],
    exact z, },
  haveI : cochain_complex.is_strictly_le ((homological_complex.single C
    (complex_shape.up ‚Ñ§) (-1)).obj B) 0 :=
      cochain_complex.is_strictly_le_of_le _ (-1) 0 (by linarith),
  obtain ‚ü®E', A', p', f, s, hs, eq‚ü© : ‚àÉ (B' E' : C) (i' : B' ‚ü∂ E')
   (f : (homological_complex.single C _ 0).obj A ‚ü∂ cochain_complex.double (neg_add_self 1) i')
   (s : (homological_complex.single C _ (-1)).obj B ‚ü∂ cochain_complex.double (neg_add_self 1) i')
   (hs : quasi_iso s), by { haveI := hs, exact œÜ = Q.map f ‚â´ inv (Q.map s), },
  { obtain ‚ü®L', L'_le, L'_ge, f, s, hs, hœÜ‚ü© :=
      left_factorisation_of_is_strictly_le_of_is_strictly_ge œÜ 0 (-1),
    haveI := L'_le,
    obtain ‚ü®E', A', p', ‚ü®e‚ü©‚ü© := cochain_complex.exists_iso_double (neg_add_self 1) L',
    refine ‚ü®E', A', p', f ‚â´ e.hom, s ‚â´ e.hom, infer_instance, _‚ü©,
    simp only [hœÜ, Q.map_comp, is_iso.inv_comp, assoc, is_iso.hom_inv_id_assoc], },
  obtain ‚ü®f', rfl‚ü© := cochain_complex.eq_single_to_double' f,
  obtain ‚ü®i', w, hs'‚ü© := cochain_complex.eq_single_to_double s,
  refine ‚ü®E', A', f', i', p', w, _, _‚ü©,
  { simpa only [hs', cochain_complex.single_to_double_quasi_iso_iff] using hs, },
  { dsimp only [single_functor, functor.comp_map],
    rw ‚Üê Q.map_comp,
    haveI := hs,
    simp only [‚Üê cancel_mono (Q.map s), assoc, is_iso.inv_hom_id, comp_id, hs'] at eq,
    convert eq,
    refine cochain_complex.from_single_ext _ _ 0 _,
    dsimp [short_complex.short_exact.extension, extension.Œπ],
    simp only [eq_self_iff_true, comp_id, id_comp, if_true, cochain_complex.double.lift.f‚ÇÇ,
      cochain_complex.desc_single_f],
    erw id_comp, },
end

lemma _root_.category_theory.abelian.extension.Œ¥_eq_iff (e‚ÇÅ e‚ÇÇ : extension A B) :
  (e‚ÇÅ.Œ¥ = e‚ÇÇ.Œ¥) ‚Üî nonempty (e‚ÇÅ ‚âÖ e‚ÇÇ) :=
begin
  split,
  { intro h,
    obtain ‚ü®Œ≤, hŒ≤‚ÇÅ, hŒ≤‚ÇÇ‚ü© := pretriangulated.complete_distinguished_triangle_morphism‚ÇÇ _ _
      e‚ÇÅ.triangle_distinguished e‚ÇÇ.triangle_distinguished (ùüô _) (ùüô _)
      (by simpa only [category_theory.functor.map_id, comp_id, id_comp] using h),
    let Œ≥ : e‚ÇÅ.triangle ‚ü∂ e‚ÇÇ.triangle :=
    { hom‚ÇÅ := ùüô _,
      hom‚ÇÇ := Œ≤,
      hom‚ÇÉ := ùüô _, },
    exact ‚ü®extension.iso_of_triangle_map e‚ÇÅ e‚ÇÇ Œ≥ rfl rfl‚ü©, },
  { rintro ‚ü®h‚ü©,
    change extensions.Œ¥ (quot.mk _ e‚ÇÅ) = extensions.Œ¥ (quot.mk _ e‚ÇÇ),
    congr' 1,
    exact quot.sound ‚ü®h‚ü©, },
end

variables (A B)

lemma Œ¥_nat_trans_bijective :
  function.bijective (@extensions.Œ¥ _ _ _ A B) :=
begin
  split,
  { rintros ‚ü®e‚ÇÅ‚ü© ‚ü®e‚ÇÇ‚ü© (h : e‚ÇÅ.Œ¥ = e‚ÇÇ.Œ¥),
    rw extension.Œ¥_eq_iff at h,
    exact quot.sound h, },
  { intro œÜ,
    obtain ‚ü®e, rfl‚ü© := Œ¥_nat_trans_surjective' œÜ,
    exact ‚ü®quotient.mk' e, rfl‚ü©, },
end

instance : is_iso (Œ¥_nat_trans C) :=
begin
  haveI : ‚àÄ (A : C), is_iso ((Œ¥_nat_trans C).app A),
  { intro A,
    haveI : ‚àÄ (B : C·µí·µñ), is_iso (((Œ¥_nat_trans C).app A).app B),
    { intro B,
      rw is_iso_iff_bijective,
      apply Œ¥_nat_trans_bijective, },
    apply nat_iso.is_iso_of_is_iso_app, },
  apply nat_iso.is_iso_of_is_iso_app,
end

variable (C)

@[simps]
def Œ¥_nat_iso := as_iso (Œ¥_nat_trans C)

end extensions

namespace extension

variables (A B : C)

@[simp]
lemma trivial.Œ¥ : (trivial A B).Œ¥ = 0 :=
begin
  haveI : is_split_epi (abelian.extension.trivial A B).triangle.mor‚ÇÇ := is_split_epi.mk'
  { section_ := Q.map ((homological_complex.single _ _ _).map biprod.inr),
    id' := begin
      erw [‚Üê functor.map_comp, ‚Üê functor.map_comp, biprod.inr_snd,
        category_theory.functor.map_id, category_theory.functor.map_id],
      refl,
    end, },
  simpa only [‚Üê cancel_epi (abelian.extension.trivial A B).triangle.mor‚ÇÇ, comp_zero]
    using pretriangulated.triangle.comp_zero‚ÇÇ‚ÇÉ _ (trivial A B).triangle_distinguished,
end


variables {A B}

lemma Œ¥_eq_zero_iff (e : extension A B) : e.Œ¥ = 0 ‚Üî nonempty (e ‚âÖ trivial A B) :=
by simp only [‚Üê extension.Œ¥_eq_iff, trivial.Œ¥]

lemma Œ¥_neq_zero_iff (e : extension A B) : e.Œ¥ ‚â† 0 ‚Üî is_empty (e ‚âÖ trivial A B) :=
by simpa only [not_nonempty_iff] using e.Œ¥_eq_zero_iff.not

end extension

end category_theory.abelian
