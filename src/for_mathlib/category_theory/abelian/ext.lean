import for_mathlib.category_theory.triangulated.hom_homological
import for_mathlib.algebra.homology.trunc

noncomputable theory

namespace category_theory

open derived_category category limits

variables {C : Type*} [category C] [abelian C]

def Ext (n : ‚Ñï) (X Y : C) :=
((single_functor C 0).obj X ‚ü∂ ((single_functor C 0).obj Y)‚ü¶(n : ‚Ñ§)‚üß)

def Ext_functor (n : ‚Ñï) : C·µí·µñ ‚•§ C ‚•§ AddCommGroup :=
(single_functor C 0).op ‚ãô preadditive_coyoneda ‚ãô
  (whiskering_left _ _ AddCommGroup).obj (single_functor C 0 ‚ãô shift_functor _ (n : ‚Ñ§))

instance (n : ‚Ñï) (X Y : C) : add_comm_group (Ext n X Y) :=
by { dsimp only [Ext], apply_instance, }

def Ext_map‚ÇÅ (n : ‚Ñï) {X X' : C} (f : X' ‚ü∂ X) (Y : C) :
  Ext n X Y ‚Üí+ Ext n X' Y :=
{ to_fun := Œª e, ((single_functor C 0).map f) ‚â´ e,
  map_zero' := by simp,
  map_add' := by simp, }

def Ext_map‚ÇÇ (n : ‚Ñï) (X : C) {Y Y' : C} (g : Y ‚ü∂ Y') :
  Ext n X Y ‚Üí+ Ext n X Y' :=
{ to_fun := Œª e, e ‚â´ ((single_functor C 0).map g)‚ü¶(n : ‚Ñ§)‚üß',
  map_zero' := by simp,
  map_add' := by simp, }

lemma Ext_map‚ÇÅ‚ÇÇ_comm (n : ‚Ñï) {X X' Y Y' : C} (f : X' ‚ü∂ X) (g : Y ‚ü∂ Y') :
  (Ext_map‚ÇÇ n X' g).comp (Ext_map‚ÇÅ n f Y) = (Ext_map‚ÇÅ n f Y').comp (Ext_map‚ÇÇ n X g) :=
begin
  ext x,
  dsimp [Ext_map‚ÇÇ, Ext_map‚ÇÅ],
  rw assoc,
end

@[simp]
lemma Ext_map‚ÇÅ_id (n : ‚Ñï) (X Y : C) :
  Ext_map‚ÇÅ n (ùüô X) Y = add_monoid_hom.id _ :=
begin
  ext x,
  dsimp [Ext_map‚ÇÅ],
  simp only [functor.map_id, id_comp],
end

@[simp]
lemma Ext_map‚ÇÅ_zero (n : ‚Ñï) (X X' Y : C) :
  Ext_map‚ÇÅ n (0 : X ‚ü∂ X') Y = 0 :=
begin
  ext x,
  dsimp [Ext_map‚ÇÅ],
  simp only [functor.map_zero, zero_comp],
end

@[simp]
lemma Ext_map‚ÇÅ_comp (n : ‚Ñï) {X X' X'' : C} (f : X ‚ü∂ X') (f' : X' ‚ü∂ X'') (Y : C) :
  Ext_map‚ÇÅ n (f ‚â´ f') Y = (Ext_map‚ÇÅ n f Y).comp (Ext_map‚ÇÅ n f' Y) :=
begin
  ext x,
  dsimp [Ext_map‚ÇÅ],
  simp only [functor.map_comp, assoc],
end

@[simp]
lemma Ext_map‚ÇÇ_id (n : ‚Ñï) (X Y : C) :
  Ext_map‚ÇÇ n X (ùüô Y) = add_monoid_hom.id _ :=
begin
  ext x,
  dsimp [Ext_map‚ÇÇ],
  simp only [functor.map_id, comp_id],
end

@[simp]
lemma Ext_map‚ÇÇ_zero (n : ‚Ñï) (X Y Y' : C) :
  Ext_map‚ÇÇ n X (0 : Y ‚ü∂ Y') = 0 :=
begin
  ext x,
  dsimp [Ext_map‚ÇÇ],
  simp only [functor.map_zero, comp_zero],
end

@[simp]
lemma Ext_map‚ÇÇ_comp (n : ‚Ñï) (X : C) {Y Y' Y'' : C} (g : Y ‚ü∂ Y') (g' : Y' ‚ü∂ Y'') :
  Ext_map‚ÇÇ n X (g ‚â´ g') = (Ext_map‚ÇÇ n X g').comp (Ext_map‚ÇÇ n X g) :=
begin
  ext x,
  dsimp [Ext_map‚ÇÇ],
  simp only [functor.map_comp, assoc],
end

namespace short_complex

namespace short_exact

variables {S : short_complex C} (ex : S.short_exact)

include ex

def triangle : pretriangulated.triangle (derived_category C) :=
triangle_of_ses
  (short_complex.short_exact.map_of_exact ex
  (homological_complex.single C (complex_shape.up ‚Ñ§) 0))

lemma triangle_dist : ex.triangle ‚àà dist_triang (derived_category C) :=
triangle_of_ses_dist _

def Ext_Œ¥‚ÇÇ (X : C) (n‚ÇÄ n‚ÇÅ : ‚Ñï) (h : n‚ÇÅ = n‚ÇÄ+1) :
  Ext n‚ÇÄ X S.X‚ÇÉ ‚Üí+ Ext n‚ÇÅ X S.X‚ÇÅ :=
{ to_fun := Œª x, x ‚â´ ex.triangle.mor‚ÇÉ‚ü¶(n‚ÇÄ : ‚Ñ§)‚üß' ‚â´
    (shift_functor_add' (derived_category C) (1 : ‚Ñ§) n‚ÇÄ n‚ÇÅ
      (by rw [h, nat.cast_add, add_comm, algebra_map.coe_one])).inv.app _,
  map_zero' := by simp,
  map_add' := by simp, }

lemma Ext_comp_Œ¥‚ÇÇ (X : C) (n‚ÇÄ n‚ÇÅ : ‚Ñï) (h : n‚ÇÅ = n‚ÇÄ+1) :
  (ex.Ext_Œ¥‚ÇÇ X n‚ÇÄ n‚ÇÅ h).comp (Ext_map‚ÇÇ n‚ÇÄ X S.g) = 0 :=
begin
  ext x,
  dsimp [Ext_map‚ÇÇ, Ext_Œ¥‚ÇÇ],
  simp only [assoc],
  erw [‚Üê functor.map_comp_assoc, pretriangulated.triangle.comp_zero‚ÇÇ‚ÇÉ _ ex.triangle_dist,
    functor.map_zero, zero_comp, comp_zero],
end

lemma Ext_Œ¥‚ÇÇ_comp (X : C) (n‚ÇÄ n‚ÇÅ : ‚Ñï) (h : n‚ÇÅ = n‚ÇÄ+1) :
  (Ext_map‚ÇÇ n‚ÇÅ X S.f).comp (ex.Ext_Œ¥‚ÇÇ X n‚ÇÄ n‚ÇÅ h) = 0 :=
begin
  ext x,
  dsimp [Ext_map‚ÇÇ, Ext_Œ¥‚ÇÇ],
  simp only [assoc],
  erw [‚Üê nat_trans.naturality, ‚Üê functor.map_comp_assoc,
    pretriangulated.triangle.comp_zero‚ÇÉ‚ÇÅ _ ex.triangle_dist, functor.map_zero,
    zero_comp, comp_zero],
end

lemma Ext_ex‚ÇÇ‚ÇÇ (X : C) (n : ‚Ñï) :
  (short_complex.mk (AddCommGroup.of_hom (Ext_map‚ÇÇ n X S.f))
    (AddCommGroup.of_hom (Ext_map‚ÇÇ n X S.g)) begin
      ext x,
      simp only [comp_apply, AddCommGroup.of_hom_apply, AddCommGroup.zero_apply],
      rw [‚Üê add_monoid_hom.comp_apply, ‚Üê Ext_map‚ÇÇ_comp, S.zero,
        Ext_map‚ÇÇ_zero, add_monoid_hom.zero_apply],
    end).exact :=
functor.is_homological.ex‚ÇÇ
  (preadditive_coyoneda.obj (opposite.op ((single_functor C 0).obj X))) _ ex.triangle_dist n

lemma Ext_ex‚ÇÇ‚ÇÇ' {X : C} {n : ‚Ñï} (x‚ÇÇ : Ext n X S.X‚ÇÇ)
  (hx‚ÇÇ : Ext_map‚ÇÇ n X S.g x‚ÇÇ = 0) :
  ‚àÉ (x‚ÇÅ : Ext n X S.X‚ÇÅ), Ext_map‚ÇÇ n X S.f x‚ÇÅ = x‚ÇÇ :=
begin
  have h := ex.Ext_ex‚ÇÇ‚ÇÇ X n,
  rw AddCommGroup_exact_iff at h,
  exact h x‚ÇÇ hx‚ÇÇ,
end

lemma Ext_ex‚ÇÇ‚ÇÉ (X : C) (n‚ÇÄ n‚ÇÅ : ‚Ñï) (h : n‚ÇÅ = n‚ÇÄ+1) :
  (short_complex.mk (AddCommGroup.of_hom (Ext_map‚ÇÇ n‚ÇÄ X S.g))
    (AddCommGroup.of_hom (ex.Ext_Œ¥‚ÇÇ X n‚ÇÄ n‚ÇÅ h)) begin
      ext x,
      simp only [comp_apply, AddCommGroup.of_hom_apply, AddCommGroup.zero_apply],
      rw [‚Üê add_monoid_hom.comp_apply, ex.Ext_comp_Œ¥‚ÇÇ, add_monoid_hom.zero_apply],
    end).exact :=
functor.is_homological.ex‚ÇÉ
  (preadditive_coyoneda.obj (opposite.op ((single_functor C 0).obj X))) _ ex.triangle_dist _ _
  (by simp [h])

lemma Ext_ex‚ÇÇ‚ÇÉ' {X : C} (n‚ÇÄ n‚ÇÅ : ‚Ñï) (h : n‚ÇÅ = n‚ÇÄ+1)
  (x‚ÇÉ : Ext n‚ÇÄ X S.X‚ÇÉ)
  (hx‚ÇÉ : ex.Ext_Œ¥‚ÇÇ X n‚ÇÄ n‚ÇÅ h x‚ÇÉ = 0) :
  ‚àÉ (x‚ÇÇ : Ext n‚ÇÄ X S.X‚ÇÇ), Ext_map‚ÇÇ n‚ÇÄ X S.g x‚ÇÇ = x‚ÇÉ :=
begin
  have h := ex.Ext_ex‚ÇÇ‚ÇÉ X n‚ÇÄ n‚ÇÅ h,
  rw AddCommGroup_exact_iff at h,
  exact h x‚ÇÉ hx‚ÇÉ,
end

lemma Ext_ex‚ÇÇ‚ÇÅ (X : C) (n‚ÇÄ n‚ÇÅ : ‚Ñï) (h : n‚ÇÅ = n‚ÇÄ+1) :
  (short_complex.mk (AddCommGroup.of_hom (ex.Ext_Œ¥‚ÇÇ X n‚ÇÄ n‚ÇÅ h))
    (AddCommGroup.of_hom (Ext_map‚ÇÇ n‚ÇÅ X S.f)) begin
      ext x,
      simp only [comp_apply, AddCommGroup.of_hom_apply, AddCommGroup.zero_apply],
      rw [‚Üê add_monoid_hom.comp_apply, ex.Ext_Œ¥‚ÇÇ_comp, add_monoid_hom.zero_apply],
    end).exact :=
functor.is_homological.ex‚ÇÅ
  (preadditive_coyoneda.obj (opposite.op ((single_functor C 0).obj X))) _ ex.triangle_dist _ _ (by simp [h])

lemma Ext_ex‚ÇÇ‚ÇÅ' {X : C} (n‚ÇÄ n‚ÇÅ : ‚Ñï) (h : n‚ÇÅ = n‚ÇÄ+1)
  (x‚ÇÅ : Ext n‚ÇÅ X S.X‚ÇÅ)
  (hx‚ÇÅ : Ext_map‚ÇÇ n‚ÇÅ X S.f x‚ÇÅ = 0) :
  ‚àÉ (x‚ÇÉ : Ext n‚ÇÄ X S.X‚ÇÉ), ex.Ext_Œ¥‚ÇÇ X n‚ÇÄ n‚ÇÅ h x‚ÇÉ = x‚ÇÅ :=
begin
  have h := ex.Ext_ex‚ÇÇ‚ÇÅ X n‚ÇÄ n‚ÇÅ h,
  rw AddCommGroup_exact_iff at h,
  exact h x‚ÇÅ hx‚ÇÅ,
end

def Ext_Œ¥‚ÇÅ (Y : C) (n‚ÇÄ n‚ÇÅ : ‚Ñï) (h : n‚ÇÅ = n‚ÇÄ+1) :
  Ext n‚ÇÄ S.X‚ÇÅ Y ‚Üí+ Ext n‚ÇÅ S.X‚ÇÉ Y :=
{ to_fun := Œª x, ((-1 : units ‚Ñ§)^n‚ÇÅ) ‚Ä¢ ex.triangle.mor‚ÇÉ ‚â´ x‚ü¶(1 : ‚Ñ§)‚üß' ‚â´
    (shift_functor_add' (derived_category C) (n‚ÇÄ : ‚Ñ§) 1 n‚ÇÅ
      (by rw [h, nat.cast_add, algebra_map.coe_one])).inv.app _,
  map_zero' := by simp only [functor.map_zero, zero_comp, comp_zero, smul_zero],
  map_add' := Œª a b, by simp only [functor.map_add, preadditive.add_comp,
    preadditive.comp_add, smul_add], }

lemma Ext_Œ¥‚ÇÅ_comp (Y : C) (n‚ÇÄ n‚ÇÅ : ‚Ñï) (h : n‚ÇÅ = n‚ÇÄ+1) :
  (ex.Ext_Œ¥‚ÇÅ Y n‚ÇÄ n‚ÇÅ h).comp (Ext_map‚ÇÅ n‚ÇÄ S.f Y) = 0 :=
begin
  ext x,
  dsimp [Ext_Œ¥‚ÇÅ, Ext_map‚ÇÅ],
  simp only [assoc, functor.map_comp],
  erw [pretriangulated.triangle.comp_zero‚ÇÉ‚ÇÅ_assoc _ ex.triangle_dist, zero_comp, smul_zero],
end

lemma Ext_comp_Œ¥‚ÇÅ (Y : C) (n‚ÇÄ n‚ÇÅ : ‚Ñï) (h : n‚ÇÅ = n‚ÇÄ+1) :
  (Ext_map‚ÇÅ n‚ÇÅ S.g Y).comp (ex.Ext_Œ¥‚ÇÅ Y n‚ÇÄ n‚ÇÅ h) = 0 :=
begin
  ext x,
  dsimp [Ext_map‚ÇÅ, Ext_Œ¥‚ÇÅ],
  erw [preadditive.comp_zsmul, pretriangulated.triangle.comp_zero‚ÇÇ‚ÇÉ_assoc _ ex.triangle_dist,
    zero_comp, zsmul_zero],
end

lemma Ext_Œ¥‚ÇÅ_Œ¥‚ÇÇ {S' : short_complex C} (ex' : S'.short_exact) (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñï)
  (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ+1) (hn‚ÇÇ : n‚ÇÇ = n‚ÇÅ+1) :
  (ex.Ext_Œ¥‚ÇÅ S'.X‚ÇÅ n‚ÇÅ n‚ÇÇ hn‚ÇÇ).comp (ex'.Ext_Œ¥‚ÇÇ S.X‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ) =
    -(ex'.Ext_Œ¥‚ÇÇ S.X‚ÇÉ n‚ÇÅ n‚ÇÇ hn‚ÇÇ).comp (ex.Ext_Œ¥‚ÇÅ S'.X‚ÇÉ n‚ÇÄ n‚ÇÅ hn‚ÇÅ) :=
begin
  ext x,
  dsimp [Ext_Œ¥‚ÇÅ, Ext_Œ¥‚ÇÇ],
  simp only [hn‚ÇÇ, pow_add, pow_one, mul_neg, mul_one],
  erw preadditive.zsmul_comp,
  rw units.neg_smul,
  simp only [assoc, functor.map_comp],
  erw ‚Üê nat_trans.naturality_assoc,
  congr' 5,
  erw ‚Üê shift_functor_add‚ÇÉ'_inv_app (1 : ‚Ñ§) n‚ÇÄ 1 n‚ÇÇ (by linarith) n‚ÇÅ (by linarith),
  rw ‚Üê shift_functor_add‚ÇÉ'_inv_app' (1 : ‚Ñ§) n‚ÇÄ 1,
end

end short_exact

end short_complex

end category_theory
