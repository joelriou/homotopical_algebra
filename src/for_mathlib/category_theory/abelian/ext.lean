import for_mathlib.category_theory.triangulated.hom_homological
import for_mathlib.algebra.homology.trunc

noncomputable theory

namespace category_theory

open derived_category category limits

variables {C : Type*} [category C] [abelian C]

def Ext (n : ‚Ñï) (X Y : C) :=
((single_functor C 0).obj X ‚ü∂ ((single_functor C 0).obj Y)‚ü¶(n : ‚Ñ§)‚üß)

instance (n : ‚Ñï) (X Y : C) : add_comm_group (Ext n X Y) :=
by { dsimp only [Ext], apply_instance, }

def Ext_map‚ÇÅ (n : ‚Ñï) {X X' : C} (f : X' ‚ü∂ X) (Y : C) :
  Ext n X Y ‚Üí+ Ext n X' Y :=
{ to_fun := Œª e, ((single_functor C 0).map f) ‚â´ e,
  map_zero' := by simp,
  map_add' := by simp, }

def Ext_map‚ÇÇ (n : ‚Ñï) (X : C) {Y Y' : C} (g : Y ‚ü∂ Y') :
  Ext n X Y ‚Üí+ Ext n X Y' :=
{ to_fun := Œª e, e ‚â´ ((single_functor C 0).map g)‚ü¶(n : ‚Ñ§)‚üß',
  map_zero' := by simp,
  map_add' := by simp, }

lemma Ext_map‚ÇÅ‚ÇÇ_comm (n : ‚Ñï) {X X' Y Y' : C} (f : X' ‚ü∂ X) (g : Y ‚ü∂ Y') :
  (Ext_map‚ÇÇ n X' g).comp (Ext_map‚ÇÅ n f Y) = (Ext_map‚ÇÅ n f Y').comp (Ext_map‚ÇÇ n X g) :=
begin
  ext x,
  dsimp [Ext_map‚ÇÇ, Ext_map‚ÇÅ],
  rw assoc,
end

@[simp]
lemma Ext_map‚ÇÅ_id (n : ‚Ñï) (X Y : C) :
  Ext_map‚ÇÅ n (ùüô X) Y = add_monoid_hom.id _ :=
begin
  ext x,
  dsimp [Ext_map‚ÇÅ],
  simp only [functor.map_id, id_comp],
end

@[simp]
lemma Ext_map‚ÇÅ_comp (n : ‚Ñï) {X X' X'' : C} (f : X ‚ü∂ X') (f' : X' ‚ü∂ X'') (Y : C) :
  Ext_map‚ÇÅ n (f ‚â´ f') Y = (Ext_map‚ÇÅ n f Y).comp (Ext_map‚ÇÅ n f' Y) :=
begin
  ext x,
  dsimp [Ext_map‚ÇÅ],
  simp only [functor.map_comp, assoc],
end

@[simp]
lemma Ext_map‚ÇÇ_id (n : ‚Ñï) (X Y : C) :
  Ext_map‚ÇÇ n X (ùüô Y) = add_monoid_hom.id _ :=
begin
  ext x,
  dsimp [Ext_map‚ÇÇ],
  simp only [functor.map_id, comp_id],
end

@[simp]
lemma Ext_map‚ÇÇ_comp (n : ‚Ñï) (X : C) {Y Y' Y'' : C} (g : Y ‚ü∂ Y') (g' : Y' ‚ü∂ Y'') :
  Ext_map‚ÇÇ n X (g ‚â´ g') = (Ext_map‚ÇÇ n X g').comp (Ext_map‚ÇÇ n X g) :=
begin
  ext x,
  dsimp [Ext_map‚ÇÇ],
  simp only [functor.map_comp, assoc],
end


namespace short_complex

namespace short_exact

variables {S : short_complex C} (ex : S.short_exact)

include ex

def triangle : pretriangulated.triangle (derived_category C) :=
triangle_of_ses
  (short_complex.short_exact.map_of_exact ex
  (homological_complex.single C (complex_shape.up ‚Ñ§) 0))

lemma triangle_dist : ex.triangle ‚àà dist_triang (derived_category C) :=
triangle_of_ses_dist _

def Ext_Œ¥‚ÇÇ (X : C) (n‚ÇÄ n‚ÇÅ : ‚Ñï) (h : n‚ÇÅ = n‚ÇÄ+1) :
  Ext n‚ÇÄ X S.X‚ÇÉ ‚Üí+ Ext n‚ÇÅ X S.X‚ÇÅ :=
{ to_fun := Œª x, x ‚â´ ex.triangle.mor‚ÇÉ‚ü¶(n‚ÇÄ : ‚Ñ§)‚üß' ‚â´
    (shift_functor_add' (derived_category C) (1 : ‚Ñ§) n‚ÇÄ n‚ÇÅ
      (by rw [h, nat.cast_add, add_comm, algebra_map.coe_one])).inv.app _,
  map_zero' := by simp,
  map_add' := by simp, }

lemma Ext_Œ¥‚ÇÅ (Y : C) (n‚ÇÄ n‚ÇÅ : ‚Ñï) (h : n‚ÇÅ = n‚ÇÄ+1) :
  Ext n‚ÇÄ S.X‚ÇÅ Y ‚Üí+ Ext n‚ÇÅ S.X‚ÇÉ Y :=
begin
  sorry,
end

end short_exact

end short_complex

--def Ext_functor (n : ‚Ñï) : C·µí·µñ ‚•§ C ‚•§ AddCommGroup :=
--(single_functor C 0).op ‚ãô preadditive_coyoneda ‚ãô
--  (whiskering_left _ _ AddCommGroup).obj (single_functor C 0 ‚ãô shift_functor _ (n : ‚Ñ§))


end category_theory
