/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import category_theory.opposites
import for_mathlib.category_theory.arrow_class
import for_mathlib.category_theory.comma_op

open category_theory
open category_theory.category
open opposite

variables {C D : Type*} [category C] [category D] (G : C ‚•§ D)

namespace category_theory

def is_retract (X Y : C) : Prop := ‚àÉ (s : X ‚ü∂ Y) (r : Y ‚ü∂ X), s ‚â´ r = ùüô X

namespace is_retract

lemma iff_op (X Y : C) : is_retract X Y ‚Üî is_retract (opposite.op X) (opposite.op Y) :=
begin
  split,
  { intro h,
    rcases h with ‚ü®s, r, fac‚ü©,
    use [r.op, s.op],
    exact congr_arg (Œª (œÜ : _ ‚ü∂ _), œÜ.op) fac, },
  { intro h,
    rcases h with ‚ü®s, r, fac‚ü©,
    use [r.unop, s.unop],
    exact congr_arg (Œª (œÜ : _ ‚ü∂ _), œÜ.unop) fac, },
end

lemma imp_of_isos {X Y X' Y' : C} (e‚ÇÅ : X ‚âÖ X') (e‚ÇÇ : Y ‚âÖ Y')
  (h : is_retract X Y) : is_retract X' Y' :=
begin
  rcases h with ‚ü®s, p, r‚ü©,
  use [e‚ÇÅ.inv ‚â´ s ‚â´ e‚ÇÇ.hom, e‚ÇÇ.inv ‚â´ p ‚â´ e‚ÇÅ.hom],
  slice_lhs 3 4 { rw iso.hom_inv_id, },
  erw id_comp,
  slice_lhs 2 3 { rw r, },
  erw [id_comp, iso.inv_hom_id],
end

lemma iff_of_isos {X Y X' Y' : C} (e‚ÇÅ : X ‚âÖ X') (e‚ÇÇ : Y ‚âÖ Y') :
  is_retract X Y ‚Üî is_retract X' Y' :=
begin
  split,
  { exact imp_of_isos e‚ÇÅ e‚ÇÇ, },
  { exact imp_of_isos e‚ÇÅ.symm e‚ÇÇ.symm, },
end

lemma imp_of_functor (X Y : C) (h : is_retract X Y) : is_retract (G.obj X) (G.obj Y) :=
begin
  rcases h with ‚ü®s, p, r‚ü©,
  use [G.map s, G.map p],
  rw [‚Üê G.map_comp, r, G.map_id],
end

lemma iff_of_is_equivalence (X Y : C) [is_equivalence G] :
  is_retract X Y ‚Üî is_retract (G.obj X) (G.obj Y) :=
begin
  split,
  { apply imp_of_functor, },
  { intro h,
    have e : is_equivalence G := infer_instance,
    erw iff_of_isos (e.unit_iso.app X) (e.unit_iso.app Y),
    convert imp_of_functor e.inverse _ _ h, }
end

end is_retract

def is_retract_hom {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : C} (x : X‚ÇÅ ‚ü∂ X‚ÇÇ) (y : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) := is_retract (arrow.mk x) (arrow.mk y) 

namespace is_retract_hom

lemma iff_op {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : C} (x : X‚ÇÅ ‚ü∂ X‚ÇÇ) (y : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) :
  is_retract_hom x y ‚Üî is_retract_hom x.op y.op :=
begin
  calc is_retract (arrow.mk x) (arrow.mk y) ‚Üî is_retract (op (arrow.mk x)) (op (arrow.mk y)) :
    is_retract.iff_op (arrow.mk x) (arrow.mk y)
  ... ‚Üî is_retract (arrow.mk x.op) (arrow.mk y.op) : _,
  rw is_retract.iff_of_is_equivalence (equivalence_arrow_op C).functor,
  congr',
end

lemma iff_unop {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : C·µí·µñ} (x : X‚ÇÅ ‚ü∂ X‚ÇÇ) (y : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) :
  is_retract_hom x y ‚Üî is_retract_hom x.unop y.unop :=
(iff_op x.unop y.unop).symm

lemma op {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : C} {x : X‚ÇÅ ‚ü∂ X‚ÇÇ} {y : Y‚ÇÅ ‚ü∂ Y‚ÇÇ}
  (hxy : is_retract_hom x y) : is_retract_hom x.op y.op :=
(iff_op x y).mp hxy

lemma unop {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : C·µí·µñ} {x : X‚ÇÅ ‚ü∂ X‚ÇÇ} {y : Y‚ÇÅ ‚ü∂ Y‚ÇÇ}
  (hxy : is_retract_hom x y) : is_retract_hom x.unop y.unop :=
(iff_op x.unop y.unop).mpr hxy

end is_retract_hom

namespace arrow_class

variables (F : arrow_class C) {F' : arrow_class C·µí·µñ}

def is_stable_by_retract : Prop :=
‚àÄ ‚¶ÉX‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : C‚¶Ñ (x : X‚ÇÅ ‚ü∂ X‚ÇÇ) (y : Y‚ÇÅ ‚ü∂ Y‚ÇÇ)
  (hxy : is_retract_hom x y) (hx : arrow.mk y ‚àà F), arrow.mk x ‚àà F

namespace is_stable_by_retract

variable {F}

lemma op (h : is_stable_by_retract F) :
  is_stable_by_retract F.op :=
Œª X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ x y hxy hy, h x.unop y.unop hxy.unop hy

lemma unop (h : is_stable_by_retract F') :
  is_stable_by_retract F'.unop :=
Œª X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ x y hxy hy, h x.op y.op hxy.op hy

variables (F F')

lemma iff_op (F : arrow_class C) :
  is_stable_by_retract F ‚Üî is_stable_by_retract F.op :=
begin
  split,
  { intro h,
    exact h.op, },
  { intro h,
    simpa only [F.unop_op] using h.unop, },
end

lemma iff_unop :
  is_stable_by_retract F' ‚Üî is_stable_by_retract F'.unop :=
by simpa only [F'.op_unop] using (iff_op F'.unop).symm

variable {F}

lemma of_inter {G : arrow_class C} (hF : F.is_stable_by_retract) (hG : G.is_stable_by_retract) :
  (F ‚à© G).is_stable_by_retract :=
Œª X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ x y hxy hy, ‚ü®hF x y hxy hy.1, hG x y hxy hy.2‚ü©

lemma for_isomorphisms : (isomorphisms : arrow_class C).is_stable_by_retract :=
Œª X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ x y hxy hy,
begin
  haveI : is_iso y := hy,
  rcases hxy with ‚ü®s, r, fac‚ü©,
  use s.right ‚â´ inv y ‚â´ r.left,
  have hs := s.w,
  have hr := r.w,
  have fac‚ÇÅ := arrow.hom.congr_left fac,
  have fac‚ÇÇ := arrow.hom.congr_right fac,
  dsimp at hs hr fac‚ÇÅ fac‚ÇÇ ‚ä¢,
  split,
  { slice_lhs 1 2 { rw ‚Üê hs, },
    slice_lhs 2 3 { rw is_iso.hom_inv_id, },
    rw [id_comp, fac‚ÇÅ], },
  { slice_lhs 3 4 { rw hr, },
    slice_lhs 2 3 { rw is_iso.inv_hom_id, },
    rw [id_comp, fac‚ÇÇ], },
end

lemma for_monomorphisms : (monomorphisms : arrow_class C).is_stable_by_retract :=
Œª X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ x y hxy hy, ‚ü®Œª Z g g' hgg', begin
  haveI : mono y := hy,
  rcases hxy with ‚ü®s, r, fac‚ü©,
  haveI : split_mono s.left := ‚ü®r.left, arrow.hom.congr_left fac‚ü©,
  have hs := s.w,
  dsimp at hs hgg',
  rw [‚Üê cancel_mono s.left, ‚Üê cancel_mono y,
    assoc, assoc, hs, ‚Üê assoc, ‚Üê assoc, hgg'],
end‚ü©

lemma for_epimorphisms : (epimorphisms : arrow_class C).is_stable_by_retract :=
by simpa only [epimorphisms_eq_op] using for_monomorphisms.unop

end is_stable_by_retract

end arrow_class

end category_theory
