import for_mathlib.category_theory.functor.shift
import category_theory.triangulated.pretriangulated
import for_mathlib.category_theory.triangulated.pretriangulated_misc
import for_mathlib.category_theory.triangulated.yoneda

open category_theory category_theory.category category_theory.limits
  category_theory.pretriangulated

noncomputable theory

namespace category_theory

namespace functor

variables {C D E : Type*} [category C] [category D] [category E]
  [has_shift C ‚Ñ§] [has_shift D ‚Ñ§] [has_shift E ‚Ñ§]
  [preadditive C] [preadditive D] [preadditive E]
  (F : C ‚•§ D) [F.has_comm_shift ‚Ñ§] (G : D ‚•§ E) [G.has_comm_shift ‚Ñ§]

@[simps]
def map_triangle : pretriangulated.triangle C ‚•§ pretriangulated.triangle D :=
{ obj := Œª T, pretriangulated.triangle.mk (F.map T.mor‚ÇÅ) (F.map T.mor‚ÇÇ)
    (F.map T.mor‚ÇÉ ‚â´ (F.comm_shift_iso (1 : ‚Ñ§)).hom.app T.obj‚ÇÅ),
  map := Œª S T f,
  { hom‚ÇÅ := F.map f.hom‚ÇÅ,
    hom‚ÇÇ := F.map f.hom‚ÇÇ,
    hom‚ÇÉ := F.map f.hom‚ÇÉ,
    comm‚ÇÅ' := by { dsimp, simp only [‚Üê F.map_comp, f.comm‚ÇÅ], },
    comm‚ÇÇ' := by { dsimp, simp only [‚Üê F.map_comp, f.comm‚ÇÇ], },
    comm‚ÇÉ' := begin
      dsimp,
      erw [category.assoc, ‚Üênat_trans.naturality],
      simp only [functor.comp_map, ‚Üê F.map_comp_assoc, f.comm‚ÇÉ],
    end, }, }

instance [faithful F] : faithful F.map_triangle :=
‚ü®Œª K L f‚ÇÅ f‚ÇÇ hf, begin
  ext; apply F.map_injective,
  { change (F.map_triangle.map f‚ÇÅ).hom‚ÇÅ = (F.map_triangle.map f‚ÇÇ).hom‚ÇÅ, rw hf, },
  { change (F.map_triangle.map f‚ÇÅ).hom‚ÇÇ = (F.map_triangle.map f‚ÇÇ).hom‚ÇÇ, rw hf, },
  { change (F.map_triangle.map f‚ÇÅ).hom‚ÇÉ = (F.map_triangle.map f‚ÇÇ).hom‚ÇÉ, rw hf, },
end‚ü©

instance [full F] [faithful F] : full F.map_triangle :=
full_of_surjective _ (Œª K L f, begin
  refine
  ‚ü®{ hom‚ÇÅ := F.preimage f.hom‚ÇÅ,
    hom‚ÇÇ := F.preimage f.hom‚ÇÇ,
    hom‚ÇÉ := F.preimage f.hom‚ÇÉ,
    comm‚ÇÅ' := F.map_injective (by simpa only [F.map_comp, image_preimage] using f.comm‚ÇÅ),
    comm‚ÇÇ' := F.map_injective (by simpa only [F.map_comp, image_preimage] using f.comm‚ÇÇ),
    comm‚ÇÉ' := F.map_injective (begin
      have eq := f.comm‚ÇÉ,
      dsimp at eq,
      simp only [map_comp, image_preimage, assoc,
        ‚Üê cancel_mono ((F.comm_shift_iso (1 : ‚Ñ§)).hom.app L.obj‚ÇÅ), ‚Üê eq],
      erw (F.comm_shift_iso (1 : ‚Ñ§)).hom.naturality (F.preimage f.hom‚ÇÅ),
      simp only [comp_map, image_preimage],
    end), }, by tidy‚ü©,
end)

@[simps]
def map_triangle_rotate [functor.additive F] :
  F.map_triangle ‚ãô pretriangulated.rotate D ‚âÖ
    pretriangulated.rotate C ‚ãô F.map_triangle :=
nat_iso.of_components (Œª T, triangle.mk_iso _ _ (iso.refl _) (iso.refl _)
  ((F.comm_shift_iso (1 : ‚Ñ§)).symm.app _) (by tidy) (by tidy) begin
    dsimp,
    simp only [map_id, preadditive.neg_comp, comp_id,
      map_neg, preadditive.comp_neg, neg_inj],
    erw ‚Üê nat_trans.naturality_assoc,
    simp only [comp_map, iso.inv_hom_id_app, comp_id],
  end)
  (Œª X Y f, begin
    ext,
    { dsimp, simp, },
    { dsimp, simp, },
    { dsimp, erw ‚Üê nat_trans.naturality, refl, },
  end)

@[simps]
def map_triangle_inv_rotate [functor.additive F]
  [‚àÄ (n : ‚Ñ§), (shift_functor C n).additive]
  [‚àÄ (n : ‚Ñ§), (shift_functor D n).additive] :
  F.map_triangle ‚ãô pretriangulated.inv_rotate D ‚âÖ
    pretriangulated.inv_rotate C ‚ãô F.map_triangle :=
calc F.map_triangle ‚ãô inv_rotate D ‚âÖ _ : (functor.left_unitor _).symm
... ‚âÖ _ : iso_whisker_right (pretriangulated.triangle_rotation C).counit_iso.symm _
... ‚âÖ _ : functor.associator _ _ _
... ‚âÖ _ : iso_whisker_left _ (functor.associator _ _ _).symm
... ‚âÖ _ : iso_whisker_left _ (iso_whisker_right (map_triangle_rotate F).symm _)
... ‚âÖ _ : iso_whisker_left _ (functor.associator _ _ _)
... ‚âÖ _ : iso_whisker_left _ (iso_whisker_left _ (pretriangulated.triangle_rotation D).unit_iso.symm)
... ‚âÖ _: iso_whisker_left _ (functor.right_unitor _)

variable (C)

@[simps]
def map_triangle_id : (ùü≠ C).map_triangle ‚âÖ ùü≠ _ :=
nat_iso.of_components (Œª T, pretriangulated.triangle.mk_iso _ _ (iso.refl _) (iso.refl _) (iso.refl _)
  (by tidy) (by tidy) (by tidy)) (by tidy)

variable {C}

@[simps]
def map_triangle_comp : (F ‚ãô G).map_triangle ‚âÖ F.map_triangle ‚ãô G.map_triangle :=
nat_iso.of_components (Œª T, pretriangulated.triangle.mk_iso _ _ (iso.refl _) (iso.refl _) (iso.refl _)
  (by tidy) (by tidy) (by { dsimp, simp, })) (Œª T‚ÇÅ T‚ÇÇ f, by { ext; dsimp; simp, })

variables {F}

@[simps]
def map_triangle_nat_trans {F' : C ‚•§ D} [F'.has_comm_shift ‚Ñ§] (œÑ : F ‚ü∂ F')
  [œÑ.respects_comm_shift ‚Ñ§] :
  F.map_triangle ‚ü∂ F'.map_triangle :=
{ app := Œª X,
  { hom‚ÇÅ := œÑ.app _,
    hom‚ÇÇ := œÑ.app _,
    hom‚ÇÉ := œÑ.app _,
    comm‚ÇÉ' := begin
      dsimp,
      simp only [assoc, nat_trans.respects_comm_shift.comm_app œÑ (1 : ‚Ñ§),
        nat_trans.naturality_assoc],
    end, }, }

@[simps]
def map_triangle_nat_iso {F' : C ‚•§ D} [F'.has_comm_shift ‚Ñ§] (e : F ‚âÖ F')
  [e.hom.respects_comm_shift ‚Ñ§] : F.map_triangle ‚âÖ F'.map_triangle :=
nat_iso.of_components
  (Œª T, pretriangulated.triangle.mk_iso _ _ (e.app _) (e.app _) (e.app _) (by tidy) (by tidy)
  begin
    dsimp,
    simp only [assoc, nat_trans.respects_comm_shift.comm_app e.hom (1 : ‚Ñ§),
      nat_trans.naturality_assoc],
  end) (by tidy)

variables (F) [‚àÄ (n : ‚Ñ§), (shift_functor C n).additive]
  [‚àÄ (n : ‚Ñ§), (shift_functor D n).additive]
  [‚àÄ (n : ‚Ñ§), (shift_functor E n).additive]
  [has_zero_object C] [has_zero_object D] [has_zero_object E]
  [pretriangulated C] [pretriangulated D] [pretriangulated E]

@[protected]
class is_triangulated : Prop :=
(map_distinguished' [] : ‚àÄ (T : pretriangulated.triangle C)
  (hT : T ‚àà dist_triang C), F.map_triangle.obj T ‚àà dist_triang D)

lemma map_distinguished [F.is_triangulated] (T : pretriangulated.triangle C)
  (hT : T ‚àà dist_triang C) : F.map_triangle.obj T ‚àà dist_triang D :=
is_triangulated.map_distinguished' F T hT

instance id_is_triangulated : (ùü≠ C).is_triangulated :=
{ map_distinguished' :=
    Œª T hT, pretriangulated.isomorphic_distinguished _ hT _ ((map_triangle_id C).app T), }

instance comp_is_triangulated [F.is_triangulated] [G.is_triangulated] :
  (F ‚ãô G).is_triangulated :=
{ map_distinguished' := Œª T hT, pretriangulated.isomorphic_distinguished _
    (G.map_distinguished _ (F.map_distinguished _ hT)) _ ((map_triangle_comp F G).app T), }

lemma reflects_distinguished [F.is_triangulated] [full F] [faithful F]
  (T : pretriangulated.triangle C) (hT : F.map_triangle.obj T ‚àà dist_triang D) :
  T ‚àà dist_triang C :=
begin
  obtain ‚ü®Z, g, h, mem‚ü© := distinguished_cocone_triangle _ _ T.mor‚ÇÅ,
  exact pretriangulated.isomorphic_distinguished _ mem _
    (F.map_triangle.preimage_iso (pretriangulated.iso_triangle_of_distinguished_of_is_iso‚ÇÅ‚ÇÇ _ _ hT
    (F.map_distinguished _ mem) (iso.refl _) (iso.refl _) (by tidy))),
end

variable {F}

lemma is_triangulated.of_iso {G : C ‚•§ D} (e : F ‚âÖ G) [F.is_triangulated] [G.has_comm_shift ‚Ñ§]
  [e.hom.respects_comm_shift ‚Ñ§] : G.is_triangulated :=
‚ü®Œª T hT, pretriangulated.isomorphic_distinguished _
  (F.map_distinguished _ hT) _ ((map_triangle_nat_iso e).symm.app T)‚ü©

end functor

namespace pretriangulated

variables {C : Type*} [category C] [has_shift C ‚Ñ§] [preadditive C]
  (S : set C) [S.is_stable_by_shift ‚Ñ§]

variables (T : pretriangulated.triangle C)
  (h‚ÇÅ : T.obj‚ÇÅ ‚àà S) (h‚ÇÇ : T.obj‚ÇÇ ‚àà S) (h‚ÇÉ : T.obj‚ÇÉ ‚àà S)

@[simps]
def full_subcategory_lift_triangle :
  pretriangulated.triangle (full_subcategory S) :=
{ obj‚ÇÅ := ‚ü®T.obj‚ÇÅ, h‚ÇÅ‚ü©,
  obj‚ÇÇ := ‚ü®T.obj‚ÇÇ, h‚ÇÇ‚ü©,
  obj‚ÇÉ := ‚ü®T.obj‚ÇÉ, h‚ÇÉ‚ü©,
  mor‚ÇÅ := T.mor‚ÇÅ,
  mor‚ÇÇ := T.mor‚ÇÇ,
  mor‚ÇÉ := T.mor‚ÇÉ, }

def full_subcategory_lift_triangle_iso :
  (full_subcategory_inclusion S).map_triangle.obj
    (full_subcategory_lift_triangle S T h‚ÇÅ h‚ÇÇ h‚ÇÉ) ‚âÖ T :=
triangle.mk_iso _ _ (iso.refl _) (iso.refl _) (iso.refl _) (by tidy) (by tidy) begin
  dsimp,
  simp only [functor.map_id, comp_id, id_comp],
  erw comp_id,
end

end pretriangulated

end category_theory
