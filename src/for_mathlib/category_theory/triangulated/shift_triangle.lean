--import for_mathlib.category_theory.localization.triangulated
import tactic.linarith
import category_theory.triangulated.rotate
import for_mathlib.category_theory.triangulated.shift_compatibility
import for_mathlib.category_theory.triangulated.pretriangulated_misc
import for_mathlib.category_theory.functor.shift

noncomputable theory

namespace category_theory

open limits

namespace pretriangulated

open preadditive category pretriangulated

variables (C : Type*) [category C] [preadditive C] [has_shift C ‚Ñ§]

@[simps]
def triangle.shift_functor (n : ‚Ñ§) : triangle C ‚•§ triangle C :=
{ obj := Œª T, begin
    let Œµ : ‚Ñ§ := ‚Üë((-1 : units ‚Ñ§) ^ n),
    exact triangle.mk (Œµ ‚Ä¢ (shift_functor C n).map T.mor‚ÇÅ)
      (Œµ ‚Ä¢ (shift_functor C n).map T.mor‚ÇÇ)
      ((Œµ ‚Ä¢ (shift_functor C n).map T.mor‚ÇÉ) ‚â´ (shift_functor_add_comm C 1 n).hom.app _),
  end,
  map := Œª T‚ÇÅ T‚ÇÇ f,
  { hom‚ÇÅ := (shift_functor C n).map f.hom‚ÇÅ,
    hom‚ÇÇ := (shift_functor C n).map f.hom‚ÇÇ,
    hom‚ÇÉ := (shift_functor C n).map f.hom‚ÇÉ,
    comm‚ÇÅ' := by { dsimp, simp only [preadditive.zsmul_comp, preadditive.comp_zsmul,
      ‚Üê functor.map_comp, f.comm‚ÇÅ], },
    comm‚ÇÇ' := by { dsimp, simp only [preadditive.zsmul_comp, preadditive.comp_zsmul,
      ‚Üê functor.map_comp, f.comm‚ÇÇ], },
    comm‚ÇÉ' := by { dsimp,
      simp only [assoc, preadditive.zsmul_comp, preadditive.comp_zsmul, ‚Üê functor.map_comp_assoc,
        ‚Üê f.comm‚ÇÉ],
      simp only [functor.map_comp, assoc],
      erw ‚Üê nat_trans.naturality,
      refl, }, }, }

variables [has_zero_object C] [‚àÄ (n : ‚Ñ§), functor.additive (shift_functor C n)]

def triangle.shift_functor_one_iso : triangle.shift_functor C 1 ‚âÖ rotate C ‚ãô rotate C ‚ãô rotate C :=
nat_iso.of_components
  (Œª T, triangle.mk_iso _ _ (iso.refl _) (iso.refl _) (iso.refl _) (by tidy) (by tidy) begin
    dsimp,
    simp only [zpow_one, units.coe_neg_one, neg_smul, one_zsmul, neg_comp, functor.map_id,
      comp_id, id_comp, neg_inj, shift_functor_add_comm_eq_refl, iso.refl_hom, nat_trans.id_app],
    apply comp_id,
  end)
  (by tidy)

local attribute [reducible] discrete.add_monoidal

def triangle.shift_functor_zero : triangle.shift_functor C 0 ‚âÖ ùü≠ _ :=
nat_iso.of_components (Œª T, triangle.mk_iso _ _ ((shift_functor_zero C ‚Ñ§).app _)
  ((shift_functor_zero C ‚Ñ§).app _) ((shift_functor_zero C ‚Ñ§).app _) (by tidy) (by tidy) begin
  dsimp,
  simp only [zpow_zero, units.coe_one, one_zsmul, assoc, shift_functor_add_comm_hom_app],
  erw ‚Üê nat_trans.naturality,
  congr' 1,
  dsimp,
  simp only [obj_Œµ_inv_app, discrete.functor_map_id, nat_trans.id_app, comp_id,
    Œº_inv_hom_app, Œµ_inv_app_obj],
end) (by tidy)

def triangle.shift_functor_add (a‚ÇÅ a‚ÇÇ : ‚Ñ§) :
  triangle.shift_functor C (a‚ÇÅ + a‚ÇÇ) ‚âÖ
    triangle.shift_functor C a‚ÇÅ ‚ãô triangle.shift_functor C a‚ÇÇ :=
nat_iso.of_components (Œª T, begin
  dsimp only [triangle.shift_functor],
  refine triangle.mk_iso _ _ ((shift_functor_add C a‚ÇÅ a‚ÇÇ).app _) ((shift_functor_add C a‚ÇÅ a‚ÇÇ).app _)
    ((shift_functor_add C a‚ÇÅ a‚ÇÇ).app _) _ _ _,
  { dsimp only [triangle.mk, functor.comp],
    simp only [zsmul_comp, comp_zsmul, functor.map_zsmul, smul_smul],
    congr' 1,
    { rw [zpow_add, units.coe_mul, mul_comm], },
    { exact (shift_functor_add C a‚ÇÅ a‚ÇÇ).hom.naturality T.mor‚ÇÅ, }, },
  { dsimp only [triangle.mk, functor.comp],
    simp only [zsmul_comp, comp_zsmul, functor.map_zsmul, smul_smul,
      zpow_add, units.coe_mul, mul_comm],
    congr' 1,
    exact (shift_functor_add C a‚ÇÅ a‚ÇÇ).hom.naturality T.mor‚ÇÇ, },
  { dsimp only [triangle.mk, functor.comp],
    simp only [zsmul_comp, comp_zsmul, functor.map_zsmul, smul_smul,
      zpow_add, units.coe_mul, mul_comm],
    congr' 1,
    simp only [functor.map_comp, assoc],
    erw ‚Üê nat_trans.naturality_assoc,
    congr' 1,
    apply shift_compatibility, },
end)
(Œª T T' f, by ext; apply nat_trans.naturality)

def triangle.shift_functor_sub_one_iso : triangle.shift_functor C (-1) ‚âÖ inv_rotate C ‚ãô inv_rotate C ‚ãô inv_rotate C :=
begin
  symmetry,
  calc inv_rotate C ‚ãô inv_rotate C ‚ãô inv_rotate C ‚âÖ ùü≠ _ ‚ãô inv_rotate C ‚ãô inv_rotate C ‚ãô inv_rotate C : (functor.left_unitor _).symm
  ... ‚âÖ triangle.shift_functor C 0 ‚ãô inv_rotate C ‚ãô inv_rotate C ‚ãô inv_rotate C :
    iso_whisker_right (triangle.shift_functor_zero C).symm _
  ... ‚âÖ triangle.shift_functor C ((-1) + 1) ‚ãô inv_rotate C ‚ãô inv_rotate C ‚ãô inv_rotate C :
    iso_whisker_right (eq_to_iso (by congr)) _
  ... ‚âÖ (triangle.shift_functor C (-1) ‚ãô triangle.shift_functor C 1) ‚ãô inv_rotate C ‚ãô inv_rotate C ‚ãô inv_rotate C :
    iso_whisker_right (triangle.shift_functor_add C _ _) _
  ... ‚âÖ _ : functor.associator _ _ _
  ... ‚âÖ _ : iso_whisker_left _ _
  ... ‚âÖ triangle.shift_functor C (-1) : functor.right_unitor _,
  let e : rotate C ‚ãô inv_rotate C ‚âÖ ùü≠ _ := (triangle_rotation C).unit_iso.symm,
  let Œ± := iso_whisker_left (rotate C ‚ãô rotate C) (iso_whisker_right e (inv_rotate C ‚ãô inv_rotate C)),
  let Œ≤ := iso_whisker_left (rotate C) (iso_whisker_right e (inv_rotate C)),
  exact iso_whisker_right (triangle.shift_functor_one_iso C) _ ‚â™‚â´ Œ± ‚â™‚â´ Œ≤ ‚â™‚â´ e,
end

def triangle.shift_functor_iso_of_eq {a‚ÇÅ a‚ÇÇ : ‚Ñ§} (h : a‚ÇÅ = a‚ÇÇ) :
  triangle.shift_functor C a‚ÇÅ ‚âÖ triangle.shift_functor C a‚ÇÇ := by subst h

lemma triangle.shift_distinguished [pretriangulated C]
  (T : triangle C) (hT : T ‚àà dist_triang C) (n : ‚Ñ§) :
  (triangle.shift_functor C n).obj T ‚àà dist_triang C :=
begin
  have hpos : ‚àÄ (T' : triangle C) (hT' : T' ‚àà dist_triang C),
    (triangle.shift_functor C (1 : ‚Ñ§)).obj T' ‚àà dist_triang C,
  { intros T' hT',
    exact pretriangulated.isomorphic_distinguished _ (rot_of_dist_triangle C _
      (rot_of_dist_triangle C _ (rot_of_dist_triangle C _ hT'))) _
      ((triangle.shift_functor_one_iso C).app T'), },
  have hneg : ‚àÄ (T' : triangle C) (hT' : T' ‚àà dist_triang C),
    (triangle.shift_functor C (-1 : ‚Ñ§)).obj T' ‚àà dist_triang C,
  { intros T' hT',
    exact pretriangulated.isomorphic_distinguished _ (inv_rot_of_dist_triangle C _
      (inv_rot_of_dist_triangle C _ (inv_rot_of_dist_triangle C _ hT'))) _
      ((triangle.shift_functor_sub_one_iso C).app T'), },
  by_cases 0 ‚â§ n,
  { obtain ‚ü®m, hm‚ü© : ‚àÉ (m : ‚Ñï), n = m := int.eq_coe_of_zero_le h,
    subst hm, clear h,
    induction m with n hn,
    { exact pretriangulated.isomorphic_distinguished _ hT _
        ((triangle.shift_functor_zero C).app T), },
    { refine pretriangulated.isomorphic_distinguished _ _ _
        ((triangle.shift_functor_add C (‚Üën) 1).app T),
      apply hpos,
      apply hn, }, },
  { obtain ‚ü®m, hm‚ü© : ‚àÉ (m : ‚Ñï), n = -(m : ‚Ñ§),
    { obtain ‚ü®k, hk‚ü© := int.eq_coe_of_zero_le (show 0 ‚â§ -n, by linarith),
      exact ‚ü®k, by linarith‚ü©, },
    subst hm, clear h,
    induction m with n hn,
    { exact pretriangulated.isomorphic_distinguished _ hT _
        ((triangle.shift_functor_zero C).app T), },
    { refine pretriangulated.isomorphic_distinguished _ _ _
        (_ ‚â™‚â´ (triangle.shift_functor_add C (-‚Üën) (-1 : ‚Ñ§)).app T),
      { apply hneg,
        apply hn, },
      { refine (triangle.shift_functor_iso_of_eq C _).app _,
        simp only [nat.cast_succ, neg_add_rev, int.add_neg_one],
        linarith, }, }, },
end

example : ‚Ñï := 42

def triangle.shift_functor_comm {C D : Type*} [category C] [category D]
  [preadditive C] [preadditive D] [has_shift C ‚Ñ§] [has_shift D ‚Ñ§] [has_zero_object C] [has_zero_object D]
  [‚àÄ (n : ‚Ñ§), (shift_functor C n).additive] [‚àÄ (n : ‚Ñ§), (shift_functor D n).additive] {F : C ‚•§ D}
  [F.additive]
  (h : F.comm_shift ‚Ñ§) (n : ‚Ñ§) :
  triangle.shift_functor C n ‚ãô (triangulated_functor_struct.mk F (h.iso 1)).map_triangle ‚âÖ
  (triangulated_functor_struct.mk F (h.iso 1)).map_triangle ‚ãô triangle.shift_functor D n :=
begin
  refine nat_iso.of_components (Œª T, triangle.mk_iso _ _ ((h.iso n).app _) ((h.iso n).app _) ((h.iso n).app _) _ _ _)
    (Œª T‚ÇÅ T‚ÇÇ f, _),
  { have eq‚ÇÅ := (h.iso n).hom.naturality T.mor‚ÇÅ,
    dsimp at ‚ä¢ eq‚ÇÅ,
    simp only [F.map_zsmul, zsmul_comp, eq‚ÇÅ, comp_zsmul], },
  { have eq‚ÇÇ := (h.iso n).hom.naturality T.mor‚ÇÇ,
    dsimp at ‚ä¢ eq‚ÇÇ,
    simp only [F.map_zsmul, zsmul_comp, eq‚ÇÇ, comp_zsmul], },
  { have eq‚ÇÉ := (h.iso n).hom.naturality T.mor‚ÇÉ,
    dsimp at ‚ä¢ eq‚ÇÉ,
    simp only [F.map_zsmul, zsmul_comp, comp_zsmul, functor.map_comp, assoc, ‚Üê reassoc_of eq‚ÇÉ,
      h.map_shift_functor_add_comm], },
  { ext; apply (h.iso n).hom.naturality, },
end

end pretriangulated

end category_theory
