import category_theory.triangulated.triangulated
import for_mathlib.category_theory.triangulated.triangulated_functor

noncomputable theory

open category_theory category_theory.category category_theory.limits
open_locale zero_object

namespace set

open category_theory

class respects_iso {X : Type*} [category X] (A : set X) : Prop :=
(condition' : ‚àÄ ‚¶Éx y : X‚¶Ñ (e : x ‚âÖ y) (hx : x ‚àà A), y ‚àà A)

lemma respects_iso.condition {X : Type*} [category X] (A : set X) [A.respects_iso]
  {x y : X} (e : x ‚âÖ y) (hx : x ‚àà A) : y ‚àà A :=
respects_iso.condition' e hx

lemma respects_iso.mem_iff_of_iso {X : Type*} [category X] (A : set X) [A.respects_iso]
  {x y : X} (e : x ‚âÖ y) : x ‚àà A ‚Üî y ‚àà A :=
begin
  split,
  { exact respects_iso.condition A e, },
  { exact respects_iso.condition A e.symm, },
end

end set

namespace category_theory

namespace triangulated

open pretriangulated

variables {C : Type*} [category C] [has_shift C ‚Ñ§] [preadditive C] [has_zero_object C]
  [‚àÄ (n : ‚Ñ§), functor.additive (shift_functor C n)] [pretriangulated C]

variable (S : set C)

class is_triangulated_subcategory : Prop :=
(zero [] : (0 : C) ‚àà S)
(shift : ‚àÄ (X : C) (n : ‚Ñ§) (hX : X ‚àà S), (shift_functor C n).obj X ‚àà S)
(ext‚ÇÇ : ‚àÄ (T : triangle C) (hT : T ‚àà dist_triang C) (h‚ÇÅ : T.obj‚ÇÅ ‚àà S)
  (h‚ÇÉ : T.obj‚ÇÉ ‚àà S), T.obj‚ÇÇ ‚àà S)

namespace is_triangulated_subcategory

variables {S} [is_triangulated_subcategory S]

instance set_respects_iso : S.respects_iso :=
‚ü®Œª X Y e hX, ext‚ÇÇ _ (pretriangulated.isomorphic_distinguished _
  (pretriangulated.contractible_distinguished X) (triangle.mk e.hom (0 : Y ‚ü∂ 0) 0)
  (triangle.mk_iso _ _ (iso.refl _) e.symm (iso.refl _) (by tidy) (by tidy) (by tidy))) hX
  (is_triangulated_subcategory.zero S)‚ü©

lemma ext‚ÇÅ
  (T : triangle C) (hT : T ‚àà dist_triang C) (h‚ÇÇ : T.obj‚ÇÇ ‚àà S) (h‚ÇÉ : T.obj‚ÇÉ ‚àà S) :
  T.obj‚ÇÅ ‚àà S :=
ext‚ÇÇ T.inv_rotate (pretriangulated.inv_rot_of_dist_triangle C T hT)
  (is_triangulated_subcategory.shift _ _ h‚ÇÉ) h‚ÇÇ

lemma ext‚ÇÉ
  (T : triangle C) (hT : T ‚àà dist_triang C) (h‚ÇÅ : T.obj‚ÇÅ ‚àà S) (h‚ÇÇ : T.obj‚ÇÇ ‚àà S) :
  T.obj‚ÇÉ ‚àà S :=
ext‚ÇÇ T.rotate (pretriangulated.rot_of_dist_triangle C T hT) h‚ÇÇ
  (is_triangulated_subcategory.shift _ _ h‚ÇÅ)

lemma shift_iff (X : C) (n : ‚Ñ§) : X ‚àà S ‚Üî (shift_functor C n).obj X ‚àà S :=
begin
  split,
  { intro h,
    exact is_triangulated_subcategory.shift _ _ h, },
  { intro h,
    exact set.respects_iso.condition S
      ((add_neg_equiv (shift_monoidal_functor C ‚Ñ§) n).unit_iso.symm.app X)
      (is_triangulated_subcategory.shift _ _ h), },
end

end is_triangulated_subcategory

class is_triangulated_subcategory' : Prop :=
(zero : ‚àÉ (X : C) (hX‚ÇÄ : is_zero X), X ‚àà S)
(shift : ‚àÄ (X : C) (n : ‚Ñ§) (hX : X ‚àà S), (shift_functor C n).obj X ‚àà S)
(distinguished_cocone_triangle' : ‚àÄ (X Y : C) (hX : X ‚àà S) (hY : Y ‚àà S) (f : X ‚ü∂ Y),
  ‚àÉ (Z : C) (hZ : Z ‚àà S) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß),
    triangle.mk f g h ‚àà dist_triang C)

@[priority 100]
instance is_triangulated_subcategory'_of_is_triangulated_subcategory
  [hS : is_triangulated_subcategory S] :
  is_triangulated_subcategory' S :=
{ zero := ‚ü®0, is_zero_zero _, hS.zero‚ü©,
  shift := hS.shift,
  distinguished_cocone_triangle' := Œª X Y hX hY f, begin
    obtain ‚ü®Z, g, h, mem‚ü© := pretriangulated.distinguished_cocone_triangle _ _ f,
    exact ‚ü®Z, hS.ext‚ÇÇ _ (rot_of_dist_triangle _ _ mem) hY (hS.shift _ 1 hX), g, h, mem‚ü©,
  end, }

namespace is_triangulated_subcategory'

variable [hS : is_triangulated_subcategory' S]

include hS

instance : has_zero_object (full_subcategory S) :=
begin
  obtain ‚ü®X‚ÇÄ, hX‚ÇÄ, mem‚ü© := hS.zero,
  refine ‚ü®‚ü®‚ü®X‚ÇÄ, mem‚ü©, _‚ü©‚ü©,
  rw limits.is_zero.iff_id_eq_zero,
  exact (full_subcategory_inclusion S).map_injective (is_zero.eq_of_src hX‚ÇÄ _ _),
end

instance is_stable_by_shift : S.is_stable_by_shift ‚Ñ§ :=
‚ü®Œª a X hX, hS.shift X a hX‚ü©

instance shift_functor_additive (n : ‚Ñ§) :
  (category_theory.shift_functor (full_subcategory S) n).additive :=
‚ü®begin
  rintros ‚ü®K, hK‚ü© ‚ü®L, hL‚ü© f g,
  exact (full_subcategory_inclusion S).map_injective (category_theory.shift_functor C n).map_add,
end‚ü©

--instance full_subcategory_inclusion_has_comm_shift :
--  (full_subcategory_inclusion S).has_comm_shift ‚Ñ§ := infer_instance

def distinguished_triangles : set (triangle (full_subcategory S)) :=
Œª T, (full_subcategory_inclusion S).map_triangle.obj T ‚àà dist_triang C

lemma isomorphic_distinguished (T‚ÇÅ : triangle (full_subcategory S))
  (hT‚ÇÅ : T‚ÇÅ ‚àà distinguished_triangles S) (T‚ÇÇ : triangle (full_subcategory S)) (e : T‚ÇÇ ‚âÖ T‚ÇÅ) :
  T‚ÇÇ ‚àà distinguished_triangles S :=
pretriangulated.isomorphic_distinguished _ hT‚ÇÅ _ ((full_subcategory_inclusion S).map_triangle.map_iso e)

lemma contractible_distinguished (X : full_subcategory S) :
  triangle.mk (ùüô X) (0 : X ‚ü∂ 0) 0 ‚àà distinguished_triangles S :=
begin
  refine pretriangulated.isomorphic_distinguished _
    (pretriangulated.contractible_distinguished ((full_subcategory_inclusion S).obj X)) _ _,
  refine triangle.mk_iso _ _ (iso.refl _) (iso.refl _)
    (full_subcategory_inclusion S).map_zero_object _ _ _,
  tidy,
end

lemma rotate_distinguished_triangle (T : triangle (full_subcategory S)) :
  T ‚àà distinguished_triangles S ‚Üî
    T.rotate ‚àà distinguished_triangles S :=
begin
  change ((full_subcategory_inclusion S).map_triangle.obj T ‚àà dist_triang C) ‚Üî
    ((full_subcategory_inclusion S).map_triangle.obj T.rotate ‚àà dist_triang C),
  rw pretriangulated.rotate_distinguished_triangle,
  let e := (full_subcategory_inclusion S).map_triangle_rotate.app T,
  split,
  { exact Œª h, pretriangulated.isomorphic_distinguished _ h _ e.symm, },
  { exact Œª h, pretriangulated.isomorphic_distinguished _ h _ e, },
end

lemma distinguished_cocone_triangle (X Y : full_subcategory S) (f : X ‚ü∂ Y) :
  ‚àÉ (Z : full_subcategory S) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ (category_theory.shift_functor _ (1 : ‚Ñ§)).obj X),
    triangle.mk f g h ‚àà distinguished_triangles S :=
begin
  obtain ‚ü®X, hX‚ü© := X,
  obtain ‚ü®Y, hY‚ü© := Y,
  obtain ‚ü®Z, hZ, g, h, mem‚ü© := hS.distinguished_cocone_triangle' _ _ hX hY f,
  refine ‚ü®‚ü®Z, hZ‚ü©, g, h, pretriangulated.isomorphic_distinguished _ mem _ _‚ü©,
  refine triangle.mk_iso _ _ (iso.refl _) (iso.refl _) (iso.refl _) (by tidy) (by tidy) _,
  { dsimp,
    simp only [functor.map_id, comp_id, id_comp],
    apply comp_id, },
end

lemma complete_distinguished_triangle_morphism (T‚ÇÅ T‚ÇÇ : triangle (full_subcategory S))
  (hT‚ÇÅ : T‚ÇÅ ‚àà distinguished_triangles S) (hT‚ÇÇ : T‚ÇÇ ‚àà distinguished_triangles S)
  (a : T‚ÇÅ.obj‚ÇÅ ‚ü∂ T‚ÇÇ.obj‚ÇÅ) (b : T‚ÇÅ.obj‚ÇÇ ‚ü∂ T‚ÇÇ.obj‚ÇÇ) (h : T‚ÇÅ.mor‚ÇÅ ‚â´ b = a ‚â´ T‚ÇÇ.mor‚ÇÅ) :
  ‚àÉ (c : T‚ÇÅ.obj‚ÇÉ ‚ü∂ T‚ÇÇ.obj‚ÇÉ), T‚ÇÅ.mor‚ÇÇ ‚â´ c = b ‚â´ T‚ÇÇ.mor‚ÇÇ ‚àß T‚ÇÅ.mor‚ÇÉ ‚â´
    (category_theory.shift_functor _ 1).map a = c ‚â´ T‚ÇÇ.mor‚ÇÉ :=
begin
  obtain ‚ü®c, ‚ü®hc‚ÇÅ, hc‚ÇÇ‚ü©‚ü© := pretriangulated.complete_distinguished_triangle_morphism
    ((full_subcategory_inclusion S).map_triangle.obj T‚ÇÅ)
      ((full_subcategory_inclusion S).map_triangle.obj T‚ÇÇ)
    hT‚ÇÅ hT‚ÇÇ a b h,
  refine ‚ü®c, ‚ü®hc‚ÇÅ, _‚ü©‚ü©,
  dsimp at hc‚ÇÇ,
  erw [comp_id, comp_id] at hc‚ÇÇ,
  exact hc‚ÇÇ,
end

instance : pretriangulated (full_subcategory S) :=
{ distinguished_triangles := distinguished_triangles S,
  isomorphic_distinguished := isomorphic_distinguished S,
  contractible_distinguished := contractible_distinguished S,
  distinguished_cocone_triangle := distinguished_cocone_triangle S,
  rotate_distinguished_triangle := rotate_distinguished_triangle S,
  complete_distinguished_triangle_morphism := complete_distinguished_triangle_morphism S, }

instance [is_triangulated C] : is_triangulated (full_subcategory S) :=
‚ü®Œª X‚ÇÅ X‚ÇÇ X‚ÇÉ Z‚ÇÅ‚ÇÇ Z‚ÇÇ‚ÇÉ Z‚ÇÅ‚ÇÉ u‚ÇÅ‚ÇÇ u‚ÇÇ‚ÇÉ u‚ÇÅ‚ÇÉ comm v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ h‚ÇÅ‚ÇÉ, begin
  have comm' := (full_subcategory_inclusion S).congr_map comm,
  rw [functor.map_comp] at comm',
  have H := (is_triangulated.octahedron_axiom comm' h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ).some,
  obtain ‚ü®m‚ÇÅ, m‚ÇÉ, comm‚ÇÅ, comm‚ÇÇ, comm‚ÇÉ, comm‚ÇÑ, H'‚ü© := H,
  refine nonempty.intro
  { m‚ÇÅ := m‚ÇÅ,
    m‚ÇÉ := m‚ÇÉ,
    comm‚ÇÅ := comm‚ÇÅ,
    comm‚ÇÇ := begin
      erw [comp_id, comp_id] at comm‚ÇÇ,
      exact comm‚ÇÇ,
    end,
    comm‚ÇÉ := comm‚ÇÉ,
    comm‚ÇÑ := begin
      erw [comp_id, comp_id] at comm‚ÇÑ,
      exact comm‚ÇÑ,
    end,
    mem := begin
      change _ ‚àà dist_triang C,
      refine pretriangulated.isomorphic_distinguished _ H' _ _,
      refine triangle.mk_iso _ _ (iso.refl _) (iso.refl _) (iso.refl _) _ _ _,
      { dsimp,
        simp, },
      { dsimp,
        simp, },
      { dsimp,
        erw [functor.map_id, comp_id, comp_id, id_comp, comp_id],
        refl, },
    end, }
end‚ü©

instance full_subcategory_inclusion_is_triangulated :
  (full_subcategory_inclusion S).is_triangulated :=
{ map_distinguished' := Œª T hT, hT, }

end is_triangulated_subcategory'

class saturated [is_triangulated_subcategory S] : Prop :=
(condition : ‚àÄ ‚¶ÉX Y : C‚¶Ñ (i : Y ‚ü∂ X) [hi : is_split_mono i] (hX : X ‚àà S), Y ‚àà S)

def left_orthogonal : set C :=
Œª X, ‚àÄ ‚¶ÉY : C‚¶Ñ (f : X ‚ü∂ Y) (hY : Y ‚àà S), f = 0

def right_orthogonal : set C :=
Œª Y, ‚àÄ ‚¶ÉX : C‚¶Ñ (f : X ‚ü∂ Y) (hX : X ‚àà S), f = 0

instance [S.is_stable_by_shift ‚Ñ§] :
  is_triangulated_subcategory (left_orthogonal S) :=
{ zero := Œª Y hY f, subsingleton.elim _ _,
  shift := Œª X n hX Y f hY, begin
    let adj : shift_functor C n ‚ä£ shift_functor C (-n) :=
      (add_neg_equiv (shift_monoidal_functor C ‚Ñ§) n).to_adjunction,
    apply (adj.hom_equiv _ _).injective,
    simp only [adjunction.hom_equiv_unit, functor.map_zero, comp_zero],
    exact hX _ (set.is_stable_by_shift.condition (-n) Y hY),
  end,
  ext‚ÇÇ := Œª T hT h‚ÇÅ h‚ÇÉ Y f hY, begin
    obtain ‚ü®g, hg‚ü© := contravariant_yoneda_exact‚ÇÇ T hT f (h‚ÇÅ _ hY),
    rw [hg, h‚ÇÉ g hY, comp_zero],
  end, }

instance [S.is_stable_by_shift ‚Ñ§] :
  is_triangulated_subcategory (right_orthogonal S) :=
{ zero := Œª X hX f, subsingleton.elim _ _,
  shift := Œª Y n hY X f hX, begin
    let adj : shift_functor C (-n) ‚ä£ shift_functor C n :=
      (add_neg_equiv (shift_monoidal_functor C ‚Ñ§) n).symm.to_adjunction,
    apply (adj.hom_equiv _ _).symm.injective,
    simp only [adjunction.hom_equiv_counit, functor.map_zero, zero_comp],
    exact hY _ (set.is_stable_by_shift.condition (-n) X hX),
  end,
  ext‚ÇÇ := Œª T hT h‚ÇÅ h‚ÇÉ X f hX, begin
    obtain ‚ü®g, hg‚ü© := covariant_yoneda_exact‚ÇÇ T hT f (h‚ÇÉ _ hX),
    rw [hg, h‚ÇÅ g hX, zero_comp],
  end, }

instance left_orthogonal_saturated [S.is_stable_by_shift ‚Ñ§] :
  saturated (left_orthogonal S) :=
‚ü®Œª X Y i hi hX Z f hZ, begin
  haveI := hi,
  rw [‚Üê cancel_epi (retraction i), comp_zero],
  exact hX _ hZ,
end‚ü©

instance right_orthogonal_saturated [S.is_stable_by_shift ‚Ñ§] :
  saturated (right_orthogonal S) :=
‚ü®Œª X Y i hi hX Z f hZ, begin
  haveI := hi,
  rw [‚Üê cancel_mono i, zero_comp],
  exact hX _ hZ,
end‚ü©

end triangulated

end category_theory
