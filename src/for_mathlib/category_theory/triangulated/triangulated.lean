import for_mathlib.category_theory.triangulated.yoneda
import for_mathlib.category_theory.triangulated.triangles

noncomputable theory

namespace category_theory

open limits category preadditive triangulated
open_locale zero_object

variables {C : Type*} [category C] [preadditive C] [has_zero_object C] [has_shift C ‚Ñ§]
  [‚àÄ (n : ‚Ñ§), functor.additive (shift_functor C n)] [pretriangulated C]

namespace triangulated

section

variables {X‚ÇÅ X‚ÇÇ X‚ÇÉ Z‚ÇÅ‚ÇÇ Z‚ÇÇ‚ÇÉ Z‚ÇÅ‚ÇÉ : C} {u‚ÇÅ‚ÇÇ : X‚ÇÅ ‚ü∂ X‚ÇÇ} {u‚ÇÇ‚ÇÉ : X‚ÇÇ ‚ü∂ X‚ÇÉ} {u‚ÇÅ‚ÇÉ : X‚ÇÅ ‚ü∂ X‚ÇÉ}
  (comm : u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ = u‚ÇÅ‚ÇÉ)
  {v‚ÇÅ‚ÇÇ : X‚ÇÇ ‚ü∂ Z‚ÇÅ‚ÇÇ} {w‚ÇÅ‚ÇÇ : Z‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß} (h‚ÇÅ‚ÇÇ : triangle.mk C u‚ÇÅ‚ÇÇ v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ ‚àà dist_triang C)
  {v‚ÇÇ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ} {w‚ÇÇ‚ÇÉ : Z‚ÇÇ‚ÇÉ ‚ü∂ X‚ÇÇ‚ü¶(1 : ‚Ñ§)‚üß} (h‚ÇÇ‚ÇÉ : triangle.mk C u‚ÇÇ‚ÇÉ v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ ‚àà dist_triang C)
  {v‚ÇÅ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÅ‚ÇÉ} {w‚ÇÅ‚ÇÉ : Z‚ÇÅ‚ÇÉ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß} (h‚ÇÅ‚ÇÉ : triangle.mk C u‚ÇÅ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ ‚àà dist_triang C)

include comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ

def octahedron_exists : Prop :=
‚àÉ (m‚ÇÅ : Z‚ÇÅ‚ÇÇ ‚ü∂ Z‚ÇÅ‚ÇÉ) (m‚ÇÉ : Z‚ÇÅ‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ) (comm‚ÇÅ : v‚ÇÅ‚ÇÇ ‚â´ m‚ÇÅ = u‚ÇÇ‚ÇÉ ‚â´ v‚ÇÅ‚ÇÉ)
    (comm‚ÇÇ : w‚ÇÅ‚ÇÇ = m‚ÇÅ ‚â´ w‚ÇÅ‚ÇÉ) (comm‚ÇÉ : v‚ÇÅ‚ÇÉ ‚â´ m‚ÇÉ = v‚ÇÇ‚ÇÉ) (comm‚ÇÑ : w‚ÇÅ‚ÇÉ ‚â´ u‚ÇÅ‚ÇÇ‚ü¶1‚üß' = m‚ÇÉ ‚â´ w‚ÇÇ‚ÇÉ),
    triangle.mk C m‚ÇÅ m‚ÇÉ (w‚ÇÇ‚ÇÉ ‚â´ v‚ÇÅ‚ÇÇ‚ü¶1‚üß') ‚àà dist_triang C

namespace octahedron_exists

variables {comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ} (h : octahedron_exists comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ)

def m‚ÇÅ : Z‚ÇÅ‚ÇÇ ‚ü∂ Z‚ÇÅ‚ÇÉ := h.some
def m‚ÇÉ : Z‚ÇÅ‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ := h.some_spec.some

@[simps]
def triangle : triangle C :=
triangle.mk C h.m‚ÇÅ h.m‚ÇÉ (w‚ÇÇ‚ÇÉ ‚â´ v‚ÇÅ‚ÇÇ‚ü¶1‚üß')

lemma triangle_distinguished : h.triangle ‚àà dist_triang C :=
h.some_spec.some_spec.some_spec.some_spec.some_spec.some_spec

@[simps]
def triangle_morphism‚ÇÅ : triangle.mk C u‚ÇÅ‚ÇÇ v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ ‚ü∂ triangle.mk C u‚ÇÅ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ :=
{ hom‚ÇÅ := ùüô X‚ÇÅ,
  hom‚ÇÇ := u‚ÇÇ‚ÇÉ,
  hom‚ÇÉ := h.m‚ÇÅ,
  comm‚ÇÅ' := by { dsimp, rw [id_comp, comm], },
  comm‚ÇÇ' := h.some_spec.some_spec.some,
  comm‚ÇÉ' := begin
    dsimp,
    simpa only [functor.map_id, comp_id]
      using h.some_spec.some_spec.some_spec.some,
  end }

@[simps]
def triangle_morphism‚ÇÇ : triangle.mk C u‚ÇÅ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ ‚ü∂ triangle.mk C u‚ÇÇ‚ÇÉ v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ :=
{ hom‚ÇÅ := u‚ÇÅ‚ÇÇ,
  hom‚ÇÇ := ùüô X‚ÇÉ,
  hom‚ÇÉ := h.m‚ÇÉ,
  comm‚ÇÅ' := by { dsimp, rw [comp_id, comm], },
  comm‚ÇÇ' := begin
    dsimp,
    simpa only [id_comp] using
      h.some_spec.some_spec.some_spec.some_spec.some,
  end,
  comm‚ÇÉ' := h.some_spec.some_spec.some_spec.some_spec.some_spec.some, }

variables (u‚ÇÅ‚ÇÇ u‚ÇÇ‚ÇÉ u‚ÇÅ‚ÇÉ comm)

lemma mk {X‚ÇÅ' X‚ÇÇ' X‚ÇÉ' Z‚ÇÅ‚ÇÇ' Z‚ÇÇ‚ÇÉ' Z‚ÇÅ‚ÇÉ' : C} (u‚ÇÅ‚ÇÇ' : X‚ÇÅ' ‚ü∂ X‚ÇÇ') (u‚ÇÇ‚ÇÉ' : X‚ÇÇ' ‚ü∂ X‚ÇÉ')
  (e‚ÇÅ : X‚ÇÅ ‚âÖ X‚ÇÅ') (e‚ÇÇ : X‚ÇÇ ‚âÖ X‚ÇÇ')(e‚ÇÉ : X‚ÇÉ ‚âÖ X‚ÇÉ')
  (comm‚ÇÅ‚ÇÇ : u‚ÇÅ‚ÇÇ ‚â´ e‚ÇÇ.hom = e‚ÇÅ.hom ‚â´ u‚ÇÅ‚ÇÇ') (comm‚ÇÇ‚ÇÉ : u‚ÇÇ‚ÇÉ ‚â´ e‚ÇÉ.hom = e‚ÇÇ.hom ‚â´ u‚ÇÇ‚ÇÉ')
  (v‚ÇÅ‚ÇÇ' : X‚ÇÇ' ‚ü∂ Z‚ÇÅ‚ÇÇ') (w‚ÇÅ‚ÇÇ' : Z‚ÇÅ‚ÇÇ' ‚ü∂ X‚ÇÅ'‚ü¶(1 : ‚Ñ§)‚üß)
  (h‚ÇÅ‚ÇÇ' : triangle.mk C u‚ÇÅ‚ÇÇ' v‚ÇÅ‚ÇÇ' w‚ÇÅ‚ÇÇ' ‚àà dist_triang C)
  (v‚ÇÇ‚ÇÉ' : X‚ÇÉ' ‚ü∂ Z‚ÇÇ‚ÇÉ') (w‚ÇÇ‚ÇÉ' : Z‚ÇÇ‚ÇÉ' ‚ü∂ X‚ÇÇ'‚ü¶(1 : ‚Ñ§)‚üß)
  (h‚ÇÇ‚ÇÉ' : triangle.mk C u‚ÇÇ‚ÇÉ' v‚ÇÇ‚ÇÉ' w‚ÇÇ‚ÇÉ' ‚àà dist_triang C)
  (v‚ÇÅ‚ÇÉ' : X‚ÇÉ' ‚ü∂ Z‚ÇÅ‚ÇÉ') (w‚ÇÅ‚ÇÉ' : Z‚ÇÅ‚ÇÉ' ‚ü∂ X‚ÇÅ'‚ü¶(1 : ‚Ñ§)‚üß)
  (h‚ÇÅ‚ÇÉ' : triangle.mk C (u‚ÇÅ‚ÇÇ' ‚â´ u‚ÇÇ‚ÇÉ') v‚ÇÅ‚ÇÉ' w‚ÇÅ‚ÇÉ' ‚àà dist_triang C)
  (H : octahedron_exists rfl h‚ÇÅ‚ÇÇ' h‚ÇÇ‚ÇÉ' h‚ÇÅ‚ÇÉ') : octahedron_exists comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ :=
begin
  let iso‚ÇÅ‚ÇÇ := iso_triangle_of_distinguished_of_is_iso‚ÇÅ‚ÇÇ _ _ h‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ' e‚ÇÅ e‚ÇÇ comm‚ÇÅ‚ÇÇ,
  let iso‚ÇÇ‚ÇÉ := iso_triangle_of_distinguished_of_is_iso‚ÇÅ‚ÇÇ _ _ h‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ' e‚ÇÇ e‚ÇÉ comm‚ÇÇ‚ÇÉ,
  let iso‚ÇÅ‚ÇÉ := iso_triangle_of_distinguished_of_is_iso‚ÇÅ‚ÇÇ _ _ h‚ÇÅ‚ÇÉ h‚ÇÅ‚ÇÉ' e‚ÇÅ e‚ÇÉ
    (by { dsimp, simp only [‚Üê comm, assoc, comm‚ÇÇ‚ÇÉ, reassoc_of comm‚ÇÅ‚ÇÇ], }),
  have eq‚ÇÅ‚ÇÇ := iso‚ÇÅ‚ÇÇ.hom.comm‚ÇÇ,
  have eq‚ÇÅ‚ÇÇ' := iso‚ÇÅ‚ÇÇ.hom.comm‚ÇÉ,
  have eq‚ÇÅ‚ÇÉ := iso‚ÇÅ‚ÇÉ.hom.comm‚ÇÇ,
  have eq‚ÇÅ‚ÇÉ' := iso‚ÇÅ‚ÇÉ.hom.comm‚ÇÉ,
  have eq‚ÇÇ‚ÇÉ := iso‚ÇÇ‚ÇÉ.hom.comm‚ÇÇ,
  have eq‚ÇÇ‚ÇÉ' := iso‚ÇÇ‚ÇÉ.hom.comm‚ÇÉ,
  have rel‚ÇÅ‚ÇÇ := H.triangle_morphism‚ÇÅ.comm‚ÇÇ,
  have rel‚ÇÅ‚ÇÉ := H.triangle_morphism‚ÇÅ.comm‚ÇÉ,
  have rel‚ÇÇ‚ÇÇ := H.triangle_morphism‚ÇÇ.comm‚ÇÇ,
  have rel‚ÇÇ‚ÇÉ := H.triangle_morphism‚ÇÇ.comm‚ÇÉ,
  dsimp at eq‚ÇÅ‚ÇÇ eq‚ÇÅ‚ÇÇ' eq‚ÇÅ‚ÇÉ eq‚ÇÅ‚ÇÉ' eq‚ÇÇ‚ÇÉ eq‚ÇÇ‚ÇÉ' rel‚ÇÅ‚ÇÇ rel‚ÇÅ‚ÇÉ rel‚ÇÇ‚ÇÇ rel‚ÇÇ‚ÇÉ,
  rw [functor.map_id, comp_id] at rel‚ÇÅ‚ÇÉ,
  rw id_comp at rel‚ÇÇ‚ÇÇ,
  refine ‚ü®iso‚ÇÅ‚ÇÇ.hom.hom‚ÇÉ ‚â´ H.m‚ÇÅ ‚â´ iso‚ÇÅ‚ÇÉ.inv.hom‚ÇÉ,
    iso‚ÇÅ‚ÇÉ.hom.hom‚ÇÉ ‚â´ H.m‚ÇÉ ‚â´ iso‚ÇÇ‚ÇÉ.inv.hom‚ÇÉ, _, _, _, _, _‚ü©,
  { simp only [reassoc_of eq‚ÇÅ‚ÇÇ, ‚Üê cancel_mono iso‚ÇÅ‚ÇÉ.hom.hom‚ÇÉ, assoc,
      iso‚ÇÅ‚ÇÉ.triangle_inv_hom_id‚ÇÉ, eq‚ÇÅ‚ÇÉ, reassoc_of comm‚ÇÇ‚ÇÉ, ‚Üê rel‚ÇÅ‚ÇÇ],
    dsimp,
    rw comp_id, },
  { rw [‚Üê cancel_mono ((shift_functor C (1 : ‚Ñ§)).map e‚ÇÅ.hom), eq‚ÇÅ‚ÇÇ', assoc, assoc, assoc, eq‚ÇÅ‚ÇÉ',
      iso‚ÇÅ‚ÇÉ.triangle_inv_hom_id‚ÇÉ_assoc, ‚Üê rel‚ÇÅ‚ÇÉ], },
  { rw [reassoc_of eq‚ÇÅ‚ÇÉ, reassoc_of rel‚ÇÇ‚ÇÇ, ‚Üê cancel_mono iso‚ÇÇ‚ÇÉ.hom.hom‚ÇÉ, assoc, assoc,
      iso‚ÇÇ‚ÇÉ.triangle_inv_hom_id‚ÇÉ, eq‚ÇÇ‚ÇÉ],
    dsimp,
    rw comp_id, },
  { rw [‚Üê cancel_mono ((shift_functor C (1 : ‚Ñ§)).map e‚ÇÇ.hom), assoc, assoc, assoc, assoc, eq‚ÇÇ‚ÇÉ',
      iso‚ÇÇ‚ÇÉ.triangle_inv_hom_id‚ÇÉ_assoc, ‚Üê rel‚ÇÇ‚ÇÉ, ‚Üê functor.map_comp, comm‚ÇÅ‚ÇÇ, functor.map_comp,
      reassoc_of eq‚ÇÅ‚ÇÉ'], },
  { refine pretriangulated.isomorphic_distinguished _ H.triangle_distinguished _ _,
    refine triangle.mk_iso _ _ iso‚ÇÅ‚ÇÇ.triangle_eval‚ÇÉ iso‚ÇÅ‚ÇÉ.triangle_eval‚ÇÉ iso‚ÇÇ‚ÇÉ.triangle_eval‚ÇÉ
      _ _ _ ,
    { dsimp, erw [assoc, assoc, iso.triangle_inv_hom_id‚ÇÉ, comp_id], },
    { dsimp, erw [assoc, assoc, iso.triangle_inv_hom_id‚ÇÉ, comp_id], },
    { dsimp, erw [assoc, ‚Üê functor.map_comp, eq‚ÇÅ‚ÇÇ, functor.map_comp, reassoc_of eq‚ÇÇ‚ÇÉ'], }, },
end

end octahedron_exists

end

end triangulated

variable (C)

class triangulated :=
(octahedron' : ‚àÄ ‚¶ÉX‚ÇÅ X‚ÇÇ X‚ÇÉ Z‚ÇÅ‚ÇÇ Z‚ÇÇ‚ÇÉ Z‚ÇÅ‚ÇÉ : C‚¶Ñ ‚¶Éu‚ÇÅ‚ÇÇ : X‚ÇÅ ‚ü∂ X‚ÇÇ‚¶Ñ ‚¶Éu‚ÇÇ‚ÇÉ : X‚ÇÇ ‚ü∂ X‚ÇÉ‚¶Ñ ‚¶Éu‚ÇÅ‚ÇÉ : X‚ÇÅ ‚ü∂ X‚ÇÉ‚¶Ñ
  (comm : u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ = u‚ÇÅ‚ÇÉ)
  ‚¶Év‚ÇÅ‚ÇÇ : X‚ÇÇ ‚ü∂ Z‚ÇÅ‚ÇÇ‚¶Ñ ‚¶Éw‚ÇÅ‚ÇÇ : Z‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÅ‚ü¶1‚üß‚¶Ñ (h‚ÇÅ‚ÇÇ : triangle.mk C u‚ÇÅ‚ÇÇ v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ ‚àà dist_triang C)
  ‚¶Év‚ÇÇ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ‚¶Ñ ‚¶Éw‚ÇÇ‚ÇÉ : Z‚ÇÇ‚ÇÉ ‚ü∂ X‚ÇÇ‚ü¶1‚üß‚¶Ñ (h‚ÇÇ‚ÇÉ : triangle.mk C u‚ÇÇ‚ÇÉ v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ ‚àà dist_triang C)
  ‚¶Év‚ÇÅ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÅ‚ÇÉ‚¶Ñ ‚¶Éw‚ÇÅ‚ÇÉ : Z‚ÇÅ‚ÇÉ ‚ü∂ X‚ÇÅ‚ü¶1‚üß‚¶Ñ (h‚ÇÅ‚ÇÉ : triangle.mk C u‚ÇÅ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ ‚àà dist_triang C),
  triangulated.octahedron_exists comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ)

variable {C}

namespace triangulated

lemma mk' (h : ‚àÄ ‚¶ÉX‚ÇÅ' X‚ÇÇ' X‚ÇÉ' : C‚¶Ñ (u‚ÇÅ‚ÇÇ' : X‚ÇÅ' ‚ü∂ X‚ÇÇ') (u‚ÇÇ‚ÇÉ' : X‚ÇÇ' ‚ü∂ X‚ÇÉ'),
  ‚àÉ (X‚ÇÅ X‚ÇÇ X‚ÇÉ Z‚ÇÅ‚ÇÇ Z‚ÇÇ‚ÇÉ Z‚ÇÅ‚ÇÉ : C) (u‚ÇÅ‚ÇÇ : X‚ÇÅ ‚ü∂ X‚ÇÇ) (u‚ÇÇ‚ÇÉ : X‚ÇÇ ‚ü∂ X‚ÇÉ) (e‚ÇÅ : X‚ÇÅ' ‚âÖ X‚ÇÅ) (e‚ÇÇ : X‚ÇÇ' ‚âÖ X‚ÇÇ)
    (e‚ÇÉ : X‚ÇÉ' ‚âÖ X‚ÇÉ) (comm‚ÇÅ‚ÇÇ : u‚ÇÅ‚ÇÇ' ‚â´ e‚ÇÇ.hom = e‚ÇÅ.hom ‚â´ u‚ÇÅ‚ÇÇ)
    (comm‚ÇÇ‚ÇÉ : u‚ÇÇ‚ÇÉ' ‚â´ e‚ÇÉ.hom = e‚ÇÇ.hom ‚â´ u‚ÇÇ‚ÇÉ)
    (v‚ÇÅ‚ÇÇ : X‚ÇÇ ‚ü∂ Z‚ÇÅ‚ÇÇ) (w‚ÇÅ‚ÇÇ : Z‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÅ‚ü¶1‚üß) (h‚ÇÅ‚ÇÇ : triangle.mk C u‚ÇÅ‚ÇÇ v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ ‚àà dist_triang C)
    (v‚ÇÇ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ) (w‚ÇÇ‚ÇÉ : Z‚ÇÇ‚ÇÉ ‚ü∂ X‚ÇÇ‚ü¶1‚üß) (h‚ÇÇ‚ÇÉ : triangle.mk C u‚ÇÇ‚ÇÉ v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ ‚àà dist_triang C)
    (v‚ÇÅ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÅ‚ÇÉ) (w‚ÇÅ‚ÇÉ : Z‚ÇÅ‚ÇÉ ‚ü∂ X‚ÇÅ‚ü¶1‚üß)
      (h‚ÇÅ‚ÇÉ : triangle.mk C (u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ) v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ ‚àà dist_triang C),
      octahedron_exists rfl h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ) : triangulated C :=
‚ü®Œª X‚ÇÅ' X‚ÇÇ' X‚ÇÉ' Z‚ÇÅ‚ÇÇ' Z‚ÇÇ‚ÇÉ' Z‚ÇÅ‚ÇÉ' u‚ÇÅ‚ÇÇ' u‚ÇÇ‚ÇÉ' u‚ÇÅ‚ÇÉ' comm' v‚ÇÅ‚ÇÇ' w‚ÇÅ‚ÇÇ' h‚ÇÅ‚ÇÇ' v‚ÇÇ‚ÇÉ' w‚ÇÇ‚ÇÉ' h‚ÇÇ‚ÇÉ'
  v‚ÇÅ‚ÇÉ' w‚ÇÅ‚ÇÉ' h‚ÇÅ‚ÇÉ', begin
  obtain ‚ü®X‚ÇÅ, X‚ÇÇ, X‚ÇÉ, Z‚ÇÅ‚ÇÇ, Z‚ÇÇ‚ÇÉ, Z‚ÇÅ‚ÇÉ, u‚ÇÅ‚ÇÇ, u‚ÇÇ‚ÇÉ, e‚ÇÅ, e‚ÇÇ, e‚ÇÉ, comm‚ÇÅ‚ÇÇ, comm‚ÇÇ‚ÇÉ,
    v‚ÇÅ‚ÇÇ, w‚ÇÅ‚ÇÇ, h‚ÇÅ‚ÇÇ, v‚ÇÇ‚ÇÉ, w‚ÇÇ‚ÇÉ, h‚ÇÇ‚ÇÉ, v‚ÇÅ‚ÇÉ, w‚ÇÅ‚ÇÉ, h‚ÇÅ‚ÇÉ, H‚ü© := h u‚ÇÅ‚ÇÇ' u‚ÇÇ‚ÇÉ',
  exact octahedron_exists.mk _ _ _ _ u‚ÇÅ‚ÇÇ u‚ÇÇ‚ÇÉ e‚ÇÅ e‚ÇÇ e‚ÇÉ comm‚ÇÅ‚ÇÇ comm‚ÇÇ‚ÇÉ v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ
    v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ h‚ÇÅ‚ÇÉ H,
end‚ü©

variable [triangulated C]

restate_axiom octahedron'

namespace octahedron

variables {X‚ÇÅ X‚ÇÇ X‚ÇÉ Z‚ÇÅ‚ÇÇ Z‚ÇÇ‚ÇÉ Z‚ÇÅ‚ÇÉ : C} {u‚ÇÅ‚ÇÇ : X‚ÇÅ ‚ü∂ X‚ÇÇ} {u‚ÇÇ‚ÇÉ : X‚ÇÇ ‚ü∂ X‚ÇÉ} {u‚ÇÅ‚ÇÉ : X‚ÇÅ ‚ü∂ X‚ÇÉ}
  (comm : u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ = u‚ÇÅ‚ÇÉ)
  {v‚ÇÅ‚ÇÇ : X‚ÇÇ ‚ü∂ Z‚ÇÅ‚ÇÇ} {w‚ÇÅ‚ÇÇ : Z‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß} (h‚ÇÅ‚ÇÇ : triangle.mk C u‚ÇÅ‚ÇÇ v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ ‚àà dist_triang C)
  {v‚ÇÇ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ} {w‚ÇÇ‚ÇÉ : Z‚ÇÇ‚ÇÉ ‚ü∂ X‚ÇÇ‚ü¶(1 : ‚Ñ§)‚üß} (h‚ÇÇ‚ÇÉ : triangle.mk C u‚ÇÇ‚ÇÉ v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ ‚àà dist_triang C)
  {v‚ÇÅ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÅ‚ÇÉ} {w‚ÇÅ‚ÇÉ : Z‚ÇÅ‚ÇÉ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß} (h‚ÇÅ‚ÇÉ : triangle.mk C u‚ÇÅ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ ‚àà dist_triang C)

include comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ

def m‚ÇÅ : Z‚ÇÅ‚ÇÇ ‚ü∂ Z‚ÇÅ‚ÇÉ := (octahedron comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ).m‚ÇÅ
def m‚ÇÉ : Z‚ÇÅ‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ := (octahedron comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ).m‚ÇÉ

@[simps]
def triangle : triangle C := (octahedron comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ).triangle

lemma triangle_distinguished : triangle comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ ‚àà dist_triang C :=
(octahedron comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ).triangle_distinguished

@[simps]
def triangle_morphism‚ÇÅ : triangle.mk C u‚ÇÅ‚ÇÇ v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ ‚ü∂ triangle.mk C u‚ÇÅ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ :=
(octahedron comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ).triangle_morphism‚ÇÅ

@[simps]
def triangle_morphism‚ÇÇ : triangle.mk C u‚ÇÅ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ ‚ü∂ triangle.mk C u‚ÇÇ‚ÇÉ v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ :=
(octahedron comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ).triangle_morphism‚ÇÇ

end octahedron

end triangulated

end category_theory
