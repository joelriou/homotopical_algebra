import for_mathlib.category_theory.triangulated.pretriangulated_misc
import algebra.homology.exact
import for_mathlib.category_theory.localization.triangulated_subcategory

namespace category_theory

open limits category pretriangulated

/-- should be moved to algebra.homology.exact -/
def short_complex.exact.is_zero_of_both_zeros {C : Type*} [category C] [has_zero_morphisms C]
  {S : short_complex C} (ex : S.exact) (h‚ÇÅ : S.f = 0) (h‚ÇÇ : S.g = 0) : is_zero S.X‚ÇÇ :=
(short_complex.homology_data.of_zeros S h‚ÇÅ h‚ÇÇ).exact_iff.1 ex

variables {C D : Type*} [category C] [category D] [has_zero_object C] [has_shift C ‚Ñ§]
  [preadditive C] [‚àÄ (n : ‚Ñ§), (shift_functor C n).additive] [pretriangulated C]
  [abelian D] (F : C ‚•§ D) [functor.additive F]

def pretriangulated.triangle.short_complex (T : pretriangulated.triangle C)
  (hT : T ‚àà dist_triang C) : short_complex C :=
  short_complex.mk T.mor‚ÇÅ T.mor‚ÇÇ (pretriangulated.triangle.comp_zero‚ÇÅ‚ÇÇ _ hT)

namespace functor

@[protected]
class is_homological : Prop :=
(map_distinguished [] : ‚àÄ (T : pretriangulated.triangle C) (hT : T ‚àà dist_triang C),
    ((T.short_complex hT).map F).exact)

namespace is_homological

variable {F}

lemma of_iso {G : C ‚•§ D} [additive G] (e : G ‚âÖ F) [F.is_homological] :
  G.is_homological :=
is_homological.mk (Œª T hT, (short_complex.exact_iff_of_iso
  (short_complex.map_nat_iso _ e)).2 (is_homological.map_distinguished F T hT))

end is_homological

def kernel_of_is_homological [F.is_homological] : triangulated.subcategory C :=
{ set := Œª K, ‚àÄ (n : ‚Ñ§), limits.is_zero (F.obj (K‚ü¶n‚üß)),
  zero := Œª n, limits.is_zero.of_iso (is_zero_zero D)
    (F.map_iso (shift_functor C n).map_zero_object ‚â™‚â´ F.map_zero_object),
  shift := Œª K m hK n, limits.is_zero.of_iso (hK (m+n))
    (F.map_iso ((shift_functor_add C m n).app K).symm),
  ext‚ÇÇ := Œª T hT h‚ÇÅ h‚ÇÉ n, (is_homological.map_distinguished F _
    (triangle.shift_distinguished _ T hT n)).is_zero_of_both_zeros
    (is_zero.eq_of_src (h‚ÇÅ _) _ _) (is_zero.eq_of_tgt (h‚ÇÉ _) _ _), }

instance kernel_of_is_homological_saturated [F.is_homological] : F.kernel_of_is_homological.saturated :=
‚ü®Œª L K i, begin
  introI,
  intros hL n,
  replace hL := hL n,
  rw limits.is_zero.iff_id_eq_zero at ‚ä¢ hL,
  have eq : ùüô _ = i ‚â´ ùüô _ ‚â´ retraction i := by simp only [id_comp, is_split_mono.id],
  replace eq := (shift_functor C n ‚ãô F).congr_map eq,
  dsimp only [functor.comp_map] at eq,
  simpa only [functor.map_comp, functor.map_id, hL, zero_comp, comp_zero] using eq,
end‚ü©

def W_of_is_homological [F.is_homological] : morphism_property C :=
Œª X Y f, ‚àÄ (n : ‚Ñ§), is_iso (F.map (f‚ü¶n‚üß'))

lemma kernel_of_is_homological_W [F.is_homological] :
  F.kernel_of_is_homological.W = F.W_of_is_homological :=
begin
  ext X Y f,
  split,
  { sorry, },
  { sorry, },
end

end functor

end category_theory
