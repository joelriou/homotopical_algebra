import category_theory.triangulated.pretriangulated
import for_mathlib.category_theory.localization.triangulated

namespace category_theory

open limits category
open_locale zero_object

namespace triangulated

open pretriangulated

variables {C : Type*} [category C] [preadditive C] [has_zero_object C] [has_shift C ‚Ñ§]
  [‚àÄ (n : ‚Ñ§), functor.additive (shift_functor C n)] [pretriangulated C]

lemma pretriangulated.distinguished_cocone_triangle‚ÇÇ {Z X : C} (h : Z ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß) :
  ‚àÉ (Y : C) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z), triangle.mk C f g h ‚àà dist_triang C :=
begin
  obtain ‚ü®Y', f', g', mem‚ü© := pretriangulated.distinguished_cocone_triangle _ _ h,
  let T := triangle.mk C h f' g',
  change T ‚àà dist_triang C at mem,
  let T' := T.inv_rotate.inv_rotate,
  let e‚ÇÅ := (shift_functor_comp_shift_functor_neg C (1 : ‚Ñ§)).app X,
  let e‚ÇÇ := (shift_functor_neg_comp_shift_functor C (1 : ‚Ñ§)).app ((shift_functor C (1 : ‚Ñ§)).obj X),
  let T'' := triangle.mk C (e‚ÇÅ.inv ‚â´ T'.mor‚ÇÅ) T'.mor‚ÇÇ (T'.mor‚ÇÉ ‚â´ e‚ÇÇ.hom),
  let e‚ÇÉ : T' ‚âÖ T'' := begin
    dsimp only [T', T'', triangle.mk],
    refine triangle.mk_iso _ _ e‚ÇÅ (iso.refl _) (iso.refl _) _ _ _,
    { dsimp only [iso.refl],
      rw [comp_id, e‚ÇÅ.hom_inv_id_assoc], },
    { dsimp only [iso.refl],
      rw [comp_id, id_comp], },
    { dsimp only [iso.refl],
      rw id_comp,
      congr' 1,
      have h : (shift_functor C 1).map e‚ÇÅ.inv ‚â´ e‚ÇÇ.hom = ùüô _ := shift_equiv_triangle (1 : ‚Ñ§) X,
      rw [‚Üê cancel_epi ((shift_functor C (1 : ‚Ñ§)).map e‚ÇÅ.inv), h, ‚Üê functor.map_comp,
        iso.inv_hom_id, functor.map_id], },
  end,
  have eq : h = T'.mor‚ÇÉ ‚â´ e‚ÇÇ.hom,
  { dsimp,
    simp only [unit_of_tensor_iso_unit_inv_app, Œµ_app_obj, discrete.functor_map_id,
      nat_trans.id_app, id_comp, assoc, Œµ_inv_app_obj, Œº_inv_hom_app_assoc],
    erw comp_id, },
  rw eq,
  refine ‚ü®T''.obj‚ÇÇ, T''.mor‚ÇÅ, T''.mor‚ÇÇ, _‚ü©,
  exact pretriangulated.isomorphic_distinguished _
    (inv_rot_of_dist_triangle _ _ (inv_rot_of_dist_triangle _ _ mem)) _ e‚ÇÉ.symm,
end

lemma pretriangulated.complete_distinguished_triangle_morphism‚ÇÇ (T‚ÇÅ T‚ÇÇ : triangle C)
  (hT‚ÇÅ : T‚ÇÅ ‚àà dist_triang C) (hT‚ÇÇ : T‚ÇÇ ‚àà dist_triang C) (a : T‚ÇÅ.obj‚ÇÅ ‚ü∂ T‚ÇÇ.obj‚ÇÅ)
  (c : T‚ÇÅ.obj‚ÇÉ ‚ü∂ T‚ÇÇ.obj‚ÇÉ) (comm : T‚ÇÅ.mor‚ÇÉ ‚â´ (shift_functor C (1 : ‚Ñ§)).map a = c ‚â´ T‚ÇÇ.mor‚ÇÉ) :
  ‚àÉ (b : T‚ÇÅ.obj‚ÇÇ ‚ü∂ T‚ÇÇ.obj‚ÇÇ), T‚ÇÅ.mor‚ÇÅ ‚â´ b = a ‚â´ T‚ÇÇ.mor‚ÇÅ ‚àß T‚ÇÅ.mor‚ÇÇ ‚â´ c = b ‚â´ T‚ÇÇ.mor‚ÇÇ :=
begin
  sorry,
end

lemma pretriangulated.contractible_distinguished‚ÇÅ (X : C) : triangle.mk C (0 : 0 ‚ü∂ X) (ùüô X) 0 ‚àà dist_triang C :=
begin
  refine pretriangulated.isomorphic_distinguished _ (inv_rot_of_dist_triangle C _ (pretriangulated.contractible_distinguished X)) _ _,
  refine triangle.mk_iso _ _ (functor.map_zero_object _).symm (iso.refl _) (iso.refl _)
    (by tidy) (by tidy) (by tidy),
end

lemma contravariant_yoneda_exact‚ÇÇ (T : triangle C) (hT : T ‚àà dist_triang C) {X : C} (f : T.obj‚ÇÇ ‚ü∂ X)
  (hf : T.mor‚ÇÅ ‚â´ f = 0) : ‚àÉ (g : T.obj‚ÇÉ ‚ü∂ X), f = T.mor‚ÇÇ ‚â´ g :=
begin
  obtain ‚ü®g, ‚ü®hg‚ÇÅ, hg‚ÇÇ‚ü©‚ü© := pretriangulated.complete_distinguished_triangle_morphism T (triangle.mk C (0 : 0 ‚ü∂ X) (ùüô _) 0) hT
    (pretriangulated.contractible_distinguished‚ÇÅ _) 0 f (by tidy),
  dsimp at hg‚ÇÅ,
  refine ‚ü®g, by simpa only [comp_id] using hg‚ÇÅ.symm‚ü©,
end

end triangulated

end category_theory
