import for_mathlib.category_theory.triangulated.pretriangulated_misc
import for_mathlib.category_theory.finite_products
import category_theory.limits.preserves.limits
import for_mathlib.category_theory.triangulated.yoneda

noncomputable theory

namespace category_theory

open limits preadditive category

namespace triangulated

open pretriangulated

variables {C : Type*} [category C] [has_zero_object C] [has_shift C ‚Ñ§] [preadditive C]
  [‚àÄ (n : ‚Ñ§), functor.additive (shift_functor C n)] [pretriangulated C]

lemma kernel_cone_of_dist_triang‚ÇÅ (T : triangle C) (hT : T ‚àà dist_triang C) (zero : T.mor‚ÇÉ = 0) :
  is_limit (kernel_fork.of_Œπ T.mor‚ÇÅ (T.comp_zero‚ÇÅ‚ÇÇ hT)) :=
is_limit_aux _ (Œª s, (covariant_yoneda_exact‚ÇÇ T hT s.Œπ s.condition).some)
    (Œª s, (covariant_yoneda_exact‚ÇÇ T hT s.Œπ s.condition).some_spec.symm)
(Œª s m hm, begin
  dsimp at hm,
  rw ‚Üê sub_eq_zero,
  let f := m - (covariant_yoneda_exact‚ÇÇ T hT s.Œπ s.condition).some,
  change f = 0,
  have hf‚ÇÄ : f ‚â´ T.mor‚ÇÅ = 0,
  { dsimp [f],
    rw [sub_comp, hm, (covariant_yoneda_exact‚ÇÇ T hT s.Œπ s.condition).some_spec.symm, sub_self], },
  obtain ‚ü®g, hg‚ü© := covariant_yoneda_exact‚ÇÇ _ (inv_rot_of_dist_triangle _ _ hT) f hf‚ÇÄ,
  rw hg,
  simp only [zero, triangle.inv_rotate_mor‚ÇÅ, functor.map_zero, zero_comp, neg_zero, comp_zero],
end)

lemma mono_of_dist_triang‚ÇÅ (T : triangle C) (hT : T ‚àà dist_triang C) (zero : T.mor‚ÇÉ = 0) :
  mono T.mor‚ÇÅ :=
‚ü®Œª Z f‚ÇÅ f‚ÇÇ hf, (kernel_cone_of_dist_triang‚ÇÅ T hT zero).hom_ext begin
  rintro (_|_),
  { exact hf, },
  { dsimp,
    simp only [T.comp_zero‚ÇÅ‚ÇÇ hT, comp_zero], },
end‚ü©

lemma mono_of_dist_triang‚ÇÇ (T : triangle C) (hT : T ‚àà dist_triang C) (zero : T.mor‚ÇÅ = 0) :
  mono T.mor‚ÇÇ :=
mono_of_dist_triang‚ÇÅ _ (rot_of_dist_triangle _ _ hT)
  (by simp only [zero, triangle.rotate_mor‚ÇÉ, functor.map_zero, neg_zero])

lemma mono_of_dist_triang‚ÇÉ (T : triangle C) (hT : T ‚àà dist_triang C) (zero : T.mor‚ÇÇ = 0) :
  mono T.mor‚ÇÉ :=
mono_of_dist_triang‚ÇÅ _ (rot_of_dist_triangle _ _ (rot_of_dist_triangle _ _ hT))
    (by { dsimp, rw [zero, functor.map_zero, neg_zero], })

lemma has_binary_biproduct_of_dist_triang (T : triangle C) (hT : T ‚àà dist_triang C)
  (zero : T.mor‚ÇÉ = 0) : has_binary_biproduct T.obj‚ÇÅ T.obj‚ÇÉ :=
begin
  haveI : mono T.mor‚ÇÅ := mono_of_dist_triang‚ÇÅ T hT zero,
  obtain ‚ü®i‚ÇÇ, hi‚ÇÇ‚ü© := covariant_yoneda_exact‚ÇÉ T hT (ùüô T.obj‚ÇÉ) (by rw [zero, comp_zero]),
  obtain ‚ü®p‚ÇÅ, hp‚ÇÅ‚ü© := covariant_yoneda_exact‚ÇÇ T hT (ùüô T.obj‚ÇÇ - T.mor‚ÇÇ ‚â´ i‚ÇÇ)
    (by rw [sub_comp, id_comp, assoc, ‚Üê hi‚ÇÇ, comp_id, sub_self]),
  let B : binary_bicone T.obj‚ÇÅ T.obj‚ÇÉ :=
  { X := T.obj‚ÇÇ,
    fst := p‚ÇÅ,
    snd := T.mor‚ÇÇ,
    inl := T.mor‚ÇÅ,
    inr := i‚ÇÇ,
    inl_fst' := by rw [‚Üê cancel_mono T.mor‚ÇÅ, assoc, ‚Üê hp‚ÇÅ, comp_sub, id_comp,
      comp_id, T.comp_zero‚ÇÅ‚ÇÇ_assoc hT, zero_comp, sub_zero],
    inl_snd' := T.comp_zero‚ÇÅ‚ÇÇ hT,
    inr_fst' := by rw [‚Üê cancel_mono T.mor‚ÇÅ, assoc, zero_comp, ‚Üê hp‚ÇÅ, comp_sub,
      ‚Üê reassoc_of hi‚ÇÇ, comp_id, sub_self],
    inr_snd' := hi‚ÇÇ.symm, },
  exact has_binary_biproduct_of_total B (by rw [‚Üê hp‚ÇÅ, sub_add_cancel]),
end

instance : has_binary_biproducts C :=
‚ü®Œª X‚ÇÅ X‚ÇÇ, begin
  obtain ‚ü®Y, i‚ÇÅ, p‚ÇÇ, mem‚ü© := pretriangulated.distinguished_cocone_triangle‚ÇÇ (0 : X‚ÇÇ ‚ü∂ X‚ÇÅ‚ü¶1‚üß),
  exact has_binary_biproduct_of_dist_triang _ mem rfl,
end‚ü©

instance : has_finite_products C := by apply has_finite_products_of_has_binary_products

instance : has_finite_coproducts C := by apply has_finite_coproducts_of_has_binary_coproducts

lemma exists_iso_binary_product_of_dist_triang (T : triangle C) (hT : T ‚àà dist_triang C)
  (zero : T.mor‚ÇÉ = 0) :
  ‚àÉ (e : T.obj‚ÇÇ ‚âÖ T.obj‚ÇÅ ‚®Ø T.obj‚ÇÉ), T.mor‚ÇÅ ‚â´ e.hom = prod.lift (ùüô _) 0 ‚àß
    T.mor‚ÇÇ = e.hom ‚â´ limits.prod.snd :=
begin
  haveI : mono T.mor‚ÇÅ := mono_of_dist_triang‚ÇÅ T hT zero,
  obtain ‚ü®i‚ÇÇ, hi‚ÇÇ‚ü© := covariant_yoneda_exact‚ÇÉ T hT (ùüô T.obj‚ÇÉ) (by rw [zero, comp_zero]),
  obtain ‚ü®p‚ÇÅ, hp‚ÇÅ‚ü© := covariant_yoneda_exact‚ÇÇ T hT (ùüô T.obj‚ÇÇ - T.mor‚ÇÇ ‚â´ i‚ÇÇ)
    (by rw [sub_comp, id_comp, assoc, ‚Üê hi‚ÇÇ, comp_id, sub_self]),
  let e : T.obj‚ÇÇ ‚âÖ T.obj‚ÇÅ ‚®Ø T.obj‚ÇÉ :=
  { hom := prod.lift p‚ÇÅ T.mor‚ÇÇ,
    inv := limits.prod.fst ‚â´ T.mor‚ÇÅ + limits.prod.snd ‚â´ i‚ÇÇ,
    hom_inv_id' :=  by simp only [comp_add, prod.lift_fst_assoc, prod.lift_snd_assoc,
      ‚Üê hp‚ÇÅ, ‚Üê hi‚ÇÇ, sub_add_cancel],
    inv_hom_id' := begin
      ext,
      { simp only [‚Üê cancel_mono T.mor‚ÇÅ, add_comp, assoc, prod.lift_fst, id_comp, ‚Üê hp‚ÇÅ,
          comp_sub, comp_id, T.comp_zero‚ÇÅ‚ÇÇ_assoc hT, zero_comp, comp_zero, sub_zero],
        rw [‚Üê reassoc_of hi‚ÇÇ, sub_self, add_zero], },
      { simp only [add_comp, assoc, prod.lift_snd, id_comp, T.comp_zero‚ÇÅ‚ÇÇ hT, comp_zero,
          zero_add, ‚Üê hi‚ÇÇ, comp_id], },
    end, },
  refine ‚ü®e, _, by simp only [prod.lift_snd]‚ü©,
  { rw [‚Üê cancel_mono e.inv, assoc, e.hom_inv_id, comp_id],
    simp only [comp_add, prod.lift_fst_assoc, id_comp, prod.lift_snd_assoc, zero_comp, add_zero], },
end

instance : split_mono_category C :=
‚ü®Œª X Y i, begin
  introI,
  constructor,
  obtain ‚ü®Z, z, p, mem‚ü© := distinguished_cocone_triangle‚ÇÅ i,
  have zero : z ‚â´ i = 0 := triangle.comp_zero‚ÇÅ‚ÇÇ _ mem,
  have hz : z = 0 := by rw [‚Üê cancel_mono i, zero, zero_comp],
  obtain ‚ü®r, hr‚ü© := contravariant_yoneda_exact‚ÇÇ _ mem (ùüô X) (by { dsimp, rw [hz, zero_comp], }),
  exact nonempty.intro ‚ü®r, hr.symm‚ü©,
end‚ü©

lemma binary_product_triangle_distinguished (X‚ÇÅ X‚ÇÇ : C) :
  triangle.mk C (prod.lift (ùüô X‚ÇÅ) (0 : X‚ÇÅ ‚ü∂ X‚ÇÇ)) limits.prod.snd 0 ‚àà dist_triang C :=
begin
  obtain ‚ü®Y, g, h, mem‚ü© := pretriangulated.distinguished_cocone_triangle‚ÇÇ (0 : X‚ÇÇ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß),
  obtain ‚ü®e, ‚ü®he‚ÇÅ, he‚ÇÇ‚ü©‚ü© := exists_iso_binary_product_of_dist_triang _ mem rfl,
  refine pretriangulated.isomorphic_distinguished _ mem _ _,
  symmetry,
  dsimp at he‚ÇÅ he‚ÇÇ,
  refine triangle.mk_iso _ _ (iso.refl _) e (iso.refl _) _ _ _,
  { dsimp,
    simp only [prod.comp_lift, comp_id, comp_zero, id_comp, he‚ÇÅ], },
  { dsimp,
    rw [comp_id, he‚ÇÇ], },
  { simp only [triangle.mk_mor‚ÇÉ, zero_comp, comp_zero], },
end

@[simps]
def triangle.coproduct {I : Type*} (T : I ‚Üí triangle C) [has_coproduct (Œª i, (T i).obj‚ÇÅ)]
  [has_coproduct (Œª i, (T i).obj‚ÇÇ)] [has_coproduct (Œª i, (T i).obj‚ÇÉ)]
  [has_coproduct (Œª i, (shift_functor C (1 : ‚Ñ§)).obj (T i).obj‚ÇÅ)] : triangle C :=
{ obj‚ÇÅ := ‚àê (Œª i, (T i).obj‚ÇÅ),
  obj‚ÇÇ := ‚àê (Œª i, (T i).obj‚ÇÇ),
  obj‚ÇÉ := ‚àê (Œª i, (T i).obj‚ÇÉ),
  mor‚ÇÅ := limits.sigma.map (Œª i, (T i).mor‚ÇÅ),
  mor‚ÇÇ := limits.sigma.map (Œª i, (T i).mor‚ÇÇ),
  mor‚ÇÉ := limits.sigma.map (Œª i, (T i).mor‚ÇÉ) ‚â´ sigma_comparison _ _, }

/-lemma triangle.coproduct_distinghished {I : Type*} (T : I ‚Üí triangle C)
  [has_coproduct (Œª i, (T i).obj‚ÇÅ)]
  [has_coproduct (Œª i, (T i).obj‚ÇÇ)] [has_coproduct (Œª i, (T i).obj‚ÇÉ)]
  [has_coproduct (Œª i, (shift_functor C (1 : ‚Ñ§)).obj (T i).obj‚ÇÅ)]
  (hT : ‚àÄ i, (T i) ‚àà dist_triang C) : triangle.coproduct T ‚àà dist_triang C := sorry-/

open algebra.homology

lemma triangle.product_distinghished {I : Type} (T : I ‚Üí triangle C)
  [has_product (Œª i, (T i).obj‚ÇÅ)]
  [has_product (Œª i, (T i).obj‚ÇÇ)] [has_product (Œª i, (T i).obj‚ÇÉ)]
  [has_product (Œª i, (shift_functor C (1 : ‚Ñ§)).obj (T i).obj‚ÇÅ)]
  [has_product (Œª i, (shift_functor C (1 : ‚Ñ§)).obj (T i).obj‚ÇÇ)]
  (hT : ‚àÄ i, (T i) ‚àà dist_triang C) : triangle.product T ‚àà dist_triang C :=
begin
  let f‚ÇÅ := pi.map (Œª i, (T i).mor‚ÇÅ),
  obtain ‚ü®Z, f‚ÇÇ, f‚ÇÉ, hT'‚ü© := distinguished_cocone_triangle _ _ f‚ÇÅ,
  let T' := triangle.mk C f‚ÇÅ f‚ÇÇ f‚ÇÉ,
  change T' ‚àà dist_triang C at hT',
  have h : ‚àÄ (i : I), ‚àÉ (œÜ‚ÇÉ : T'.obj‚ÇÉ ‚ü∂ (T i).obj‚ÇÉ),
    T'.mor‚ÇÇ ‚â´ œÜ‚ÇÉ = pi.œÄ _ i ‚â´ (T i).mor‚ÇÇ ‚àß T'.mor‚ÇÉ ‚â´ (pi.œÄ _ i)‚ü¶1‚üß' = œÜ‚ÇÉ ‚â´ (T i).mor‚ÇÉ :=
      Œª i, pretriangulated.complete_distinguished_triangle_morphism _ _ hT' (hT i)
      (pi.œÄ _ i) (pi.œÄ _ i) (by simp only [triangle.mk_mor‚ÇÅ, lim_map_œÄ, discrete.nat_trans_app]),
  let œÜ : Œ† i, T' ‚ü∂ T i := Œª i,
  { hom‚ÇÅ := pi.œÄ _ i,
    hom‚ÇÇ := pi.œÄ _ i,
    hom‚ÇÉ := (h i).some,
    comm‚ÇÅ' := by simp only [triangle.mk_mor‚ÇÅ, lim_map_œÄ, discrete.nat_trans_app],
    comm‚ÇÇ' := (h i).some_spec.1,
    comm‚ÇÉ' := (h i).some_spec.2, },
  let œÜ' : T' ‚ü∂ triangle.product T := triangle.product.lift œÜ,
  suffices : is_iso œÜ'.hom‚ÇÉ,
  { haveI : is_iso œÜ'.hom‚ÇÅ,
    { have eq‚ÇÅ : œÜ'.hom‚ÇÅ = ùüô _,
      { ext i,
        discrete_cases,
        simp only [triangle.product.lift_hom‚ÇÅ, limit.lift_œÄ, fan.mk_œÄ_app, id_comp], },
      rw eq‚ÇÅ,
      apply_instance, },
    haveI : is_iso œÜ'.hom‚ÇÇ,
    { have eq‚ÇÇ : œÜ'.hom‚ÇÇ = ùüô _,
      { ext i,
        discrete_cases,
        simp only [triangle.product.lift_hom‚ÇÇ, limit.lift_œÄ, fan.mk_œÄ_app, id_comp], },
      rw eq‚ÇÇ,
      apply_instance, },
    haveI : is_iso œÜ',
    { exact triangle.is_iso_of_is_iso_homs _ infer_instance infer_instance infer_instance, },
    exact pretriangulated.isomorphic_distinguished _ hT' _ (as_iso œÜ').symm, },
  refine is_iso_of_yoneda_bijective _ (Œª A, _),
  let T'' := Œª i, candidate_triangle.of_distinguished _ (hT i),
  haveI : has_product (Œª i, (T'' i).1.obj‚ÇÅ),
  { dsimp, apply_instance, },
  haveI : has_product (Œª i, (T'' i).1.obj‚ÇÇ),
  { dsimp, apply_instance, },
  haveI : has_product (Œª i, (T'' i).1.obj‚ÇÉ),
  { dsimp, apply_instance, },
  haveI : has_product (Œª i, (shift_functor C (1 : ‚Ñ§)).obj (T'' i).1.obj‚ÇÅ),
  { dsimp, apply_instance, },
  haveI : has_product (Œª i, (shift_functor C (1 : ‚Ñ§)).obj (T'' i).1.obj‚ÇÇ),
  { dsimp, apply_instance, },
  let œà : candidate_triangle.of_distinguished T' hT' ‚ü∂ candidate_triangle.pi T'' := œÜ',
  have hœà‚ÇÅ : ((candidate_triangle.to_five_complex C).map œà).œÑ‚ÇÅ = ùüô _,
  { ext i, discrete_cases, dsimp, simp only [limit.lift_œÄ, fan.mk_œÄ_app, id_comp], },
  have hœà‚ÇÇ : ((candidate_triangle.to_five_complex C).map œà).œÑ‚ÇÇ = ùüô _,
  { ext i, discrete_cases, dsimp, simp only [limit.lift_œÄ, fan.mk_œÄ_app, id_comp], },
  have hœà‚ÇÑ : ((candidate_triangle.to_five_complex C).map œà).œÑ‚ÇÑ = ùüô _,
  { dsimp, convert functor.map_id _ _, },
  have hœà‚ÇÖ : ((candidate_triangle.to_five_complex C).map œà).œÑ‚ÇÖ = ùüô _,
  { dsimp, convert functor.map_id _ _, },
  refine five_complex.five_lemma_bijective ((preadditive_coyoneda.obj
    (opposite.op A)).map_five_complex.map ((candidate_triangle.to_five_complex C).map œà))
    (candidate_triangle.coyoneda_exact_of_distinguished _ _ _) _
    (yoneda_bijective_of_is_iso _ (by { rw hœà‚ÇÅ, apply_instance, }) _)
    (yoneda_bijective_of_is_iso _ (by { rw hœà‚ÇÇ, apply_instance, }) _)
    (yoneda_bijective_of_is_iso _ (by { rw hœà‚ÇÑ, apply_instance, }) _)
    (yoneda_bijective_of_is_iso _ (by { rw hœà‚ÇÖ, apply_instance, }) _),
  exact candidate_triangle.pi_coyoneda_exact _ _
    (Œª i, candidate_triangle.coyoneda_exact_of_distinguished _ _ _),
end

@[simps]
def triangle.coprod (T‚ÇÅ T‚ÇÇ : triangle C) [has_binary_product T‚ÇÅ.obj‚ÇÅ T‚ÇÇ.obj‚ÇÅ]
  [has_binary_product T‚ÇÅ.obj‚ÇÇ T‚ÇÇ.obj‚ÇÇ] [has_binary_product T‚ÇÅ.obj‚ÇÉ T‚ÇÇ.obj‚ÇÉ]
  [has_binary_product ((shift_functor C (1 : ‚Ñ§)).obj T‚ÇÅ.obj‚ÇÉ)
    ((shift_functor C (1 : ‚Ñ§)).obj T‚ÇÅ.obj‚ÇÉ)] : triangle C :=
{ obj‚ÇÅ := T‚ÇÅ.obj‚ÇÅ ‚®ø T‚ÇÇ.obj‚ÇÅ,
  obj‚ÇÇ := T‚ÇÅ.obj‚ÇÇ ‚®ø T‚ÇÇ.obj‚ÇÇ,
  obj‚ÇÉ := T‚ÇÅ.obj‚ÇÉ ‚®ø T‚ÇÇ.obj‚ÇÉ,
  mor‚ÇÅ := coprod.map T‚ÇÅ.mor‚ÇÅ T‚ÇÇ.mor‚ÇÅ,
  mor‚ÇÇ := coprod.map T‚ÇÅ.mor‚ÇÇ T‚ÇÇ.mor‚ÇÇ,
  mor‚ÇÉ := coprod.map T‚ÇÅ.mor‚ÇÉ T‚ÇÇ.mor‚ÇÉ ‚â´ coprod_comparison _ _ _, }

@[simps]
def coprod_iso_coproduct {D : Type*} [category D] (X : walking_pair ‚Üí D)
  [has_coproduct (Œª i, X i)] [has_binary_coproduct (X walking_pair.left) (X walking_pair.right)] :
  X walking_pair.left ‚®ø X walking_pair.right ‚âÖ ‚àê X :=
{ hom := coprod.desc (sigma.Œπ _ _) (sigma.Œπ _ _),
  inv := sigma.desc (by { rintro (_|_), exacts [coprod.inl, coprod.inr], }),
  hom_inv_id' := by tidy,
  inv_hom_id' := by { ext j, discrete_cases, cases j, tidy, }, }

/-
lemma triangle.coprod_distinguished {I : Type*} (T‚ÇÅ T‚ÇÇ : triangle C)
  (hT‚ÇÅ : T‚ÇÅ ‚àà dist_triang C) (hT‚ÇÇ : T‚ÇÇ ‚àà dist_triang C) :
  triangle.coprod T‚ÇÅ T‚ÇÇ ‚àà dist_triang C :=
begin
  let T' : walking_pair ‚Üí triangle C := by { rintro (_|_), exacts [T‚ÇÅ, T‚ÇÇ], },
  have hT' := triangle.coproduct_distinghished T' (by { rintro (_|_), exacts [hT‚ÇÅ, hT‚ÇÇ], }),
  refine isomorphic_distinguished _ hT' _ _,
  refine triangle.mk_iso _ _ (coprod_iso_coproduct (Œª i, (T' i).obj‚ÇÅ))
    (coprod_iso_coproduct (Œª i, (T' i).obj‚ÇÇ)) (coprod_iso_coproduct (Œª i, (T' i).obj‚ÇÉ))
    (by tidy) (by tidy) _,
  ext,
  { dsimp [T'],
    simp only [assoc, coprod.inl_map_assoc, coprod_comparison_inl_assoc, coprod.desc_comp_assoc,
      Œπ_colim_map, discrete.nat_trans_app, coprod.desc_comp, Œπ_comp_sigma_comparison,
      coprod.inl_desc, Œπ_colim_map_assoc, ‚Üê functor.map_comp], },
  { dsimp [T'],
    simp only [assoc, coprod.inr_map_assoc, coprod_comparison_inr_assoc, coprod.desc_comp_assoc,
      Œπ_colim_map, discrete.nat_trans_app, coprod.desc_comp, Œπ_comp_sigma_comparison,
      coprod.inr_desc, Œπ_colim_map_assoc, ‚Üê functor.map_comp], },
end-/

end triangulated

end category_theory
