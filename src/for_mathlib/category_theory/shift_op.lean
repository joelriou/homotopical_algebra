import for_mathlib.category_theory.triangulated.shift_compatibility
import for_mathlib.category_theory.triangulated.pretriangulated_misc
import category_theory.preadditive.opposite
import tactic.abel

noncomputable theory

universe u

open category_theory category_theory.category category_theory.limits

namespace category_theory

variables {C : Type*} {A B : Type u} [category C] [add_monoid A] [add_monoid B]
  {G : Type*} [add_comm_group G]

local attribute [instance, reducible] endofunctor_monoidal_category
local attribute [reducible] discrete.add_monoidal

variables (C A)

def has_shift_op [has_shift C A] : has_shift C·µí·µñ A :=
has_shift_mk _ _
{ F := Œª a, (shift_functor C a).op,
  Œµ := (functor.op_unop_equiv C C).functor.map_iso (shift_functor_zero C A).op,
  Œº := Œª a b, (functor.op_unop_equiv C C).functor.map_iso (shift_functor_add C a b).op,
  associativity := Œª a b c X, quiver.hom.unop_inj begin
    have eq := congr_arg iso.inv (monoidal_functor.associativity_iso_eq (shift_monoidal_functor C A)
      (discrete.mk a) (discrete.mk b) (discrete.mk c)),
    replace eq := congr_app eq (opposite.unop X),
    dsimp at ‚ä¢ eq,
    erw [comp_id, id_comp, functor.map_id, functor.map_id, comp_id] at eq,
    simpa only [‚Üê eq, eq_to_hom_unop, eq_to_hom_map, eq_to_hom_app],
  end,
  left_unitality := Œª a X, quiver.hom.unop_inj begin
    dsimp,
    simpa only [obj_Œµ_inv_app, eq_to_iso.hom, Œº_inv_hom_app_assoc, eq_to_hom_unop,
      eq_to_hom_map, eq_to_hom_app],
  end,
  right_unitality := Œª a X, quiver.hom.unop_inj begin
    dsimp,
    simpa only [Œµ_inv_app_obj, eq_to_iso.hom, Œº_inv_hom_app_assoc, eq_to_hom_unop,
      eq_to_hom_map, eq_to_hom_app],
  end, }

variable {A}

def has_shift_pull [has_shift C B] (œÜ : A ‚Üí+ B) : has_shift C A :=
‚ü®monoidal_functor.comp (discrete.add_monoidal_functor œÜ) (shift_monoidal_functor C B)‚ü©

variable {C}

def has_shift.op (s : has_shift C A) : has_shift C·µí·µñ A :=
by { letI := s, apply has_shift_op, }

def has_shift.pull (s : has_shift C B) (œÜ : A ‚Üí+ B) : has_shift C A :=
by { letI := s, exact has_shift_pull C œÜ, }

def has_shift.op_neg (s : has_shift C G) :
  has_shift C·µí·µñ G :=
s.op.pull (‚ü®Œª g, -g, by tidy, Œª x y, by abel‚ü© : G ‚Üí+ G)

variables (C G)

def has_shift_op_neg [has_shift C G] : has_shift C·µí·µñ G :=
has_shift.op_neg infer_instance

def has_shift_op_neg_‚Ñ§ [has_shift C ‚Ñ§] : has_shift C·µí·µñ ‚Ñ§ :=
has_shift.op_neg infer_instance

namespace pretriangulated

variables (C) [has_shift C ‚Ñ§]

local attribute [instance] has_shift_op_neg_‚Ñ§

lemma _root_.category_theory.shift_functor_op_map
  {X Y : C·µí·µñ} (f : X ‚ü∂ Y) (n : ‚Ñ§) :
  (shift_functor C·µí·µñ n).map f = ((shift_functor C (-n)).map f.unop).op := rfl

variable [preadditive C]

namespace triangle_op_equivalence

@[simps]
def functor : (triangle C)·µí·µñ ‚•§ triangle C·µí·µñ :=
{ obj := Œª T,
  { obj‚ÇÅ := opposite.op (T.unop.obj‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß),
    obj‚ÇÇ := opposite.op T.unop.obj‚ÇÉ,
    obj‚ÇÉ := opposite.op T.unop.obj‚ÇÇ,
    mor‚ÇÅ := T.unop.mor‚ÇÉ.op,
    mor‚ÇÇ := T.unop.mor‚ÇÇ.op,
    mor‚ÇÉ := -T.unop.mor‚ÇÅ.op ‚â´ ((shift_equiv C (1 : ‚Ñ§)).unit_iso.inv.app T.unop.obj‚ÇÅ).op, },
  map := Œª T‚ÇÅ T‚ÇÇ f,
  { hom‚ÇÅ := (f.unop.hom‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß').op,
    hom‚ÇÇ := f.unop.hom‚ÇÉ.op,
    hom‚ÇÉ := f.unop.hom‚ÇÇ.op,
    comm‚ÇÅ' := quiver.hom.unop_inj f.unop.comm‚ÇÉ.symm,
    comm‚ÇÇ' := quiver.hom.unop_inj f.unop.comm‚ÇÇ.symm,
    comm‚ÇÉ' := quiver.hom.unop_inj begin
      dsimp only,
      simp only [category_theory.shift_functor_op_map, shift_equiv_unit_iso,
        add_neg_equiv_unit_iso_inv, unit_of_tensor_iso_unit_hom_app, op_comp, quiver.hom.unop_op,
        preadditive.neg_comp, assoc, unop_neg, unop_comp, Œº_naturality, nat_trans.naturality,
        functor.id_map, triangle_morphism.comm‚ÇÅ],
    end, }, }

@[simps]
def inverse : triangle C·µí·µñ ‚•§ (triangle C)·µí·µñ :=
{ obj := Œª T, opposite.op
  { obj‚ÇÅ := T.obj‚ÇÅ.unop‚ü¶(-1 : ‚Ñ§)‚üß,
    obj‚ÇÇ := T.obj‚ÇÉ.unop,
    obj‚ÇÉ := T.obj‚ÇÇ.unop,
    mor‚ÇÅ := -T.mor‚ÇÉ.unop,
    mor‚ÇÇ := T.mor‚ÇÇ.unop,
    mor‚ÇÉ := T.mor‚ÇÅ.unop ‚â´ (shift_equiv C (1 : ‚Ñ§)).counit_iso.inv.app T.obj‚ÇÅ.unop, },
  map := Œª T‚ÇÅ T‚ÇÇ f, quiver.hom.op
  { hom‚ÇÅ := f.hom‚ÇÅ.unop‚ü¶(-1 : ‚Ñ§)‚üß',
    hom‚ÇÇ := f.hom‚ÇÉ.unop,
    hom‚ÇÉ := f.hom‚ÇÇ.unop,
    comm‚ÇÅ' := quiver.hom.op_inj begin
      dsimp,
      simpa only [preadditive.comp_neg, preadditive.neg_comp, neg_inj] using f.comm‚ÇÉ.symm,
    end,
    comm‚ÇÇ' := quiver.hom.op_inj f.comm‚ÇÇ.symm,
    comm‚ÇÉ' := begin
      dsimp,
      slice_rhs 1 2 { rw [‚Üê unop_comp, f.comm‚ÇÅ, unop_comp], },
      simp only [assoc],
      erw ‚Üê nat_trans.naturality,
      refl,
    end, }, }

@[simps]
def counit_iso : inverse C ‚ãô functor C ‚âÖ ùü≠ _ :=
nat_iso.of_components (Œª T, begin
  refine triangle.mk_iso _ _ (((shift_equiv C (1 : ‚Ñ§)).counit_iso.app T.obj‚ÇÅ.unop).symm.op)
    (iso.refl _) (iso.refl _) (by tidy) (by tidy) (quiver.hom.unop_inj _),
  change ((shift_equiv C (1 : ‚Ñ§)).counit_iso.inv.app T.obj‚ÇÅ.unop)‚ü¶(-1 : ‚Ñ§)‚üß' ‚â´
    (-((shift_equiv C (1 : ‚Ñ§)).unit_iso.inv.app (T.obj‚ÇÅ.unop‚ü¶(-1 : ‚Ñ§)‚üß) ‚â´ -T.mor‚ÇÉ.unop)) =
    T.mor‚ÇÉ.unop ‚â´ ùüô _,
  simp only [preadditive.comp_neg, neg_neg, comp_id],
  have eq := (shift_equiv C (1 : ‚Ñ§)).inverse_counit_inv_comp (opposite.unop T.obj‚ÇÅ) =‚â´ T.mor‚ÇÉ.unop,
  erw [id_comp, assoc] at eq,
  exact eq,
end)
(Œª T‚ÇÅ T‚ÇÇ f, begin
  ext; apply quiver.hom.unop_inj,
  { exact ((shift_equiv C (1 : ‚Ñ§)).counit_iso.inv.naturality f.hom‚ÇÅ.unop).symm, },
  { dsimp, rw [id_comp, comp_id], },
  { dsimp, rw [id_comp, comp_id], },
end)

@[simps]
def unit_iso : ùü≠ _ ‚âÖ functor C ‚ãô inverse C :=
nat_iso.of_components (Œª T, begin
  refine iso.op (_ : opposite.unop _ ‚âÖ opposite.unop T),
  refine triangle.mk_iso _ _ (((shift_equiv C (1 : ‚Ñ§)).unit_iso.app T.unop.obj‚ÇÅ).symm)
    (iso.refl _) (iso.refl _) _ _ _,
  { tidy, },
  { tidy, },
  { change (T.unop.mor‚ÇÉ ‚â´
      ((shift_equiv C (1 : ‚Ñ§)).counit_iso).inv.app ((opposite.unop T).obj‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß)) ‚â´
      ((shift_equiv C (1 : ‚Ñ§)).unit_iso.inv.app (opposite.unop T).obj‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß' =
      ùüô _ ‚â´ T.unop.mor‚ÇÉ,
    rw [id_comp, assoc],
    have eq := T.unop.mor‚ÇÉ ‚â´= (shift_equiv C (1 : ‚Ñ§)).counit_inv_functor_comp (opposite.unop T).obj‚ÇÅ,
    erw [comp_id] at eq,
    exact eq, },
end)
(Œª T‚ÇÅ T‚ÇÇ f, quiver.hom.unop_inj begin
  ext,
  { exact ((shift_equiv C (1 : ‚Ñ§)).unit_iso.inv.naturality f.unop.hom‚ÇÅ).symm, },
  { dsimp, rw [id_comp, comp_id], },
  { dsimp, rw [id_comp, comp_id], },
end)

end triangle_op_equivalence

@[simps]
def triangle_op_equivalence : (triangle C)·µí·µñ ‚âå triangle C·µí·µñ :=
{ functor := triangle_op_equivalence.functor C,
  inverse := triangle_op_equivalence.inverse C,
  unit_iso := triangle_op_equivalence.unit_iso C,
  counit_iso := triangle_op_equivalence.counit_iso C,
  functor_unit_iso_comp' := Œª T, begin
    ext,
    { exact quiver.hom.unop_inj ((shift_equiv C (1 : ‚Ñ§)).counit_inv_functor_comp T.unop.obj‚ÇÅ), },
    { dsimp, rw id_comp, },
    { dsimp, rw id_comp, },
  end, }

variable {C}

def triangle.op (T : triangle C) : triangle C·µí·µñ :=
(triangle_op_equivalence C).functor.obj (opposite.op T)

def triangle.unop (T : triangle C·µí·µñ) : triangle C :=
((triangle_op_equivalence C).inverse.obj T).unop

def triangle.unop_op (T : triangle C) : T.op.unop ‚âÖ T :=
((triangle_op_equivalence C).unit_iso.app (opposite.op T)).unop

def triangle.op_unop (T : triangle C·µí·µñ) : T.unop.op ‚âÖ T :=
(triangle_op_equivalence C).counit_iso.app T

variables [‚àÄ (n : ‚Ñ§), (shift_functor C n).additive]

instance shift_functor_op_additive (n : ‚Ñ§) : (shift_functor C·µí·µñ n).additive :=
(infer_instance : (shift_functor C (-n)).op.additive)

variables [has_zero_object C] [pretriangulated C]

variable (C)

def distinguished_triangle_op : set (triangle C·µí·µñ) :=
Œª T, T.unop ‚àà dist_triang C

variable {C}

lemma mem_dist_triang_iff_unop (T : triangle C·µí·µñ) :
  T ‚àà distinguished_triangle_op C ‚Üî T.unop ‚àà dist_triang C := by refl

lemma mem_dist_triang_iff_op (T : triangle C) :
  (T ‚àà dist_triang C) ‚Üî T.op ‚àà distinguished_triangle_op C :=
begin
  rw mem_dist_triang_iff_unop,
  split,
  { exact Œª hT, isomorphic_distinguished _ hT _ T.unop_op, },
  { exact Œª hT, isomorphic_distinguished _ hT _ T.unop_op.symm, },
end

variable {C}

lemma isomorphic_distinguished_op (T‚ÇÅ : triangle C·µí·µñ) (hT‚ÇÅ : T‚ÇÅ ‚àà distinguished_triangle_op C)
  (T‚ÇÇ : triangle C·µí·µñ) (e : T‚ÇÇ ‚âÖ T‚ÇÅ) : T‚ÇÇ ‚àà distinguished_triangle_op C :=
begin
  rw mem_dist_triang_iff_unop at hT‚ÇÅ ‚ä¢,
  exact isomorphic_distinguished _ hT‚ÇÅ _ ((triangle_op_equivalence C).inverse.map_iso e).unop.symm,
end

lemma contractible_distinguished_op (X : C·µí·µñ) :
  contractible_triangle X ‚àà distinguished_triangle_op C :=
begin
  rw mem_dist_triang_iff_unop,
  dsimp [contractible_triangle, triangle.unop],
  sorry,
end

instance : pretriangulated C·µí·µñ :=
{ distinguished_triangles := distinguished_triangle_op C,
  isomorphic_distinguished := isomorphic_distinguished_op,
  contractible_distinguished := contractible_distinguished_op,
  distinguished_cocone_triangle := sorry,
  rotate_distinguished_triangle := sorry,
  complete_distinguished_triangle_morphism := sorry, }

end pretriangulated

end category_theory
