/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import for_mathlib.category_theory.comm_sq_lift

open category_theory category_theory.category category_theory.limits opposite

namespace algebraic_topology

variables {C : Type*} [category C] (F G : arrow_class C)

def factorisation_axiom :=
‚àÄ (X Z : C) (f : X ‚ü∂ Z), ‚àÉ (Y : C) (i : X ‚ü∂ Y) (hi : arrow.mk i ‚àà F) (p : Y ‚ü∂ Z) (hp : arrow.mk p ‚àà G),
  f = i ‚â´ p

namespace factorisation_axiom

variables {F G}

@[protected]
lemma op (h : factorisation_axiom F G) : factorisation_axiom G.op F.op :=
Œª X Z f,
begin
  rcases h _ _ f.unop with ‚ü®Y, i, hi, p, hp, fac‚ü©,
  use [op Y, p.op, hp, i.op, hi],
  rw [‚Üê op_comp, ‚Üê fac, f.op_unop],
end

lemma unop {F' G' : arrow_class C·µí·µñ} (h : factorisation_axiom F' G') : factorisation_axiom G'.unop F'.unop :=
Œª X Z f,
begin
  rcases h _ _ f.op with ‚ü®Y, i, hi, p, hp, fac‚ü©,
  use [Y.unop, p.unop, hp, i.unop, hi],
  rw [‚Üê unop_comp, ‚Üê fac, f.unop_op],
end

lemma is_retract_of_fac_and_llp {X Y Z : C} (i : X ‚ü∂ Z) {j : X ‚ü∂ Y} {p : Y ‚ü∂ Z} (fac : i = j ‚â´ p)
  [has_lifting_property_new i p] : is_retract_hom i j :=
begin
  have fac‚ÇÇ : j ‚â´ p = i ‚â´ ùüô Z,
  { rw [comp_id, fac], },
  have sq := (comm_sq.mk fac‚ÇÇ).lift,
  let s : arrow.mk i ‚ü∂ arrow.mk j :=
  { left := ùüô X,
    right := (comm_sq.mk fac‚ÇÇ).lift,
    w' := by { dsimp, simp only [functor.id_map, arrow.mk_hom, comm_sq.fac_left, id_comp], }, },
  let r : arrow.mk j ‚ü∂ arrow.mk i :=
  { left := ùüô X,
    right := p,
    w' := by { dsimp, simp only [id_comp, fac], }, },
  use [s, r],
  ext,
  { dsimp, rw id_comp, },
  { dsimp, rw comm_sq.fac_right, },
end

variables {F G}

lemma eq_llp_with
  (h‚ÇÅ : factorisation_axiom F G) (h‚ÇÇ : F.has_lifting_property G)
  (h‚ÇÉ : F.is_stable_by_retract) : F = G.llp_with :=
begin
  ext i,
  rcases i with ‚ü®X, Y, i‚ü©,
  split,
  { exact Œª hi X Y, h‚ÇÇ.lifting_property i hi, },
  { intro hi,
    rcases h‚ÇÅ _ _ i with ‚ü®Z, j, hj, p, hp, fac‚ü©,
    haveI : has_lifting_property_new i p := hi p hp,
    exact h‚ÇÉ.stability i j (is_retract_of_fac_and_llp i fac) hj, },
end

lemma eq_rlp_with
  (h‚ÇÅ : factorisation_axiom F G) (h‚ÇÇ : F.has_lifting_property G)
  (h‚ÇÉ : G.is_stable_by_retract) : G = F.rlp_with :=
by rw [‚Üê G.unop_op, eq_llp_with h‚ÇÅ.op h‚ÇÇ.op h‚ÇÉ.op, F.llp_with_op, arrow_class.unop_op]

end factorisation_axiom


end algebraic_topology
