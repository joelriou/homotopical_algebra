/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import for_mathlib.algebraic_topology.homotopical_algebra.cochain_complex.cm5a
import for_mathlib.algebra.homology.trunc
import for_mathlib.algebra.homology.k_projective

noncomputable theory

open category_theory category_theory.category algebraic_topology

universes v u

variables {C : Type u} [category.{v} C]

namespace category_theory

variables {X Z : C} (f : X ‚ü∂ Z)

structure hom_factorisation :=
(Y : C)
(i : X ‚ü∂ Y)
(p : Y ‚ü∂ Z)
(fac' : i ‚â´ p = f . obviously)

namespace hom_factorisation

restate_axiom fac'
attribute [simp, reassoc] fac

variables {f} (F‚ÇÅ F‚ÇÇ F‚ÇÉ : hom_factorisation f)

@[ext]
structure hom :=
(œÑ : F‚ÇÅ.Y ‚ü∂ F‚ÇÇ.Y)
(commi' : F‚ÇÅ.i ‚â´ œÑ = F‚ÇÇ.i . obviously)
(commp' : œÑ ‚â´ F‚ÇÇ.p = F‚ÇÅ.p . obviously)

namespace hom

restate_axiom commi'
restate_axiom commp'
attribute [simp, reassoc] commi commp

end hom

instance : category (hom_factorisation f) :=
{ hom := hom,
  id := Œª F, { œÑ := ùüô _, },
  comp := Œª F‚ÇÅ F‚ÇÇ F‚ÇÉ œÜ œÜ', { œÑ := œÜ.œÑ ‚â´ œÜ'.œÑ, }, }

variable (f)

def eval : hom_factorisation f ‚•§ C :=
{ obj := Œª F, F.Y,
  map := Œª F‚ÇÅ F‚ÇÇ œÜ, œÜ.œÑ, }

variable {f}

@[simp] lemma id_œÑ (F : hom_factorisation f) : hom.œÑ (ùüô F) = ùüô _ := rfl
@[simp, reassoc] lemma comp_œÑ {F‚ÇÅ F‚ÇÇ F‚ÇÉ : hom_factorisation f} (œÜ : F‚ÇÅ ‚ü∂ F‚ÇÇ) (œÜ' : F‚ÇÇ ‚ü∂ F‚ÇÉ) :
  (œÜ ‚â´ œÜ').œÑ = œÜ.œÑ ‚â´ œÜ'.œÑ := rfl

lemma eq_to_hom_œÑ {F‚ÇÅ F‚ÇÇ : hom_factorisation f} (eq : F‚ÇÅ = F‚ÇÇ) :
  hom.œÑ (eq_to_hom eq) = eq_to_hom (by rw eq) := by { subst eq, refl, }

lemma is_iso_œÑ {F‚ÇÅ F‚ÇÇ : hom_factorisation f} (œÜ : F‚ÇÅ ‚ü∂ F‚ÇÇ) [is_iso œÜ] :
  is_iso œÜ.œÑ :=
begin
  change is_iso ((eval f).map œÜ),
  apply_instance,
end

end hom_factorisation

end category_theory

open category_theory

variables [abelian C] [enough_projectives C]

namespace bounded_above_cochain_complex

namespace projective_model_structure

namespace CM5b

variables {X Z : bounded_above_cochain_complex C} {f : X ‚ü∂ Z}

instance (n : ‚Ñ§) [is_iso f] : is_iso (f.f n) :=
begin
  change is_iso ((homological_complex.eval _ _ n).map ((induced_functor _).map f)),
  apply_instance,
end

structure is_cof_fib_factorisation (F : hom_factorisation f) : Prop :=
(hi : arrow_classes.cof F.i)
(hp : arrow_classes.fib F.p)

variable (f)

@[derive category]
def cof_fib_factorisation := full_subcategory (@is_cof_fib_factorisation _ _ _ _ _ _ f)

variable {f}

def cof_fib_factorisation.quasi_iso_ge (F : cof_fib_factorisation f) (n : ‚Ñ§) : Prop :=
  ‚àÄ (i : ‚Ñ§) (hi : n ‚â§ i), is_iso (homology_map F.1.p i)

variable (f)

@[derive category]
def cof_fib_factorisation_quasi_iso_ge (n : ‚Ñ§) :=
  full_subcategory (Œª (F : cof_fib_factorisation f), F.quasi_iso_ge n)

variable {f}

def cof_fib_factorisation.is_iso_ge (F : cof_fib_factorisation f) (n : ‚Ñ§) : Prop :=
  ‚àÄ (i : ‚Ñ§) (hi : n ‚â§ i), is_iso (F.1.i.f i)

namespace induction

variables (f) (hf : arrow_classes.fib f)

include hf

lemma step‚ÇÅ (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1)
  (hf : ‚àÄ (q : ‚Ñ§) (hq : n‚ÇÅ ‚â§ q), is_iso (homology_map f q)) :
  ‚àÉ (F : cof_fib_factorisation f) (hF‚ÇÅ : F.is_iso_ge n‚ÇÅ) (hF‚ÇÇ : F.quasi_iso_ge n‚ÇÅ),
    epi (homology_map (F.1.p) n‚ÇÄ) := sorry

lemma step‚ÇÇ (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1)
  (hf : ‚àÄ (q : ‚Ñ§) (hq : n‚ÇÅ ‚â§ q), is_iso (homology_map f q))
  (hf' : epi (homology_map f n‚ÇÄ)) :
  ‚àÉ (F : cof_fib_factorisation f) (hF‚ÇÅ : F.is_iso_ge n‚ÇÄ),
    F.quasi_iso_ge n‚ÇÄ := sorry

lemma step‚ÇÅ‚ÇÇ (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1)
  (hf : ‚àÄ (q : ‚Ñ§) (hq : n‚ÇÅ ‚â§ q), is_iso (homology_map f q)) :
  ‚àÉ (F : cof_fib_factorisation f) (hF : F.is_iso_ge n‚ÇÅ),
    F.quasi_iso_ge n‚ÇÄ :=
begin
  obtain ‚ü®F‚ÇÅ, hF‚ÇÅ, hF‚ÇÇ, hp‚ü© := step‚ÇÅ f n‚ÇÄ n‚ÇÅ hn‚ÇÅ hf,
  obtain ‚ü®F‚ÇÇ, hF‚ÇÇ, hF‚ÇÇ'‚ü© := step‚ÇÇ F‚ÇÅ.1.p n‚ÇÄ n‚ÇÅ hn‚ÇÅ hF‚ÇÇ hp,
  let F : cof_fib_factorisation f :=
  ‚ü®{ Y := F‚ÇÇ.1.Y,
    i := F‚ÇÅ.1.i ‚â´ F‚ÇÇ.1.i,
    p := F‚ÇÇ.1.p, },
  { hi := cof_stable_under_composition _ _ F‚ÇÅ.2.hi F‚ÇÇ.2.hi,
    hp := F‚ÇÇ.2.hp, }‚ü©,
  refine ‚ü®F, _, hF‚ÇÇ'‚ü©,
  { intros i hi,
    dsimp [F],
    haveI := hF‚ÇÅ i hi,
    haveI : is_iso (F‚ÇÇ.obj.i.f i) := hF‚ÇÇ i (by linarith),
    erw homological_complex.comp_f,
    apply_instance, },
end

lemma step' (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1)
  (F : cof_fib_factorisation_quasi_iso_ge f n‚ÇÅ) :
  ‚àÉ (F' : cof_fib_factorisation_quasi_iso_ge f n‚ÇÄ) (œÜ : F.obj.obj ‚ü∂ F'.obj.obj),
    ‚àÄ (i : ‚Ñ§) (hi : n‚ÇÅ ‚â§ i), is_iso ((hom_factorisation.hom.œÑ œÜ).f i) :=
begin
  obtain ‚ü®G, hG, hG'‚ü© := step‚ÇÅ‚ÇÇ F.1.1.p n‚ÇÄ n‚ÇÅ hn‚ÇÅ F.2,
  let F' : cof_fib_factorisation f :=
  ‚ü®{ Y := G.1.Y,
    i :=  F.1.1.i ‚â´ G.1.i,
    p := G.1.p, },
  { hi := cof_stable_under_composition _ _ F.1.2.hi G.2.hi,
    hp := G.2.hp, }‚ü©,
  exact ‚ü®‚ü®F', hG'‚ü©, { œÑ := G.1.i, }, hG‚ü©,
end

variables {n‚ÇÄ : ‚Ñ§} (F‚ÇÄ : cof_fib_factorisation_quasi_iso_ge f n‚ÇÄ)

def step (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1)
  (F‚ÇÅ : cof_fib_factorisation_quasi_iso_ge f n‚ÇÅ) :
  cof_fib_factorisation_quasi_iso_ge f n‚ÇÄ :=
(step' f hf n‚ÇÄ n‚ÇÅ hn‚ÇÅ F‚ÇÅ).some

def step_map (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1)
  (F‚ÇÅ : cof_fib_factorisation_quasi_iso_ge f n‚ÇÅ) :
  F‚ÇÅ.obj.obj ‚ü∂ (step f hf n‚ÇÄ n‚ÇÅ hn‚ÇÅ F‚ÇÅ).obj.obj :=
(step' f hf n‚ÇÄ n‚ÇÅ hn‚ÇÅ F‚ÇÅ).some_spec.some

lemma is_iso_step_map_œÑ_f (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1)
  (F‚ÇÅ : cof_fib_factorisation_quasi_iso_ge f n‚ÇÅ) (i : ‚Ñ§) (hi : n‚ÇÅ ‚â§ i) :
  is_iso ((hom_factorisation.hom.œÑ (step_map f hf n‚ÇÄ n‚ÇÅ hn‚ÇÅ F‚ÇÅ)).f i) :=
(step' f hf n‚ÇÄ n‚ÇÅ hn‚ÇÅ F‚ÇÅ).some_spec.some_spec i hi

noncomputable def sequence : Œ† (k : ‚Ñï), cof_fib_factorisation_quasi_iso_ge f (n‚ÇÄ-k)
| 0 := ‚ü®F‚ÇÄ.1, Œª i hi, F‚ÇÄ.2 i (by simpa using hi)‚ü©
| (k+1) := step f hf _ _ (by { simp only [nat.cast_add, algebra_map.coe_one],linarith, })
    (sequence k)

def sequence_next_step_iso (k‚ÇÄ k‚ÇÅ : ‚Ñï) (h : k‚ÇÅ = k‚ÇÄ + 1) :
  (step f hf (n‚ÇÄ - ‚Üëk‚ÇÅ) (n‚ÇÄ - ‚Üëk‚ÇÄ) (by { subst h, simp only [nat.cast_add,
    algebra_map.coe_one, sub_add_eq_sub_sub, sub_add_cancel], })
    (sequence f hf F‚ÇÄ k‚ÇÄ)).obj.obj ‚âÖ
  (sequence f hf F‚ÇÄ k‚ÇÅ).obj.obj :=
eq_to_iso (by { subst h, unfold sequence, })

instance (k‚ÇÄ k‚ÇÅ : ‚Ñï) (h : k‚ÇÅ = k‚ÇÄ + 1)  :
  is_iso ((sequence_next_step_iso f hf F‚ÇÄ k‚ÇÄ k‚ÇÅ h).hom.œÑ) :=
hom_factorisation.is_iso_œÑ _

def sequence_map (k‚ÇÄ k‚ÇÅ : ‚Ñï) (h : k‚ÇÅ = k‚ÇÄ + 1) :
  (sequence f hf F‚ÇÄ k‚ÇÄ).obj.obj ‚ü∂ (sequence f hf F‚ÇÄ k‚ÇÅ).obj.obj :=
step_map f hf (n‚ÇÄ-k‚ÇÅ) (n‚ÇÄ-k‚ÇÄ) (by linarith) _ ‚â´
  (sequence_next_step_iso f hf F‚ÇÄ k‚ÇÄ k‚ÇÅ h).hom

lemma is_iso_sequence_map_œÑ_f (k‚ÇÄ k‚ÇÅ : ‚Ñï )(h : k‚ÇÅ = k‚ÇÄ + 1) (n : ‚Ñ§) (hn : n‚ÇÄ - k‚ÇÄ ‚â§ n) :
  is_iso ((sequence_map f hf F‚ÇÄ k‚ÇÄ k‚ÇÅ h).œÑ.f n) :=
begin
  unfold sequence_map,
  haveI := is_iso_step_map_œÑ_f f hf (n‚ÇÄ-k‚ÇÅ) _ (by linarith) (sequence f hf F‚ÇÄ k‚ÇÄ) n hn,
  erw [homological_complex.comp_f],
  apply_instance,
end

include F‚ÇÄ

def factorisation : cof_fib_factorisation f :=
begin
  sorry,
end

lemma quasi_iso_factorisation_p (n : ‚Ñ§) :
  quasi_iso (Œπ.map (factorisation f hf F‚ÇÄ).1.p) := sorry

end induction

lemma for_fibration {X Z : bounded_above_cochain_complex C} (f : X ‚ü∂ Z)
  (hf : arrow_classes.fib f) :
  ‚àÉ (Y : bounded_above_cochain_complex C) (i : X ‚ü∂ Y)
    (hi : arrow_classes.cof i) (p : Y ‚ü∂ Z)
    (hp : arrow_classes.triv_fib p), f = i ‚â´ p :=
begin
  obtain ‚ü®nx, hnx‚ü© := X.2,
  obtain ‚ü®ny, hny‚ü© := Z.2,
  haveI : X.obj.is_strictly_le nx := ‚ü®hnx‚ü©,
  haveI : Z.obj.is_strictly_le ny := ‚ü®hny‚ü©,
  let n‚ÇÄ := max (nx+1) (ny+1),
  have hnx' : nx + 1 ‚â§ n‚ÇÄ := le_max_left _ _,
  have hny' : ny + 1 ‚â§ n‚ÇÄ := le_max_right _ _,
  let F‚ÇÄ : cof_fib_factorisation_quasi_iso_ge f n‚ÇÄ :=
  ‚ü®‚ü®{ Y := X,
    i := ùüô _,
    p := f, },
  { hi := Œª n, preadditive.mono_with_projective_coker.id_mem _,
    hp := hf, }‚ü©,
    Œª i hi, ‚ü®‚ü®0,
      limits.is_zero.eq_of_src (cochain_complex.is_le.is_zero _ nx _ (by linarith)) _ _,
      limits.is_zero.eq_of_src (cochain_complex.is_le.is_zero _ ny _ (by linarith)) _ _‚ü©‚ü©‚ü©,
  let F := induction.factorisation f hf F‚ÇÄ,
  exact ‚ü®_, _, F.2.hi, _,
    ‚ü®F.2.hp,
      ‚ü®Œª n, by { haveI := induction.quasi_iso_factorisation_p f hf F‚ÇÄ n, apply_instance, }‚ü©‚ü©,
    F.1.fac.symm‚ü©,
end

end CM5b

lemma CM5b : (arrow_classes : category_with_fib_cof_weq (bounded_above_cochain_complex C)).CM5b :=
Œª X Z f, begin
  obtain ‚ü®X', j, hj, q, hq, rfl‚ü© := projective_model_structure.CM5a f,
  obtain ‚ü®Y, i, hi, p, hp, rfl‚ü© := CM5b.for_fibration q hq,
  exact ‚ü®Y, j ‚â´ i, cof_stable_under_composition j i hj.1 hi, p, hp, by rw assoc‚ü©,
end

lemma CM5 : (arrow_classes : category_with_fib_cof_weq (bounded_above_cochain_complex C)).CM5 :=
  ‚ü®CM5a, CM5b‚ü©

end projective_model_structure

end bounded_above_cochain_complex
