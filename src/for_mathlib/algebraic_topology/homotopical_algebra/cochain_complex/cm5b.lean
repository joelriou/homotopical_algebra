/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import for_mathlib.algebraic_topology.homotopical_algebra.cochain_complex.cm5a

open category_theory category_theory.category algebraic_topology

variables {C : Type*} [category C]

namespace category_theory

variables {X Z : C} (f : X ‚ü∂ Z)

structure hom_factorisation :=
(Y : C)
(i : X ‚ü∂ Y)
(p : Y ‚ü∂ Z)
(fac' : i ‚â´ p = f . obviously)

namespace hom_factorisation

restate_axiom fac'
attribute [simp, reassoc] fac

variables {f} (F‚ÇÅ F‚ÇÇ F‚ÇÉ : hom_factorisation f)

@[ext]
structure hom :=
(œÑ : F‚ÇÅ.Y ‚ü∂ F‚ÇÇ.Y)
(commi' : F‚ÇÅ.i ‚â´ œÑ = F‚ÇÇ.i . obviously)
(commp' : œÑ ‚â´ F‚ÇÇ.p = F‚ÇÅ.p . obviously)

namespace hom

restate_axiom commi'
restate_axiom commp'
attribute [simp, reassoc] commi commp

end hom

instance : category (hom_factorisation f) :=
{ hom := hom,
  id := Œª F, { œÑ := ùüô _, },
  comp := Œª F‚ÇÅ F‚ÇÇ F‚ÇÉ œÜ œÜ', { œÑ := œÜ.œÑ ‚â´ œÜ'.œÑ, }, }

@[simp] lemma id_œÑ (F : hom_factorisation f) : hom.œÑ (ùüô F) = ùüô _ := rfl
@[simp, reassoc] lemma comp_œÑ {F‚ÇÅ F‚ÇÇ F‚ÇÉ : hom_factorisation f} (œÜ : F‚ÇÅ ‚ü∂ F‚ÇÇ) (œÜ' : F‚ÇÇ ‚ü∂ F‚ÇÉ) :
  (œÜ ‚â´ œÜ').œÑ = œÜ.œÑ ‚â´ œÜ'.œÑ := rfl

end hom_factorisation

end category_theory

open category_theory

variables [abelian C] [enough_projectives C]

namespace bounded_above_cochain_complex

namespace projective_model_structure

namespace CM5b

variables {X Z : bounded_above_cochain_complex C} {f : X ‚ü∂ Z}

structure is_cof_fib_factorisation (F : hom_factorisation f) : Prop :=
(hi : arrow_classes.cof F.i)
(hp : arrow_classes.fib F.p)

variable (f)

@[derive category]
def cof_fib_factorisation := full_subcategory (@is_cof_fib_factorisation _ _ _ _ _ _ f)

variable {f}

def cof_fib_factorisation.quasi_iso_ge (F : cof_fib_factorisation f) (n : ‚Ñ§) : Prop :=
  ‚àÄ (i : ‚Ñ§) (hi : i ‚â• n), is_iso (homology_map F.1.p i)

def cof_fib_factorisation.is_iso_ge (F : cof_fib_factorisation f) (n : ‚Ñ§) : Prop :=
  ‚àÄ (i : ‚Ñ§) (hi : i ‚â• n), is_iso (F.1.i.f i)

namespace induction

variables (f) (hf : arrow_classes.fib f)

include hf

lemma step‚ÇÅ (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1)
  (hf : ‚àÄ (q : ‚Ñ§) (hq : q ‚â• n‚ÇÅ), is_iso (homology_map f q)) :
  ‚àÉ (F : cof_fib_factorisation f) (hF‚ÇÅ : F.is_iso_ge n‚ÇÅ) (hF‚ÇÇ : F.quasi_iso_ge n‚ÇÅ),
    epi (homology_map (F.1.p) n‚ÇÄ) := sorry

lemma step‚ÇÇ (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1)
  (hf : ‚àÄ (q : ‚Ñ§) (hq : q ‚â• n‚ÇÅ), is_iso (homology_map f q))
  (hf' : epi (homology_map f n‚ÇÄ)) :
  ‚àÉ (F : cof_fib_factorisation f) (hF‚ÇÅ : F.is_iso_ge n‚ÇÄ),
    F.quasi_iso_ge n‚ÇÄ := sorry

lemma step‚ÇÅ‚ÇÇ (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1)
  (hf : ‚àÄ (q : ‚Ñ§) (hq : q ‚â• n‚ÇÅ), is_iso (homology_map f q)) :
  ‚àÉ (F : cof_fib_factorisation f) (hF : F.is_iso_ge n‚ÇÅ),
    F.quasi_iso_ge n‚ÇÄ :=
begin
  obtain ‚ü®F‚ÇÅ, hF‚ÇÅ, hF‚ÇÇ, hp‚ü© := step‚ÇÅ f n‚ÇÄ n‚ÇÅ hn‚ÇÅ hf,
  obtain ‚ü®F‚ÇÇ, hF‚ÇÇ, hF‚ÇÇ'‚ü© := step‚ÇÇ F‚ÇÅ.1.p n‚ÇÄ n‚ÇÅ hn‚ÇÅ hF‚ÇÇ hp,
  let F : cof_fib_factorisation f :=
  ‚ü®{ Y := F‚ÇÇ.1.Y,
    i := F‚ÇÅ.1.i ‚â´ F‚ÇÇ.1.i,
    p := F‚ÇÇ.1.p, },
  { hi := cof_stable_under_composition _ _ F‚ÇÅ.2.hi F‚ÇÇ.2.hi,
    hp := F‚ÇÇ.2.hp, }‚ü©,
  refine ‚ü®F, _, hF‚ÇÇ'‚ü©,
  { intros i hi,
    dsimp [F],
    haveI := hF‚ÇÅ i hi,
    haveI : is_iso (F‚ÇÇ.obj.i.f i) := hF‚ÇÇ i (by linarith),
    erw homological_complex.comp_f,
    apply_instance, },
end

lemma step (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1)
  (F : cof_fib_factorisation f) (hF : F.quasi_iso_ge n‚ÇÅ):
  ‚àÉ (F' : cof_fib_factorisation f) (hF': F'.quasi_iso_ge n‚ÇÄ) (œÜ : F ‚ü∂ F'),
    ‚àÄ (i : ‚Ñ§) (hi : i ‚â• n‚ÇÅ), is_iso ((hom_factorisation.hom.œÑ œÜ).f i) :=
begin
  obtain ‚ü®G, hG, hG'‚ü© := step‚ÇÅ‚ÇÇ F.1.p n‚ÇÄ n‚ÇÅ hn‚ÇÅ hF,
  let F' : cof_fib_factorisation f :=
  ‚ü®{ Y := G.1.Y,
    i :=  F.1.i ‚â´ G.1.i,
    p := G.1.p, },
  { hi := cof_stable_under_composition _ _ F.2.hi G.2.hi,
    hp := G.2.hp, }‚ü©,
  exact ‚ü®F', hG', { œÑ := G.1.i, }, hG‚ü©,
end

end induction

lemma for_fibration {X Z : bounded_above_cochain_complex C} (f : X ‚ü∂ Z)
  (hf : arrow_classes.fib f) :
  ‚àÉ (Y : bounded_above_cochain_complex C) (i : X ‚ü∂ Y)
    (hi : arrow_classes.cof i) (p : Y ‚ü∂ Z)
    (hp : arrow_classes.triv_fib p), f = i ‚â´ p :=
begin
  sorry
end

end CM5b

lemma CM5b : (arrow_classes : category_with_fib_cof_weq (bounded_above_cochain_complex C)).CM5b :=
Œª X Z f, begin
  obtain ‚ü®X', j, hj, q, hq, rfl‚ü© := projective_model_structure.CM5a f,
  obtain ‚ü®Y, i, hi, p, hp, rfl‚ü© := CM5b_for_fibration q hq,
  exact ‚ü®Y, j ‚â´ i, cof_stable_under_composition j i hj.1 hi, p, hp, by rw assoc‚ü©,
end

lemma CM5 : (arrow_classes : category_with_fib_cof_weq (bounded_above_cochain_complex C)).CM5 :=
  ‚ü®CM5a, CM5b‚ü©

end projective_model_structure

end bounded_above_cochain_complex
