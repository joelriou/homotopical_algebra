/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import for_mathlib.algebraic_topology.homotopical_algebra.cochain_complex.cm5a
import for_mathlib.algebra.homology.double
import for_mathlib.algebra.homology.k_projective
import category_theory.filtered
import for_mathlib.algebra.homology.homology_sequence

noncomputable theory

open category_theory category_theory.category algebraic_topology
  category_theory.limits

variables {C : Type*} [category C]

namespace category_theory

namespace functor

section

variables {J : Type*} [category J] (F : J ‚•§ C) [is_filtered J]

open is_filtered

def is_eventually_constant_from (i : J) : Prop :=
‚àÄ (j : J) (f : i ‚ü∂ j), is_iso (F.map f)

lemma is_eventually_constant_from.of_map {i i' : J} (g : i ‚ü∂ i')
  (hi : F.is_eventually_constant_from i) :
  F.is_eventually_constant_from i' :=
Œª j f, begin
  haveI : is_iso (F.map (g ‚â´ f)) := hi _ _,
  haveI : is_iso (F.map g) := hi _ _,
  exact is_iso.of_is_iso_fac_left (F.map_comp g f).symm,
end

class is_eventually_constant : Prop :=
(condition [] : ‚àÉ (i : J), F.is_eventually_constant_from i)

namespace is_eventually_constant

variable [is_eventually_constant F]

def index : J :=
  (is_eventually_constant.condition F).some

instance {j : J} (f : index F ‚ü∂ j) :
  is_iso (F.map f) := (is_eventually_constant.condition F).some_spec j f

lemma map_from_index_eq {j : J} (f‚ÇÅ f‚ÇÇ : index F ‚ü∂ j) :
  F.map f‚ÇÅ = F.map f‚ÇÇ :=
begin
  haveI : is_iso (F.map (coeq_hom f‚ÇÅ f‚ÇÇ)) := begin
    have eq := F.map_comp f‚ÇÅ (coeq_hom f‚ÇÅ f‚ÇÇ),
    exact is_iso.of_is_iso_fac_left eq.symm,
  end,
  simp only [‚Üê cancel_mono (F.map (coeq_hom f‚ÇÅ f‚ÇÇ)), ‚Üê F.map_comp],
  exact F.congr_map (coeq_condition f‚ÇÅ f‚ÇÇ),
end

lemma map_is_iso {j‚ÇÅ j‚ÇÇ : J} (g : j‚ÇÅ ‚ü∂ j‚ÇÇ) (f‚ÇÅ : index F ‚ü∂ j‚ÇÅ) :
  is_iso (F.map g) :=
is_iso.of_is_iso_fac_left (F.map_comp f‚ÇÅ g).symm


lemma map_eq {j j' : J} (f‚ÇÅ f‚ÇÇ : j ‚ü∂ j') (g : index F ‚ü∂ j') :
  F.map f‚ÇÅ = F.map f‚ÇÇ :=
begin
  haveI : is_iso (F.map (coeq_hom f‚ÇÅ f‚ÇÇ)) := map_is_iso F _ g,
  simp only [‚Üê cancel_mono (F.map (coeq_hom f‚ÇÅ f‚ÇÇ)), ‚Üê F.map_comp, coeq_condition],
end

@[simps]
def cocone : cocone F :=
{ X := F.obj (index F),
  Œπ :=
  { app := Œª j, F.map (left_to_max j (index F)) ‚â´
        category_theory.inv (F.map (right_to_max j (index F))),
    naturality' := Œª j j' g, begin
      let k := (is_filtered.max j (index F)),
      let k' := (is_filtered.max j' (index F)),
      let m := is_filtered.max k k',
      have eq := map_from_index_eq F (right_to_max _ _ ‚â´ (left_to_max _ _ : _ ‚ü∂ m))
        (right_to_max _ _ ‚â´ (right_to_max _ _ : _ ‚ü∂ m)),
      simp only [F.map_comp] at eq,
      haveI : is_iso (F.map (right_to_max k k')) := map_is_iso F _ (right_to_max _ _),
      erw [const_obj_map, comp_id, ‚Üê cancel_mono (F.map (right_to_max _ _ : _ ‚ü∂ k')),
        assoc, assoc, is_iso.inv_hom_id, comp_id, ‚Üê cancel_mono (F.map (right_to_max k k')),
        assoc, assoc, assoc, ‚Üê eq, is_iso.inv_hom_id_assoc, ‚Üê F.map_comp, ‚Üê F.map_comp,
        ‚Üê F.map_comp],
      exact map_eq F _ _ (right_to_max _ _ ‚â´ right_to_max _ _),
    end }, }

lemma cocone_Œπ_app_eq {j : J} (g : index F ‚ü∂ j) :
  (cocone F).Œπ.app j = category_theory.inv (F.map g) :=
begin
  dsimp,
  let h := coeq_hom (g ‚â´ left_to_max _ (index F)) (right_to_max _ _),
  haveI : is_iso (F.map h) := map_is_iso F _ (right_to_max _ _),
  simpa only [‚Üê cancel_epi (F.map g), is_iso.hom_inv_id, assoc, is_iso.hom_inv_id_assoc,
    ‚Üê cancel_mono (F.map (right_to_max j (index F))), is_iso.inv_hom_id, comp_id,
    ‚Üê cancel_mono (F.map h), F.map_comp]
    using F.congr_map (coeq_condition (g ‚â´ left_to_max _ (index F)) (right_to_max _ _)),
end

@[simp]
lemma cocone_Œπ_app_index :
  (cocone F).Œπ.app (index F) = ùüô _ :=
begin
  simp only [cocone_Œπ_app_eq F (ùüô (index F)), F.map_id],
  dsimp,
  simp only [is_iso.inv_id],
end

def cocone_is_colimit : is_colimit (cocone F) :=
{ desc := Œª s, s.Œπ.app (index F),
  fac' := Œª s j, begin
    dsimp,
    have eq := s.Œπ.naturality (right_to_max j (index F)),
    dsimp at eq,
    rw comp_id at eq,
    rw [‚Üê eq, assoc, is_iso.inv_hom_id_assoc, cocone.w],
  end,
  uniq' := Œª s m hm, by simpa only [cocone_Œπ_app_index, id_comp] using hm (index F), }

@[priority 100]
instance : has_colimit F :=
‚ü®‚ü®‚ü®_, cocone_is_colimit F‚ü©‚ü©‚ü©

lemma is_iso_cocone_Œπ_app' (j : J) (g : index F ‚ü∂ j) : is_iso (colimit.Œπ F j) :=
begin
  haveI : is_iso ((cocone F).Œπ.app j),
  { rw cocone_Œπ_app_eq F g,
    apply_instance, },
  exact is_iso.of_is_iso_fac_right
    (limits.colimit.comp_cocone_point_unique_up_to_iso_inv (cocone_is_colimit F) j),
end

lemma is_iso_colimit_Œπ_app (i : J) (hi : F.is_eventually_constant_from i) :
  is_iso (colimit.Œπ F i) :=
begin
  haveI : is_iso (F.map (left_to_max i (index F))) := hi _ _,
  haveI : is_iso (colimit.Œπ F (is_filtered.max i (index F))) :=
    is_iso_cocone_Œπ_app' _ _ (right_to_max _ _),
  rw ‚Üê colimit.w F (left_to_max i (index F)),
  apply_instance,
end

end is_eventually_constant

end

variables {X : ‚Ñï ‚Üí C} (œÜ : Œ† n, X n ‚ü∂ X (n+1))

namespace mk_of_sequence

lemma congr_œÜ (n n' : ‚Ñï) (h : n = n') :
  œÜ n = eq_to_hom (by rw h) ‚â´ œÜ n' ‚â´ eq_to_hom (by rw h) :=
by { subst h, simp only [eq_to_hom_refl, comp_id, id_comp], }

def f_aux (n : ‚Ñï) : Œ† (k : ‚Ñï), X n ‚ü∂ X (n+k)
|0 := eq_to_hom (by rw add_zero)
|(k+1) := f_aux k ‚â´ œÜ (n+k) ‚â´ eq_to_hom (by rw add_assoc)

lemma congr_f_aux (n k k' : ‚Ñï) (h : k = k') :
  f_aux œÜ n k = f_aux œÜ n k' ‚â´ eq_to_hom (by rw h) :=
by { subst h, simp only [eq_to_hom_refl, comp_id], }

lemma congr_f_aux' (n n' k k' : ‚Ñï) (hn : n = n') (hk : k = k') :
  f_aux œÜ n k = eq_to_hom (by rw hn) ‚â´ f_aux œÜ n' k' ‚â´ eq_to_hom (by rw [hn, hk]) :=
by { substs hn hk, simp only [eq_to_hom_refl, comp_id, id_comp], }

def f (n n' : ‚Ñï) (h : n ‚â§ n') : X n ‚ü∂ X n' :=
f_aux œÜ n (n'-n) ‚â´ eq_to_hom (by { congr', linarith, })

lemma congr_f (n‚ÇÅ n‚ÇÇ n‚ÇÇ' : ‚Ñï) (h : n‚ÇÅ ‚â§ n‚ÇÇ) (h‚ÇÇ : n‚ÇÇ = n‚ÇÇ') :
  f œÜ n‚ÇÅ n‚ÇÇ h = f œÜ n‚ÇÅ n‚ÇÇ' (h.trans (by rw h‚ÇÇ)) ‚â´ eq_to_hom (by rw h‚ÇÇ) :=
by { subst h‚ÇÇ, rw [eq_to_hom_refl, comp_id], }

lemma f_eq_f_aux_comp_eq_to_hom (n n' r : ‚Ñï) (h : n' = n+r) :
  f œÜ n n' (nat.le.intro h.symm)= f_aux œÜ n r ‚â´ eq_to_hom (by rw h) :=
begin
  have hr : r = n'-n := by simp only [h, add_tsub_cancel_left],
  subst hr,
  refl,
end

@[simp]
lemma f_eq_id (n : ‚Ñï) : f œÜ n n (by refl) = ùüô _ :=
begin
  rw f_eq_f_aux_comp_eq_to_hom œÜ n n 0 (add_zero n).symm,
  dsimp [f_aux],
  rw comp_id,
end

lemma f_comp_next (n‚ÇÅ n‚ÇÇ n‚ÇÉ : ‚Ñï) (h : n‚ÇÅ ‚â§ n‚ÇÇ) (hn‚ÇÉ : n‚ÇÉ = n‚ÇÇ+1) :
  f œÜ n‚ÇÅ n‚ÇÉ (h.trans (by simpa only [hn‚ÇÉ] using nat.le_succ n‚ÇÇ)) =
    f œÜ n‚ÇÅ n‚ÇÇ h ‚â´ œÜ n‚ÇÇ ‚â´ eq_to_hom (by rw hn‚ÇÉ) :=
begin
  rw le_iff_exists_add at h,
  obtain ‚ü®r, rfl‚ü© := h,
  rw [f_eq_f_aux_comp_eq_to_hom œÜ n‚ÇÅ (n‚ÇÅ+r) r rfl,
    f_eq_f_aux_comp_eq_to_hom œÜ n‚ÇÅ n‚ÇÉ (r+1) (by linarith)],
  unfold f_aux,
  simpa only [eq_to_hom_refl, comp_id, assoc],
end

lemma f_next (n‚ÇÅ n‚ÇÇ : ‚Ñï) (h : n‚ÇÇ = n‚ÇÅ+1) :
  f œÜ n‚ÇÅ n‚ÇÇ (by simpa only [h] using nat.le_succ n‚ÇÅ) = œÜ n‚ÇÅ ‚â´ eq_to_hom (by rw h) :=
by simp only [f_comp_next œÜ n‚ÇÅ n‚ÇÅ n‚ÇÇ (by refl) h, f_eq_id, id_comp]

lemma f_comp (n‚ÇÅ n‚ÇÇ n‚ÇÉ : ‚Ñï) (h‚ÇÅ‚ÇÇ : n‚ÇÅ ‚â§ n‚ÇÇ) (h‚ÇÇ‚ÇÉ : n‚ÇÇ ‚â§ n‚ÇÉ) :
  f œÜ n‚ÇÅ n‚ÇÇ h‚ÇÅ‚ÇÇ ‚â´ f œÜ n‚ÇÇ n‚ÇÉ h‚ÇÇ‚ÇÉ = f œÜ n‚ÇÅ n‚ÇÉ (h‚ÇÅ‚ÇÇ.trans h‚ÇÇ‚ÇÉ) :=
begin
  rw le_iff_exists_add at h‚ÇÇ‚ÇÉ,
  obtain ‚ü®r, rfl‚ü© := h‚ÇÇ‚ÇÉ,
  induction r with r hr,
  { simp only [congr_f œÜ n‚ÇÇ (n‚ÇÇ + 0) n‚ÇÇ (by linarith) (add_zero n‚ÇÇ),
      congr_f œÜ n‚ÇÅ (n‚ÇÇ + 0) n‚ÇÇ (by linarith) (add_zero n‚ÇÇ),
      f_eq_id, eq_to_hom_refl, comp_id], },
  { simp only [f_comp_next œÜ n‚ÇÇ (n‚ÇÇ+r) (n‚ÇÇ+r.succ) (by linarith) rfl,
      f_comp_next œÜ n‚ÇÅ (n‚ÇÇ+r) (n‚ÇÇ+r.succ) (by linarith) rfl,
      reassoc_of (hr (by linarith))], },
end

lemma is_iso_f (n‚ÇÅ n‚ÇÇ : ‚Ñï) (h‚ÇÅ‚ÇÇ : n‚ÇÅ ‚â§ n‚ÇÇ)
  (H : ‚àÄ (p : ‚Ñï) (hp : n‚ÇÅ ‚â§ p) (hp' : p < n‚ÇÇ), is_iso (œÜ p)) :
  is_iso (f œÜ n‚ÇÅ n‚ÇÇ h‚ÇÅ‚ÇÇ) :=
begin
  rw le_iff_exists_add at h‚ÇÅ‚ÇÇ,
  unfreezingI { obtain ‚ü®r, rfl‚ü© := h‚ÇÅ‚ÇÇ, },
  unfreezingI { induction r with r hr, },
  { simp only [congr_f œÜ n‚ÇÅ (n‚ÇÅ+0) n‚ÇÅ (by linarith) (by linarith),
      f_eq_id, eq_to_hom_refl, comp_id],
    apply_instance, },
  { rw congr_f œÜ n‚ÇÅ (n‚ÇÅ+r.succ) (n‚ÇÅ+r+1) (by linarith)
      (by { rw nat.succ_eq_add_one, linarith, }),
    rw ‚Üê f_comp œÜ n‚ÇÅ (n‚ÇÅ+r) (n‚ÇÅ+r+1) (by linarith) (by linarith),
    haveI := H (n‚ÇÅ+r) (by linarith) (by { rw nat.succ_eq_add_one, linarith, }),
    haveI : is_iso (f œÜ (n‚ÇÅ+r) (n‚ÇÅ+r+1) (by linarith)),
    { rw f_next œÜ _ _ rfl, apply_instance, },
    haveI := hr (by linarith) (Œª p hp hp', H p hp (by { rw nat.succ_eq_add_one, linarith, })),
    apply_instance, },
end

variable (œà : Œ† (n‚ÇÄ n‚ÇÅ : ‚Ñï) (h : n‚ÇÅ = n‚ÇÄ+1), X n‚ÇÄ ‚ü∂ X n‚ÇÅ)

@[simp]
def restriction (n : ‚Ñï) : X n ‚ü∂ X (n+1) := œà n (n+1) rfl

lemma f_of_restriction (n‚ÇÄ n‚ÇÅ : ‚Ñï) (h : n‚ÇÅ = n‚ÇÄ + 1) :
  f (restriction œà) n‚ÇÄ n‚ÇÅ (by simpa only [h] using nat.le_succ n‚ÇÄ) = œà n‚ÇÄ n‚ÇÅ h :=
begin
  subst h,
  simp only [restriction, f_next _ n‚ÇÄ (n‚ÇÄ+1) rfl, eq_to_hom_refl, comp_id],
end

end mk_of_sequence

@[simps]
def mk_of_sequence : ‚Ñï ‚•§ C :=
{ obj := X,
  map := Œª n‚ÇÅ n‚ÇÇ g, mk_of_sequence.f œÜ n‚ÇÅ n‚ÇÇ (le_of_hom g),
  map_id' := mk_of_sequence.f_eq_id _,
  map_comp' := Œª n‚ÇÅ n‚ÇÇ n‚ÇÉ g g', (mk_of_sequence.f_comp œÜ n‚ÇÅ n‚ÇÇ n‚ÇÉ _ _).symm, }

end functor

variables {X Z : C} (f : X ‚ü∂ Z)

structure hom_factorisation :=
(Y : C)
(i : X ‚ü∂ Y)
(p : Y ‚ü∂ Z)
(fac' : i ‚â´ p = f . obviously)

namespace hom_factorisation

restate_axiom fac'
attribute [simp, reassoc] fac

variables {f} (F‚ÇÅ F‚ÇÇ F‚ÇÉ : hom_factorisation f)

@[ext]
structure hom :=
(œÑ : F‚ÇÅ.Y ‚ü∂ F‚ÇÇ.Y)
(commi' : F‚ÇÅ.i ‚â´ œÑ = F‚ÇÇ.i . obviously)
(commp' : œÑ ‚â´ F‚ÇÇ.p = F‚ÇÅ.p . obviously)

namespace hom

restate_axiom commi'
restate_axiom commp'
attribute [simp, reassoc] commi commp

end hom

instance : category (hom_factorisation f) :=
{ hom := hom,
  id := Œª F, { œÑ := ùüô _, },
  comp := Œª F‚ÇÅ F‚ÇÇ F‚ÇÉ œÜ œÜ', { œÑ := œÜ.œÑ ‚â´ œÜ'.œÑ, }, }

variable (f)

def eval : hom_factorisation f ‚•§ C :=
{ obj := Œª F, F.Y,
  map := Œª F‚ÇÅ F‚ÇÇ œÜ, œÜ.œÑ, }

variable {f}

@[simp] lemma id_œÑ (F : hom_factorisation f) : hom.œÑ (ùüô F) = ùüô _ := rfl
@[simp, reassoc] lemma comp_œÑ {F‚ÇÅ F‚ÇÇ F‚ÇÉ : hom_factorisation f} (œÜ : F‚ÇÅ ‚ü∂ F‚ÇÇ) (œÜ' : F‚ÇÇ ‚ü∂ F‚ÇÉ) :
  (œÜ ‚â´ œÜ').œÑ = œÜ.œÑ ‚â´ œÜ'.œÑ := rfl

lemma eq_to_hom_œÑ {F‚ÇÅ F‚ÇÇ : hom_factorisation f} (eq : F‚ÇÅ = F‚ÇÇ) :
  hom.œÑ (eq_to_hom eq) = eq_to_hom (by rw eq) := by { subst eq, refl, }

lemma is_iso_œÑ {F‚ÇÅ F‚ÇÇ : hom_factorisation f} (œÜ : F‚ÇÅ ‚ü∂ F‚ÇÇ) [is_iso œÜ] :
  is_iso œÜ.œÑ :=
begin
  change is_iso ((eval f).map œÜ),
  apply_instance,
end

end hom_factorisation

end category_theory

open category_theory

variables [abelian C] [enough_projectives C]

namespace bounded_above_cochain_complex

namespace projective_model_structure

namespace CM5b

variables {X Z : bounded_above_cochain_complex C} {f : X ‚ü∂ Z}

instance (n : ‚Ñ§) [is_iso f] : is_iso (f.f n) :=
begin
  change is_iso ((homological_complex.eval _ _ n).map ((induced_functor _).map f)),
  apply_instance,
end

structure is_cof_fib_factorisation (F : hom_factorisation f) : Prop :=
(hi : arrow_classes.cof F.i)
(hp : arrow_classes.fib F.p)

variable (f)

@[derive category]
def cof_fib_factorisation := full_subcategory (@is_cof_fib_factorisation _ _ _ _ _ _ f)

@[simps]
def cof_fib_factorisation.forget : cof_fib_factorisation f ‚•§ hom_factorisation f :=
full_subcategory_inclusion _

@[simps]
def cof_fib_factorisation.eval (n : ‚Ñ§) : cof_fib_factorisation f ‚•§ C :=
cof_fib_factorisation.forget f ‚ãô hom_factorisation.eval f ‚ãô
  bounded_above_cochain_complex.Œπ ‚ãô (homological_complex.eval C (complex_shape.up ‚Ñ§) n)

variable {f}

def cof_fib_factorisation.quasi_iso_ge (F : cof_fib_factorisation f) (n : ‚Ñ§) : Prop :=
  ‚àÄ (i : ‚Ñ§) (hi : n ‚â§ i), is_iso (homology_map F.1.p i)

variable (f)

@[derive category]
def cof_fib_factorisation_quasi_iso_ge (n : ‚Ñ§) :=
  full_subcategory (Œª (F : cof_fib_factorisation f), F.quasi_iso_ge n)

variable {f}

def cof_fib_factorisation.is_iso_ge (F : cof_fib_factorisation f) (n : ‚Ñ§) : Prop :=
  ‚àÄ (i : ‚Ñ§) (hi : n ‚â§ i), is_iso (F.1.i.f i)

namespace induction

variables (f) (hf : arrow_classes.fib f)

include hf

lemma step‚ÇÅ (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1)
  (hf' : ‚àÄ (q : ‚Ñ§) (hq : n‚ÇÅ ‚â§ q), is_iso (homology_map f q)) :
  ‚àÉ (F : cof_fib_factorisation f) (hF‚ÇÅ : F.is_iso_ge n‚ÇÅ) (hF‚ÇÇ : F.quasi_iso_ge n‚ÇÅ),
    epi (homology_map (F.1.p) n‚ÇÄ) :=
begin
  let Y : bounded_above_cochain_complex C :=
    ‚ü®homological_complex.biprod X.1
      ((homological_complex.single C (complex_shape.up ‚Ñ§) n‚ÇÄ).obj
        (projective.over (Z.1.cycles n‚ÇÄ))),
    sorry‚ü©,
  let i : X ‚ü∂ Y := homological_complex.biprod.inl,
  let p : Y ‚ü∂ Z := homological_complex.biprod.desc f
    (cochain_complex.desc_single _ _ ((homological_complex.single_obj_X_self _ _ _ _).hom ‚â´
    projective.œÄ _ ‚â´ Z.1.cycles_i n‚ÇÄ) (n‚ÇÄ+1) rfl
      (by simp only [assoc, homological_complex.cycles_i_d, comp_zero])),
  refine
  ‚ü®‚ü®{ Y := Y,
    i := i,
    p := p,
    fac' := homological_complex.biprod.inl_desc _ _, },
    { hi := _, hp := _ }‚ü©, _, _, _‚ü©,
  sorry { intro n,
    refine ‚ü®_, _, biprod.snd, ‚ü®‚ü®biprod.fst, biprod.inr,
      ‚ü®biprod.inl_fst, biprod.inr_snd, biprod.inl_snd, biprod.inr_fst, biprod.total‚ü©‚ü©‚ü©‚ü©,
    by_cases n = n‚ÇÄ,
    { subst h,
      exact projective.of_iso (homological_complex.single_obj_X_self C _ _ _).symm
        infer_instance, },
    { dsimp [homological_complex.single],
      rw if_neg h,
      apply_instance, }, },
  sorry { intro n,
    change epi (p.f n),
    haveI : epi (biprod.inl ‚â´ p.f n),
    { dsimp [p],
      rw biprod.inl_desc,
      exact hf n, },
    exact epi_of_epi biprod.inl (p.f n), },
  sorry { intros n hn,
    refine ‚ü®‚ü®biprod.fst, biprod.inl_fst, eq.symm _‚ü©‚ü©,
    dsimp,
    rw [‚Üê biprod.total, add_right_eq_self],
    convert comp_zero,
    apply is_zero.eq_of_src,
    rw if_neg,
    { apply is_zero_zero, },
    { linarith, }, },
  { sorry, },
  { sorry, },
end

lemma step‚ÇÇ (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1)
  (hf' : ‚àÄ (q : ‚Ñ§) (hq : n‚ÇÅ ‚â§ q), is_iso (homology_map f q))
  (hf'' : epi (homology_map f n‚ÇÄ)) :
  ‚àÉ (F : cof_fib_factorisation f) (hF‚ÇÅ : F.is_iso_ge n‚ÇÄ),
    F.quasi_iso_ge n‚ÇÄ := sorry

lemma step‚ÇÅ‚ÇÇ (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1)
  (hf' : ‚àÄ (q : ‚Ñ§) (hq : n‚ÇÅ ‚â§ q), is_iso (homology_map f q)) :
  ‚àÉ (F : cof_fib_factorisation f) (hF : F.is_iso_ge n‚ÇÅ),
    F.quasi_iso_ge n‚ÇÄ :=
begin
  obtain ‚ü®F‚ÇÅ, hF‚ÇÅ, hF‚ÇÇ, hp‚ü© := step‚ÇÅ f hf n‚ÇÄ n‚ÇÅ hn‚ÇÅ hf',
  obtain ‚ü®F‚ÇÇ, hF‚ÇÇ, hF‚ÇÇ'‚ü© := step‚ÇÇ F‚ÇÅ.1.p F‚ÇÅ.2.hp n‚ÇÄ n‚ÇÅ hn‚ÇÅ hF‚ÇÇ hp,
  let F : cof_fib_factorisation f :=
  ‚ü®{ Y := F‚ÇÇ.1.Y,
    i := F‚ÇÅ.1.i ‚â´ F‚ÇÇ.1.i,
    p := F‚ÇÇ.1.p, },
  { hi := cof_stable_under_composition _ _ F‚ÇÅ.2.hi F‚ÇÇ.2.hi,
    hp := F‚ÇÇ.2.hp, }‚ü©,
  refine ‚ü®F, _, hF‚ÇÇ'‚ü©,
  { intros i hi,
    dsimp [F],
    haveI := hF‚ÇÅ i hi,
    haveI : is_iso (F‚ÇÇ.obj.i.f i) := hF‚ÇÇ i (by linarith),
    erw homological_complex.comp_f,
    apply_instance, },
end

lemma step' (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1)
  (F : cof_fib_factorisation_quasi_iso_ge f n‚ÇÅ) :
  ‚àÉ (F' : cof_fib_factorisation_quasi_iso_ge f n‚ÇÄ) (œÜ : F.obj.obj ‚ü∂ F'.obj.obj),
    ‚àÄ (i : ‚Ñ§) (hi : n‚ÇÅ ‚â§ i), is_iso ((hom_factorisation.hom.œÑ œÜ).f i) :=
begin
  obtain ‚ü®G, hG, hG'‚ü© := step‚ÇÅ‚ÇÇ F.1.1.p F.1.2.hp n‚ÇÄ n‚ÇÅ hn‚ÇÅ F.2,
  let F' : cof_fib_factorisation f :=
  ‚ü®{ Y := G.1.Y,
    i :=  F.1.1.i ‚â´ G.1.i,
    p := G.1.p, },
  { hi := cof_stable_under_composition _ _ F.1.2.hi G.2.hi,
    hp := G.2.hp, }‚ü©,
  exact ‚ü®‚ü®F', hG'‚ü©, { œÑ := G.1.i, }, hG‚ü©,
end

variables {n‚ÇÄ : ‚Ñ§} (F‚ÇÄ : cof_fib_factorisation_quasi_iso_ge f n‚ÇÄ)

def step (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1)
  (F‚ÇÅ : cof_fib_factorisation_quasi_iso_ge f n‚ÇÅ) :
  cof_fib_factorisation_quasi_iso_ge f n‚ÇÄ :=
(step' f hf n‚ÇÄ n‚ÇÅ hn‚ÇÅ F‚ÇÅ).some

def step_map (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1)
  (F‚ÇÅ : cof_fib_factorisation_quasi_iso_ge f n‚ÇÅ) :
  F‚ÇÅ.obj.obj ‚ü∂ (step f hf n‚ÇÄ n‚ÇÅ hn‚ÇÅ F‚ÇÅ).obj.obj :=
(step' f hf n‚ÇÄ n‚ÇÅ hn‚ÇÅ F‚ÇÅ).some_spec.some

lemma is_iso_step_map_œÑ_f (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1)
  (F‚ÇÅ : cof_fib_factorisation_quasi_iso_ge f n‚ÇÅ) (i : ‚Ñ§) (hi : n‚ÇÅ ‚â§ i) :
  is_iso ((hom_factorisation.hom.œÑ (step_map f hf n‚ÇÄ n‚ÇÅ hn‚ÇÅ F‚ÇÅ)).f i) :=
(step' f hf n‚ÇÄ n‚ÇÅ hn‚ÇÅ F‚ÇÅ).some_spec.some_spec i hi

noncomputable def sequence : Œ† (k : ‚Ñï), cof_fib_factorisation_quasi_iso_ge f (n‚ÇÄ-k)
| 0 := ‚ü®F‚ÇÄ.1, Œª i hi, F‚ÇÄ.2 i (by simpa using hi)‚ü©
| (k+1) := step f hf _ _ (by { simp only [nat.cast_add, algebra_map.coe_one],linarith, })
    (sequence k)

def sequence_next_step_iso (k‚ÇÄ k‚ÇÅ : ‚Ñï) (h : k‚ÇÅ = k‚ÇÄ + 1) :
  (step f hf (n‚ÇÄ - ‚Üëk‚ÇÅ) (n‚ÇÄ - ‚Üëk‚ÇÄ) (by { subst h, simp only [nat.cast_add,
    algebra_map.coe_one, sub_add_eq_sub_sub, sub_add_cancel], })
    (sequence f hf F‚ÇÄ k‚ÇÄ)).obj ‚âÖ
  (sequence f hf F‚ÇÄ k‚ÇÅ).obj :=
eq_to_iso (by { subst h, unfold sequence, })

instance (k‚ÇÄ k‚ÇÅ : ‚Ñï) (h : k‚ÇÅ = k‚ÇÄ + 1) :
  is_iso ((sequence_next_step_iso f hf F‚ÇÄ k‚ÇÄ k‚ÇÅ h).hom.œÑ) :=
is_iso.of_iso ((cof_fib_factorisation.forget f ‚ãô
  hom_factorisation.eval f).map_iso (sequence_next_step_iso f hf F‚ÇÄ k‚ÇÄ k‚ÇÅ h))

lemma congr_sequence_obj (k k' : ‚Ñï) (h : k = k') :
  (sequence f hf F‚ÇÄ k).obj = (sequence f hf F‚ÇÄ k').obj :=
by subst h

def sequence_map_next (k‚ÇÄ k‚ÇÅ : ‚Ñï) (h : k‚ÇÅ = k‚ÇÄ + 1) :
  (sequence f hf F‚ÇÄ k‚ÇÄ).obj ‚ü∂ (sequence f hf F‚ÇÄ k‚ÇÅ).obj :=
step_map f hf (n‚ÇÄ-k‚ÇÅ) (n‚ÇÄ-k‚ÇÄ) (by linarith) _ ‚â´
  (sequence_next_step_iso f hf F‚ÇÄ k‚ÇÄ k‚ÇÅ h).hom

lemma is_iso_sequence_map_next_œÑ_f (k‚ÇÄ k‚ÇÅ : ‚Ñï )(h : k‚ÇÅ = k‚ÇÄ + 1) (n : ‚Ñ§) (hn : n‚ÇÄ - k‚ÇÄ ‚â§ n) :
  is_iso ((sequence_map_next f hf F‚ÇÄ k‚ÇÄ k‚ÇÅ h).œÑ.f n) :=
begin
  unfold sequence_map_next,
  haveI := is_iso_step_map_œÑ_f f hf (n‚ÇÄ-k‚ÇÅ) _ (by linarith) (sequence f hf F‚ÇÄ k‚ÇÄ) n hn,
  erw [homological_complex.comp_f],
  apply_instance,
end

def inductive_system : ‚Ñï ‚•§ cof_fib_factorisation f :=
functor.mk_of_sequence (functor.mk_of_sequence.restriction (sequence_map_next f hf F‚ÇÄ))

def inductive_system' : ‚Ñï ‚•§ cochain_complex C ‚Ñ§ :=
inductive_system f hf F‚ÇÄ ‚ãô cof_fib_factorisation.forget f ‚ãô hom_factorisation.eval f ‚ãô
  bounded_above_cochain_complex.Œπ

lemma is_iso_inductive_system'_comp_eval_map_next (k‚ÇÄ k‚ÇÅ : ‚Ñï ) (h : k‚ÇÅ = k‚ÇÄ + 1) (n : ‚Ñ§)
  (hn : n‚ÇÄ - k‚ÇÄ ‚â§ n) :
  is_iso ((inductive_system' f hf F‚ÇÄ ‚ãô homological_complex.eval C (complex_shape.up ‚Ñ§) n).map
    (hom_of_le (nat.le.intro h.symm))) :=
begin
  dsimp [inductive_system', inductive_system, hom_factorisation.eval, Œπ],
  rw [functor.mk_of_sequence.f_next _ k‚ÇÄ k‚ÇÅ h],
  simp only [functor.mk_of_sequence.restriction, functor.map_comp, eq_to_hom_map,
    hom_factorisation.comp_œÑ, hom_factorisation.eq_to_hom_œÑ],
  erw [homological_complex.comp_f, hom_factorisation.eq_to_hom_œÑ,
    homological_complex.eq_to_hom_f],
  { haveI := is_iso_sequence_map_next_œÑ_f f hf F‚ÇÄ k‚ÇÄ _ rfl n hn,
    apply_instance, },
  all_goals { rw congr_sequence_obj, linarith, },
end

lemma is_iso_inductive_system'_comp_eval_map (k‚ÇÄ k‚ÇÅ : ‚Ñï) (h : k‚ÇÄ ‚â§ k‚ÇÅ) (n : ‚Ñ§)
  (hn : n‚ÇÄ - k‚ÇÄ ‚â§ n) :
  is_iso ((inductive_system' f hf F‚ÇÄ ‚ãô homological_complex.eval C (complex_shape.up ‚Ñ§) n).map
    (hom_of_le h)) :=
begin
  rw le_iff_exists_add at h,
  obtain ‚ü®r, rfl‚ü© := h,
  induction r with r hr,
  { haveI : is_iso (hom_of_le h) :=
      ‚ü®‚ü®hom_of_le (by refl), subsingleton.elim _ _ , subsingleton.elim _ _‚ü©‚ü©,
    apply_instance, },
  { have h‚ÇÅ : k‚ÇÄ ‚â§ k‚ÇÄ + r := by linarith,
    have h‚ÇÇ : k‚ÇÄ + r ‚â§ k‚ÇÄ + r.succ := by { rw nat.succ_eq_add_one, linarith, },
    have eq : _ = hom_of_le h := hom_of_le_comp h‚ÇÅ h‚ÇÇ,
    simp only [‚Üê eq, functor.map_comp],
    exact @is_iso.comp_is_iso _ _ _ _ _ _ _ (hr h‚ÇÅ)
      (is_iso_inductive_system'_comp_eval_map_next f hf F‚ÇÄ (k‚ÇÄ+r) (k‚ÇÄ+r.succ)
          (by { rw nat.succ_eq_add_one, linarith, }) _
          (by { simp only [nat.cast_add, tsub_le_iff_right], linarith, })), },
end

lemma inductive_system'_comp_eval_is_eventually_constant_from (n : ‚Ñ§) :
  ((inductive_system' f hf F‚ÇÄ) ‚ãô
    homological_complex.eval _ _ n).is_eventually_constant_from (n‚ÇÄ-n).truncate :=
Œª p hp, is_iso_inductive_system'_comp_eval_map _ _ _ _ _ (le_of_hom hp) _
  (by linarith [int.self_le_coe_truncate (n‚ÇÄ-n)])

instance inductive_system'_comp_eval_is_eventually_constant (n : ‚Ñ§) :
  ((inductive_system' f hf F‚ÇÄ) ‚ãô
    homological_complex.eval _ _ n).is_eventually_constant :=
‚ü®‚ü®_, inductive_system'_comp_eval_is_eventually_constant_from f hf F‚ÇÄ n‚ü©‚ü©

lemma is_iso_colimit_Œπ_inductive_system'_f (k : ‚Ñï) (n : ‚Ñ§) (hn : n‚ÇÄ-k ‚â§ n) :
  is_iso ((colimit.Œπ (inductive_system' f hf F‚ÇÄ) k).f n) :=
begin
  have ineq : (n‚ÇÄ-n).truncate ‚â§ k,
  { by_cases n ‚â§ n‚ÇÄ,
    { simp only [‚Üê int.coe_nat_le_coe_nat_iff, int.coe_truncate (n‚ÇÄ-n) (by linarith)],
      linarith, },
    { simpa only [int.truncate_eq_zero (n‚ÇÄ-n) (by linarith)] using zero_le', }, },
  haveI := functor.is_eventually_constant.is_iso_colimit_Œπ_app
    ((inductive_system' f hf F‚ÇÄ) ‚ãô homological_complex.eval _ _ n) k
    (functor.is_eventually_constant_from.of_map _
      (hom_of_le ineq) (inductive_system'_comp_eval_is_eventually_constant_from f hf F‚ÇÄ n)),
  exact is_iso.of_is_iso_fac_right ((Œπ_preserves_colimits_iso_hom (homological_complex.eval _ _ n)
      (inductive_system' f hf F‚ÇÄ) k)),
end

@[simps]
def factorisation_Y : bounded_above_cochain_complex C :=
‚ü®colimit (inductive_system' f hf F‚ÇÄ),
begin
  obtain ‚ü®ny, hny‚ü© := F‚ÇÄ.obj.obj.Y.2,
  have h‚ÇÇ := le_max_right ny n‚ÇÄ,
  refine ‚ü®max ny n‚ÇÄ, Œª i hi, _‚ü©,
  haveI := is_iso_colimit_Œπ_inductive_system'_f f hf F‚ÇÄ 0 i
    (by simpa only [algebra_map.coe_zero, tsub_zero]
      using (lt_of_le_of_lt (le_max_right _ _) hi).le),
  exact limits.is_zero.of_iso (hny _ (lt_of_le_of_lt (le_max_left _ _) hi))
    (as_iso ((limits.colimit.Œπ (inductive_system' f hf F‚ÇÄ) 0).f i)).symm,
end‚ü©

@[simps]
def factorisation_i : X ‚ü∂ factorisation_Y f hf F‚ÇÄ :=
F‚ÇÄ.obj.obj.i ‚â´ colimit.Œπ (inductive_system' f hf F‚ÇÄ) 0

@[simp]
def factorisation_p : factorisation_Y f hf F‚ÇÄ ‚ü∂ Z :=
colimit.desc (inductive_system' f hf F‚ÇÄ) (cocone.mk Z.obj
{ app := Œª n, ((inductive_system f hf F‚ÇÄ).obj n).obj.p,
  naturality' := Œª n n' œÜ, begin
    dsimp,
    rw comp_id,
    exact ((inductive_system f hf F‚ÇÄ).map œÜ).commp,
  end, })

@[simps]
def factorisation : cof_fib_factorisation f :=
‚ü®{ Y := factorisation_Y f hf F‚ÇÄ,
  i := factorisation_i f hf F‚ÇÄ,
  p := factorisation_p f hf F‚ÇÄ,
  fac' := begin
    dsimp only [factorisation_i, factorisation_p],
    simp only [assoc],
    erw colimit.Œπ_desc,
    dsimp only,
    exact ((inductive_system f hf F‚ÇÄ).obj 0).1.fac,
  end, },
  { hi := Œª n, begin
      let k := (n‚ÇÄ-n).truncate,
      dsimp [Œπ],
      haveI := is_iso_colimit_Œπ_inductive_system'_f f hf F‚ÇÄ k n
        (by linarith [int.self_le_coe_truncate (n‚ÇÄ-n)]),
      have eq : F‚ÇÄ.obj.obj.i.f n ‚â´ (limits.colimit.Œπ (inductive_system' f hf F‚ÇÄ) 0).f n =
        ((inductive_system f hf F‚ÇÄ).obj k).obj.i.f n ‚â´
        (limits.colimit.Œπ (inductive_system' f hf F‚ÇÄ) k).f n,
      { simpa only [‚Üê homological_complex.comp_f,
          ‚Üê colimit.w (inductive_system' f hf F‚ÇÄ) (hom_of_le (zero_le' : 0 ‚â§ k)), ‚Üê assoc,
          ‚Üê ((inductive_system f hf F‚ÇÄ).map (hom_of_le (zero_le' : 0 ‚â§ k))).commi],},
      rw eq,
      exact preadditive.mono_with_projective_coker.is_stable_by_composition
        _ _ _ (((inductive_system f hf F‚ÇÄ).obj k).2.hi n)
          (preadditive.mono_with_projective_coker.of_is_iso _),
    end,
    hp := Œª n, begin
      dsimp [Œπ],
      let k := (n‚ÇÄ-n).truncate,
      haveI := is_iso_colimit_Œπ_inductive_system'_f f hf F‚ÇÄ k n
        (by linarith [int.self_le_coe_truncate (n‚ÇÄ-n)]),
      rw [‚Üê epi_comp_left_iff_epi ((limits.colimit.Œπ (inductive_system' f hf F‚ÇÄ) k).f n),
        ‚Üê homological_complex.comp_f, colimit.Œπ_desc],
      exact ((inductive_system f hf F‚ÇÄ).obj k).2.hp n,
    end, }‚ü©

lemma quasi_iso_factorisation_p (n : ‚Ñ§) :
  quasi_iso (Œπ.map (factorisation f hf F‚ÇÄ).1.p) :=
‚ü®Œª n, begin
  let k := (n‚ÇÄ+1-n).truncate,
  have hk := int.self_le_coe_truncate (n‚ÇÄ+1-n),
  have eq : homology_map (colimit.Œπ (inductive_system' f hf F‚ÇÄ) k) n ‚â´
    homology_map (factorisation f hf F‚ÇÄ).obj.p n =
      homology_map ((inductive_system f hf F‚ÇÄ).obj k).obj.p n,
  { rw ‚Üê homology_map_comp,
    congr' 1,
    apply colimit.Œπ_desc _ _, },
  haveI : is_iso (homology_map ((inductive_system f hf F‚ÇÄ).obj k).obj.p n) :=
    (sequence f hf F‚ÇÄ k).2 n (by linarith),
  haveI : is_iso (homology_map (limits.colimit.Œπ (inductive_system' f hf F‚ÇÄ) k) n),
  { let œÜ := (homological_complex.short_complex_functor C _ n).map
      ((limits.colimit.Œπ (inductive_system' f hf F‚ÇÄ) k)),
    change is_iso ((short_complex.homology_functor C).map œÜ),
    haveI : is_iso œÜ.œÑ‚ÇÅ,
    { apply is_iso_colimit_Œπ_inductive_system'_f,
      rw cochain_complex.prev,
      linarith, },
    haveI : is_iso œÜ.œÑ‚ÇÇ,
    { apply is_iso_colimit_Œπ_inductive_system'_f,
      linarith, },
    haveI : is_iso œÜ.œÑ‚ÇÉ,
    { apply is_iso_colimit_Œπ_inductive_system'_f,
      rw cochain_complex.next,
      linarith, },
    haveI := short_complex.is_iso_of_isos œÜ,
    apply_instance, },
  exact is_iso.of_is_iso_fac_left eq,
end‚ü©

end induction

lemma for_fibration {X Z : bounded_above_cochain_complex C} (f : X ‚ü∂ Z)
  (hf : arrow_classes.fib f) :
  ‚àÉ (Y : bounded_above_cochain_complex C) (i : X ‚ü∂ Y)
    (hi : arrow_classes.cof i) (p : Y ‚ü∂ Z)
    (hp : arrow_classes.triv_fib p), f = i ‚â´ p :=
begin
  obtain ‚ü®nx, hnx‚ü© := X.2,
  obtain ‚ü®ny, hny‚ü© := Z.2,
  haveI : X.obj.is_strictly_le nx := ‚ü®hnx‚ü©,
  haveI : Z.obj.is_strictly_le ny := ‚ü®hny‚ü©,
  let n‚ÇÄ := max (nx+1) (ny+1),
  have hnx' : nx + 1 ‚â§ n‚ÇÄ := le_max_left _ _,
  have hny' : ny + 1 ‚â§ n‚ÇÄ := le_max_right _ _,
  let F‚ÇÄ : cof_fib_factorisation_quasi_iso_ge f n‚ÇÄ :=
  ‚ü®‚ü®{ Y := X,
    i := ùüô _,
    p := f, },
  { hi := Œª n, preadditive.mono_with_projective_coker.id_mem _,
    hp := hf, }‚ü©,
    Œª i hi, ‚ü®‚ü®0,
      limits.is_zero.eq_of_src (cochain_complex.is_le.is_zero _ nx _ (by linarith)) _ _,
      limits.is_zero.eq_of_src (cochain_complex.is_le.is_zero _ ny _ (by linarith)) _ _‚ü©‚ü©‚ü©,
  let F := induction.factorisation f hf F‚ÇÄ,
  exact ‚ü®_, _, F.2.hi, _,
    ‚ü®F.2.hp,
      ‚ü®Œª n, by { haveI := induction.quasi_iso_factorisation_p f hf F‚ÇÄ n, apply_instance, }‚ü©‚ü©,
    F.1.fac.symm‚ü©,
end

end CM5b

lemma CM5b : (arrow_classes : category_with_fib_cof_weq (bounded_above_cochain_complex C)).CM5b :=
Œª X Z f, begin
  obtain ‚ü®X', j, hj, q, hq, rfl‚ü© := projective_model_structure.CM5a f,
  obtain ‚ü®Y, i, hi, p, hp, rfl‚ü© := CM5b.for_fibration q hq,
  exact ‚ü®Y, j ‚â´ i, cof_stable_under_composition j i hj.1 hi, p, hp, by rw assoc‚ü©,
end

lemma CM5 : (arrow_classes : category_with_fib_cof_weq (bounded_above_cochain_complex C)).CM5 :=
  ‚ü®CM5a, CM5b‚ü©

end projective_model_structure

end bounded_above_cochain_complex
