import algebra.homology.homological_complex

noncomputable theory
open_locale classical zero_object

open category_theory category_theory.limits category_theory.category

variables {V : Type*} [category V] [has_zero_morphisms V] [has_zero_object V]
variables {Œπ : Type*} (c : complex_shape Œπ)

namespace complex_shape

/-def trunc (Œπ' : set Œπ) : complex_shape Œπ' :=
{ rel := Œª i j, c.rel i.1 j.1,
  next_eq := Œª i j j' hj hj', by { ext, exact c.next_eq hj hj', },
  prev_eq := Œª i i' j hi hi', by { ext, exact c.prev_eq hi hi', }, }-/

def pull {Œπ' : Type*} (f : Œπ' ‚Üí Œπ) (hf : function.injective f) : complex_shape Œπ' :=
{ rel := Œª i j, c.rel (f i) (f j),
  next_eq := Œª i j j' hj hj', by { apply hf, exact c.next_eq hj hj', },
  prev_eq := Œª i i' j hi hi', by { apply hf, exact c.prev_eq hi hi', }, }

structure hom {Œπ‚ÇÅ Œπ‚ÇÇ : Type*} (c‚ÇÅ : complex_shape Œπ‚ÇÅ) (c‚ÇÇ : complex_shape Œπ‚ÇÇ) :=
(f : Œπ‚ÇÅ ‚Üí Œπ‚ÇÇ)
(hf : ‚àÄ (i j : Œπ‚ÇÅ), c‚ÇÇ.rel (f i) (f j) ‚Üí c‚ÇÅ.rel i j)

def pull_hom {Œπ' : Type*} (f : Œπ' ‚Üí Œπ) (hf : function.injective f) : hom (c.pull f hf) c :=
{ f := f,
  hf := Œª i j h, h, }

namespace hom

def pull_homological_complex {Œπ‚ÇÅ Œπ‚ÇÇ : Type*} {c‚ÇÅ : complex_shape Œπ‚ÇÅ} {c‚ÇÇ : complex_shape Œπ‚ÇÇ}
  (œÜ : hom c‚ÇÅ c‚ÇÇ) : homological_complex V c‚ÇÇ ‚•§ homological_complex V c‚ÇÅ :=
{ obj := Œª K,
  { X := Œª i, K.X (œÜ.f i),
    d := Œª i j, K.d (œÜ.f i) (œÜ.f j),
    shape' := Œª i j hij, begin
      apply K.shape (œÜ.f i) (œÜ.f j),
      intro h,
      exact hij (œÜ.hf _ _ h),
    end,
    d_comp_d' := Œª i j k hij hjk, K.d_comp_d _ _ _, },
  map := Œª K L f, 
  { f := Œª i, f.f (œÜ.f i),
    comm' := Œª i j hij, f.comm _ _, },
  map_id' := Œª K, rfl,
  map_comp' := Œª K L M f g, rfl, }

end hom

variables {Œπ' : Type*} (f : Œπ' ‚Üí Œπ) (hf : function.injective f)

namespace inclusion

@[simp]
def obj_X (K : homological_complex V (c.pull f hf)) (i : Œπ): V :=
begin
  by_cases ‚àÉ (j : Œπ'), i = f j,
  { exact K.X h.some, },
  { exact 0, },
end

def obj_X_eq_X (K : homological_complex V (c.pull f hf)) (i : Œπ) (j : Œπ') (hij : i = f j) :
  obj_X c f hf K i = K.X j :=
begin
  dsimp,
  split_ifs,
  { congr,
    apply hf,
    symmetry,
    rw ‚Üê hij,
    exact h.some_spec, },
  { exfalso,
    apply h,
    use j,
    exact hij, },
end

def obj_X_eq_zero (K : homological_complex V (c.pull f hf)) (i : Œπ) (hi : ‚àÄ (j : Œπ'), i ‚â† f j) :
  obj_X c f hf K i = 0 :=
begin
  dsimp,
  split_ifs,
  { exfalso,
    cases h with j hj,
    exact hi j hj, },
  { refl, },
end

@[simp]
def obj_d (K : homological_complex V (c.pull f hf)) (i j : Œπ) :
  obj_X c f hf K i ‚ü∂ obj_X c f hf K j :=
begin
  by_cases h : (‚àÉ (i' : Œπ'), i = f i') ‚àß (‚àÉ (j' : Œπ'), j = f j'),
  { refine eq_to_hom (obj_X_eq_X c f hf K i h.1.some h.1.some_spec) ‚â´ K.d h.1.some h.2.some ‚â´
      eq_to_hom (obj_X_eq_X c f hf K j h.2.some h.2.some_spec).symm, },
  { exact 0, },
end

lemma obj_d_eq (K : homological_complex V (c.pull f hf)) (i j : Œπ) (i' j' : Œπ') (hi : i = f i') (hj : j = f j') :
  obj_d c f hf K i j = eq_to_hom sorry ‚â´ K.d i' j' ‚â´ eq_to_hom sorry :=
begin
  sorry
end

@[simp]
def map_f {K L : homological_complex V (c.pull f hf)} (g : K ‚ü∂ L) (i : Œπ) :
  obj_X c f hf K i ‚ü∂ obj_X c f hf L i :=
begin
  by_cases ‚àÉ (j : Œπ'), i = f j,
  { refine eq_to_hom (obj_X_eq_X c f hf K i h.some h.some_spec) ‚â´ g.f h.some ‚â´
      (eq_to_hom (obj_X_eq_X c f hf L i h.some h.some_spec).symm), },
  { exact 0, },
end

end inclusion

def inclusion :
  homological_complex V (c.pull f hf) ‚•§ homological_complex V c :=
{ obj := Œª K,
  { X := inclusion.obj_X c f hf K,
    d := inclusion.obj_d c f hf K,
    shape' := Œª i j hij, begin
      simp only [inclusion.obj_d],
      split_ifs,
      { rw [h.1.some_spec] at hij,
        conv at hij { congr, congr, skip, skip, rw h.2.some_spec, },
        rw [K.shape h.1.some h.2.some hij, zero_comp, comp_zero], },
      { refl, },
    end,
    d_comp_d' := sorry, --Œª i j k hij hjk, begin
  },
  map := sorry,
  map_id' := sorry,
  map_comp' := sorry, }
#exit


end complex_shape

namespace homological_complex

variables (V) (c)

namespace trunc

/-
@[simps]
def functor (Œπ' : set Œπ) : homological_complex V c ‚•§ homological_complex V (c.trunc Œπ') :=
{ obj := Œª K,
  { X := Œª i, K.X i.1,
    d := Œª i j, K.d i.1 j.1,
    shape' := Œª i j hij, K.shape i.1 j.1 hij,
    d_comp_d' := Œª i j k hij hjk, K.d_comp_d i.1 j.1 k.1, },
  map := Œª K L f, 
  { f := Œª i, f.f i.1,
    comm' := Œª i j hij, f.comm i j, },
  map_id' := Œª K, rfl,
  map_comp' := Œª K L M f g, rfl, }-/

/-namespace inclusion

@[simp]
def obj_X (Œπ' : set Œπ) (K : homological_complex V (c.trunc Œπ')) (i : Œπ) : V :=
begin
  by_cases hi : i ‚àà Œπ',
  { exact K.X ‚ü®i, hi‚ü©, },
  { exact 0, },
end

def obj_X_eq_X (Œπ' : set Œπ) (K : homological_complex V (c.trunc Œπ')) (i : Œπ) (hi : i ‚àà Œπ') :
  obj_X V c Œπ' K i = K.X ‚ü®i, hi‚ü© :=
by { dsimp, split_ifs, refl, }

def obj_X_eq_zero (Œπ' : set Œπ) (K : homological_complex V (c.trunc Œπ')) (i : Œπ) (hi : ¬¨i ‚àà Œπ') :
  obj_X V c Œπ' K i = 0 :=
by { dsimp, split_ifs, refl, }

@[simp]
def obj_d (Œπ' : set Œπ) (K : homological_complex V (c.trunc Œπ')) (i j : Œπ) :
  obj_X V c Œπ' K i ‚ü∂ obj_X V c Œπ' K j :=
begin
  by_cases h : (i ‚àà Œπ') ‚àß (j ‚àà Œπ'),
  { exact eq_to_hom (obj_X_eq_X V c Œπ' K i h.1) ‚â´ K.d ‚ü®i, h.1‚ü© ‚ü®j, h.2‚ü© ‚â´ eq_to_hom (obj_X_eq_X V c Œπ' K j h.2).symm, },
  { exact 0, },
end

def obj_d_eq_d (Œπ' : set Œπ) (K : homological_complex V (c.trunc Œπ')) (i j : Œπ) (hi : i ‚àà Œπ') (hj : j ‚àà Œπ') :
  obj_d V c Œπ' K i j = eq_to_hom (obj_X_eq_X V c Œπ' K i hi) ‚â´ K.d ‚ü®i, hi‚ü© ‚ü®j, hj‚ü© ‚â´ eq_to_hom (obj_X_eq_X V c Œπ' K j hj).symm :=
begin
  simp only [obj_d],
  split_ifs,
  { refl, },
  { exfalso,
    exact h ‚ü®hi, hj‚ü©,}
end

def obj_d_eq_zero (Œπ' : set Œπ) (K : homological_complex V (c.trunc Œπ')) (i j : Œπ) (hij : ¬¨(i ‚àà Œπ' ‚àß j ‚àà Œπ')) :
  obj_d V c Œπ' K i j = 0 :=
by { simp only [obj_d], split_ifs, refl, }

@[simp]
def map_f (Œπ' : set Œπ) {K L : homological_complex V (c.trunc Œπ')} (f : K ‚ü∂ L) (i : Œπ):
  obj_X V c Œπ' K i ‚ü∂ obj_X V c Œπ' L i :=
begin
  by_cases i ‚àà Œπ',
  { exact eq_to_hom (inclusion.obj_X_eq_X V c Œπ' K i h) ‚â´ f.f ‚ü®i, h‚ü© ‚â´
      eq_to_hom (inclusion.obj_X_eq_X V c Œπ' L i h).symm, },
  { exact 0, },
end

lemma map_comm (Œπ' : set Œπ) {K L : homological_complex V (c.trunc Œπ')} (f : K ‚ü∂ L) (i j : Œπ) (hij : c.rel i j) :
inclusion.map_f V c Œπ' f i ‚â´ obj_d V c Œπ' L i j = obj_d V c Œπ' K i j ‚â´ inclusion.map_f V c Œπ' f j :=
begin
  simp only [inclusion.obj_d, inclusion.map_f],
  by_cases hi : i ‚àà Œπ',
  by_cases hj : j ‚àà Œπ',
  { have hij : i ‚àà Œπ' ‚àß j ‚àà Œπ' := ‚ü®hi, hj‚ü©,
    split_ifs,
    simp only [assoc, eq_to_hom_trans_assoc, eq_to_hom_refl, id_comp, hom.comm_assoc], },
  { have hij : ¬¨(i ‚àà Œπ' ‚àß j ‚àà Œπ'),
    { intro h,
      exact hj h.2, },
    split_ifs,
    simp only [comp_zero], },
  { have hij : ¬¨(i ‚àà Œπ' ‚àß j ‚àà Œπ'),
    { intro h,
      exact hi h.1, },
    split_ifs,
    repeat { erw zero_comp, }, },
end

end inclusion

@[simps]
def inclusion (Œπ' : set Œπ) : homological_complex V (c.trunc Œπ') ‚•§ homological_complex V c :=
{ obj := Œª K,
  { X := inclusion.obj_X V c Œπ' K,
    d := inclusion.obj_d V c Œπ' K,
    shape' := Œª i j hij, begin
      simp only [inclusion.obj_d],
      split_ifs,
      { rw [K.shape ‚ü®i, h.1‚ü© ‚ü®j, h.2‚ü© hij, zero_comp, comp_zero], },
      { refl, },
    end,
    d_comp_d' := Œª i j k hij hjk, begin
      simp only [inclusion.obj_d],
      split_ifs,
      { simp only [assoc, eq_to_hom_trans_assoc, eq_to_hom_refl, id_comp,
          d_comp_d_assoc, zero_comp, comp_zero], },
      all_goals { simp only [comp_zero, zero_comp], },
    end, },
  map := Œª K L f,
  { f := Œª i, inclusion.map_f V c Œπ' f i,
    comm' := Œª i j hij, inclusion.map_comm _ _ _ _ _ _ hij, },
  map_id' := Œª K, begin
    ext i,
    dsimp,
    split_ifs,
    { simp only [id_comp, eq_to_hom_trans, eq_to_hom_refl], },
    { apply is_terminal.hom_ext,
      split_ifs,
      exact has_zero_object.zero_is_terminal, },
  end,
  map_comp' := Œª K L M f g, begin
    ext i,
    dsimp,
    split_ifs,
    { simp only [assoc, eq_to_hom_trans_assoc, eq_to_hom_refl, id_comp], },
    { rw zero_comp, },
  end, }

lemma inclusion_comp_trunc (Œπ' : set Œπ) : inclusion V c Œπ' ‚ãô functor V c Œπ' = ùü≠ _ :=
begin
  apply category_theory.functor.ext,
  { intros X Y f,
    ext i,
    simp only [subtype.val_eq_coe, subtype.coe_prop, inclusion.map_f, functor.comp_map, functor_map_f, inclusion_map_f, dif_pos,
  functor.id_map, comp_f, eq_to_hom_f],
    have h : (‚ü®i.1, i.2‚ü© : Œπ') = i,
    { simp only [subtype.val_eq_coe, subtype.coe_eta], },
    congr', },
  { intro K,
    apply homological_complex.ext,
    { intros i j hij,
      dsimp,
      have h : i.1 ‚àà Œπ' ‚àß j.1 ‚àà Œπ' := ‚ü®i.2, j.2‚ü©,
      split_ifs with h',
      { rcases i with ‚ü®i, hi‚ü©,
        rcases j with ‚ü®j, hj‚ü©,
        simpa only [assoc, eq_to_hom_trans, eq_to_hom_refl, comp_id], },
      { exfalso,
        exact h' i.2, }, },
    { ext i,
      simp only [inclusion.obj_X, functor.comp_obj, functor_obj_X, subtype.val_eq_coe,
        inclusion_obj_X, subtype.coe_prop, subtype.coe_eta, dite_eq_ite, if_true,
          functor.id_obj], }, },
end-/

structure rebuild_preorder (c : complex_shape Œπ) (J : Type*) [preorder J] :=
(S : J ‚Üí set Œπ) (hS‚ÇÄ : monotone S)
(hS‚ÇÅ : ‚àÄ (n : Œπ), ‚àÉ (j : J), n ‚àà S j)
(hS‚ÇÇ : ‚àÄ (j‚ÇÅ j‚ÇÇ : J), ‚àÉ (j‚ÇÉ : J), j‚ÇÅ ‚â§ j‚ÇÉ ‚àß j‚ÇÇ ‚â§ j‚ÇÉ)

/-structure rebuild_datum {c : complex_shape Œπ} {J : Type*} [preorder J]
  (P : rebuild_preorder c J) :=
(K : Œ† (j : J), homological_complex V (c.trunc (P.S j)))
(hK : ‚àÄ (j‚ÇÅ j‚ÇÇ : J) (hj‚ÇÅj‚ÇÇ : j‚ÇÅ ‚â§ j‚ÇÇ), true)-/

end trunc

end homological_complex

