/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import category_theory.hom_class

open category_theory
open opposite

variables {C : Type*} [category C]

namespace quiver.hom

def is_retract {X Y X' Y' : C} (f : X ‚ü∂ Y) (f' : X' ‚ü∂ Y') := 
  ‚àÉ (a : X ‚ü∂ X') (b : X' ‚ü∂ X) (a' : Y ‚ü∂ Y') (b' : Y' ‚ü∂ Y),
    (f ‚â´ a' = a ‚â´ f' ‚àß b ‚â´ f = f' ‚â´ b') ‚àß (a ‚â´ b = ùüô X ‚àß a' ‚â´ b' = ùüô Y)

def is_retract_iff_op {X Y X' Y' : C} (f : X ‚ü∂ Y) (f' : X' ‚ü∂ Y') :
  f.is_retract f' ‚Üî f.op.is_retract f'.op :=
begin
  split,
  { intro h,
    rcases h with ‚ü®a, b, a', b', ‚ü®comm‚ÇÅ, comm‚ÇÇ‚ü©, ‚ü®r‚ÇÅ,r‚ÇÇ‚ü©‚ü©,
    use [b'.op, a'.op, b.op, a.op],
    split; split,
    { exact congr_arg op comm‚ÇÇ, },
    { exact congr_arg op comm‚ÇÅ, },
    { exact congr_arg op r‚ÇÇ, },
    { exact congr_arg op r‚ÇÅ, }, },
  { intro h,
    rcases h with ‚ü®a, b, a', b', ‚ü®comm‚ÇÅ, comm‚ÇÇ‚ü©, ‚ü®r‚ÇÅ,r‚ÇÇ‚ü©‚ü©,
    use [b'.unop, a'.unop, b.unop, a.unop],
    split; split,
    { exact congr_arg unop comm‚ÇÇ, },
    { exact congr_arg unop comm‚ÇÅ, },
    { exact congr_arg unop r‚ÇÇ, },
    { exact congr_arg unop r‚ÇÅ, }, },
end

end quiver.hom

namespace hom_class

def is_stable_by_retract (F : hom_class C) := ‚àÄ (X Y : C) (f : X ‚ü∂ Y),
  (‚àÉ (X' Y' : C) (f' : X' ‚ü∂ Y') (hf' : F.contains f'), f.is_retract f') ‚Üí f ‚àà F X Y    

lemma is_stable_by_retract_iff_op (F : hom_class C) :
  is_stable_by_retract F ‚Üî is_stable_by_retract F.op :=
begin
  split,
  { intros hF X Y f hf,
    rcases hf with ‚ü®X', Y', f', hf', a, b, a', b', ‚ü®comm‚ÇÅ, comm‚ÇÇ‚ü©, ‚ü®r‚ÇÅ,r‚ÇÇ‚ü©‚ü©,
    apply hF _ _ f.unop,
    use [Y'.unop, X'.unop, f'.unop, hf', b'.unop, a'.unop, b.unop, a.unop],
    split; split,
    { simp only [‚Üê unop_comp, comm‚ÇÇ], },
    { simp only [‚Üê unop_comp, comm‚ÇÅ], },
    { simpa only [‚Üê unop_comp, r‚ÇÇ], },
    { simpa only [‚Üê unop_comp, r‚ÇÅ], }, },
  { intros hF X Y f hf,
    rcases hf with ‚ü®X', Y', f', hf', a, b, a', b', ‚ü®comm‚ÇÅ, comm‚ÇÇ‚ü©, ‚ü®r‚ÇÅ,r‚ÇÇ‚ü©‚ü©,
    apply hF _ _ f.op,
    use [opposite.op Y', opposite.op X', f'.op, hf', b'.op, a'.op, b.op, a.op],
    split; split,
    { simp only [‚Üê op_comp, comm‚ÇÇ], },
    { simp only [‚Üê op_comp, comm‚ÇÅ], },
    { simpa only [‚Üê op_comp, r‚ÇÇ], },
    { simpa only [‚Üê op_comp, r‚ÇÅ], }, },
end

end hom_class