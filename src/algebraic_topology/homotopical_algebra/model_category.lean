/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import category_theory.limits.shapes.finite_limits
import category_theory.limits.shapes.pullbacks
import category_theory.limits.opposites
import category_theory.localization.construction

open category_theory
open category_theory.category
open category_theory.limits
open opposite

variables (C : Type*) [category C]

@[ext]
structure category_with_fib_cof_we := (fibrations cofibrations weak_equivalences : hom_class C)

variable {C}

namespace quiver.hom

def left_lifting_property {A B X Y : C} (i : A ‚ü∂ B) (p : X ‚ü∂ Y) :=
  ‚àÄ (f : A ‚ü∂ X) (g : B ‚ü∂ Y) (hfg : f ‚â´ p = i ‚â´ g), ‚àÉ (h : B ‚ü∂ X), f = i ‚â´ h ‚àß g = h ‚â´ p

lemma left_lifting_property_iff_op {A B X Y : C} (i : A ‚ü∂ B) (p : X ‚ü∂ Y) :
  i.left_lifting_property p ‚Üî p.op.left_lifting_property i.op :=
begin
  split,
  { intros hip f g hfg,
    rcases hip g.unop f.unop (by { exact congr_arg unop hfg.symm, }) with ‚ü®h, comm‚ÇÅ, comm‚ÇÇ‚ü©,
    use h.op,
    split,
    { exact congr_arg op comm‚ÇÇ, },
    { exact congr_arg op comm‚ÇÅ, }, },
  { intros hip f g hfg,
    rcases hip g.op f.op (by { exact congr_arg op hfg.symm, }) with ‚ü®h, comm‚ÇÅ, comm‚ÇÇ‚ü©,
    use h.unop,
    split,
    { exact congr_arg unop comm‚ÇÇ, },
    { exact congr_arg unop comm‚ÇÅ, }, },
end

lemma id_has_left_lifting_propery (A : C) {X Y : C} (p : X ‚ü∂ Y) :
  (ùüô A).left_lifting_property p :=
begin
  intros f g hfg,
  rw id_comp at hfg,
  use f,
  split,
  { rw id_comp, },
  { rw hfg, }
end

lemma id_has_right_lifting_property (X : C) {A B : C} (i : A ‚ü∂ B) :
  i.left_lifting_property (ùüô X) :=
by { rw left_lifting_property_iff_op, apply id_has_left_lifting_propery, }

def is_retract {X Y X' Y' : C} (f : X ‚ü∂ Y) (f' : X' ‚ü∂ Y') := 
  ‚àÉ (a : X ‚ü∂ X') (b : X' ‚ü∂ X) (a' : Y ‚ü∂ Y') (b' : Y' ‚ü∂ Y),
    (f ‚â´ a' = a ‚â´ f' ‚àß b ‚â´ f = f' ‚â´ b') ‚àß (a ‚â´ b = ùüô X ‚àß a' ‚â´ b' = ùüô Y)

def is_retract_iff_op {X Y X' Y' : C} (f : X ‚ü∂ Y) (f' : X' ‚ü∂ Y') :
  f.is_retract f' ‚Üî f.op.is_retract f'.op :=
begin
  split,
  { intro h,
    rcases h with ‚ü®a, b, a', b', ‚ü®comm‚ÇÅ, comm‚ÇÇ‚ü©, ‚ü®r‚ÇÅ,r‚ÇÇ‚ü©‚ü©,
    use [b'.op, a'.op, b.op, a.op],
    split; split,
    { exact congr_arg op comm‚ÇÇ, },
    { exact congr_arg op comm‚ÇÅ, },
    { exact congr_arg op r‚ÇÇ, },
    { exact congr_arg op r‚ÇÅ, }, },
  { intro h,
    rcases h with ‚ü®a, b, a', b', ‚ü®comm‚ÇÅ, comm‚ÇÇ‚ü©, ‚ü®r‚ÇÅ,r‚ÇÇ‚ü©‚ü©,
    use [b'.unop, a'.unop, b.unop, a.unop],
    split; split,
    { exact congr_arg unop comm‚ÇÇ, },
    { exact congr_arg unop comm‚ÇÅ, },
    { exact congr_arg unop r‚ÇÇ, },
    { exact congr_arg unop r‚ÇÅ, }, },
end

lemma has_left_lifting_property_of_retract {A B A' B' X Y : C} (i : A ‚ü∂ B) (p : X ‚ü∂ Y) (i' : A' ‚ü∂ B')
  (hii' : i.is_retract i') (hi' : i'.left_lifting_property p) : i.left_lifting_property p :=
begin
  rcases hii' with ‚ü®a, b, a', b', ‚ü®comm‚ÇÅ, comm‚ÇÇ‚ü©, ‚ü®r‚ÇÅ,r‚ÇÇ‚ü©‚ü©,
  intros f g hfg,
  rcases hi' (b ‚â´ f) (b' ‚â´ g) (by { rw [assoc, hfg, ‚Üê assoc, comm‚ÇÇ, assoc], })
    with ‚ü®h, ‚ü®lift‚ÇÅ, lift‚ÇÇ‚ü©‚ü©,
  use a' ‚â´ h,
  split,
  { rw [‚Üê assoc, comm‚ÇÅ, assoc, ‚Üê lift‚ÇÅ, ‚Üê assoc, r‚ÇÅ, id_comp], },
  { rw [assoc, ‚Üê lift‚ÇÇ, ‚Üê assoc, r‚ÇÇ, id_comp], }
end

lemma has_right_lifting_property_of_retract {A B X Y X' Y' : C} (p : X ‚ü∂ Y) (i : A ‚ü∂ B) (p' : X' ‚ü∂ Y')
  (hpp' : p.is_retract p') (hp' : i.left_lifting_property p') : i.left_lifting_property p :=
begin
  rw left_lifting_property_iff_op,
  rw is_retract_iff_op at hpp',
  apply has_left_lifting_property_of_retract p.op i.op p'.op hpp',
  rw ‚Üê left_lifting_property_iff_op,
  exact hp',
end

lemma has_left_lifting_property_of_is_iso {A B X Y : C} (i : A ‚ü∂ B) [is_iso i] (p : X ‚ü∂ Y) :
  i.left_lifting_property p :=
begin
  refine has_left_lifting_property_of_retract i p (ùüô A) _ (id_has_left_lifting_propery A p),
  use [ùüô A, ùüô A, inv i, i],
  split; split,
  { simp only [is_iso.hom_inv_id, comp_id], },
  { refl, },
  { rw id_comp, },
  { simp only [is_iso.inv_hom_id], },
end

lemma has_right_lifting_property_of_is_iso {A B X Y : C} (p : X ‚ü∂ Y) [is_iso p] (i : A ‚ü∂ B) :
  i.left_lifting_property p :=
by { rw i.left_lifting_property_iff_op, apply has_left_lifting_property_of_is_iso, }

end quiver.hom

namespace hom_class
variables (F : hom_class C) (F' : hom_class C·µí·µñ)

def unop : hom_class C := Œª X Y f, F' (op Y) (op X) f.op
def op : hom_class C·µí·µñ := Œª X Y f, F Y.unop X.unop f.unop

lemma unop_op : F.op.unop = F := by refl
lemma op_unop : F'.unop.op = F' := by refl

def contains_isomorphisms := ‚àÄ (X Y : C) (f : X ‚ü∂ Y), is_iso f ‚Üí f ‚àà F X Y

lemma contains_isomorphismsm_iff_op : F.contains_isomorphisms ‚Üî F.op.contains_isomorphisms :=
begin
  split,
  { intros hF X Y f,
    introI,
    apply hF,
    apply_instance, },
  { intros hF X Y f,
    introI,
    apply hF _ _ f.op,
    apply_instance, }
end

def is_stable_by_composition :=
  ‚àÄ (X Y Z : C) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z),
    f ‚àà F X Y ‚Üí g ‚àà F Y Z ‚Üí (f ‚â´ g) ‚àà F X Z

lemma is_stable_by_composition_iff_op : F.is_stable_by_composition ‚Üî F.op.is_stable_by_composition :=
begin
  split,
  { intros hF X Y Z f g hf hg,
    exact hF _ _ _ g.unop f.unop hg hf, },
  { intros hF X Y Z f g hf hg,
    exact hF _ _ _ g.op f.op hg hf, }
end

def three_of_two1 :=
  ‚àÄ (X Y Z : C) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z),
    (f ‚â´ g) ‚àà F X Z ‚Üí g ‚àà F Y Z ‚Üí f ‚àà F X Y

def three_of_two2 :=
  ‚àÄ (X Y Z : C) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z),
    (f ‚â´ g) ‚àà F X Z ‚Üí f ‚àà F X Y ‚Üí g ‚àà F Y Z

lemma three_of_two1_iff_op : F.three_of_two1 ‚Üî F.op.three_of_two2 :=
begin
  split,
  { intros hF X Y Z f g hfg hf,
    exact hF _ _ _ g.unop f.unop hfg hf, },
  { intros hF X Y Z f g hfg hg,
    exact hF _ _ _ g.op f.op hfg hg, }
end

lemma three_of_two2_iff_op : F.three_of_two2 ‚Üî F.op.three_of_two1 :=
begin
  split,
  { intros hF X Y Z f g hfg hg,
    exact hF _ _ _ g.unop f.unop hfg hg, },
  { intros hF X Y Z f g hfg hf,
    exact hF _ _ _ g.op f.op hfg hf, }
end

def three_of_two := is_stable_by_composition F ‚àß three_of_two1 F ‚àß three_of_two2 F

lemma three_of_two_iff_op : F.three_of_two ‚Üî F.op.three_of_two :=
begin
  dsimp only [three_of_two],
  rw [‚Üê is_stable_by_composition_iff_op, ‚Üê three_of_two1_iff_op, ‚Üê three_of_two2_iff_op],
  finish,
end

def is_stable_by_base_change [has_pullbacks C] :=
  ‚àÄ (X Y Y' : C) (f : X ‚ü∂ Y) (g : Y' ‚ü∂ Y), f ‚àà F X Y ‚Üí pullback.snd ‚àà F (pullback f g) Y'

def is_stable_by_cobase_change [has_pushouts C] :=
  ‚àÄ (X X' Y : C) (f : X ‚ü∂ Y) (g : X ‚ü∂ X'), f ‚àà F X Y ‚Üí pushout.inr ‚àà F X' (pushout f g)

def is_stable_by_retract := ‚àÄ (X Y : C) (f : X ‚ü∂ Y),
  (‚àÉ (X' Y' : C) (f' : X' ‚ü∂ Y') (hf' : f' ‚àà F X' Y'), f.is_retract f') ‚Üí f ‚àà F X Y    

lemma is_stable_by_retract_iff_op :
  is_stable_by_retract F ‚Üî is_stable_by_retract F.op :=
begin
  split,
  { intros hF X Y f hf,
    rcases hf with ‚ü®X', Y', f', hf', a, b, a', b', ‚ü®comm‚ÇÅ, comm‚ÇÇ‚ü©, ‚ü®r‚ÇÅ,r‚ÇÇ‚ü©‚ü©,
    apply hF _ _ f.unop,
    use [Y'.unop, X'.unop, f'.unop, hf', b'.unop, a'.unop, b.unop, a.unop],
    split; split,
    { simp only [‚Üê unop_comp, comm‚ÇÇ], },
    { simp only [‚Üê unop_comp, comm‚ÇÅ], },
    { simpa only [‚Üê unop_comp, r‚ÇÇ], },
    { simpa only [‚Üê unop_comp, r‚ÇÅ], }, },
  { intros hF X Y f hf,
    rcases hf with ‚ü®X', Y', f', hf', a, b, a', b', ‚ü®comm‚ÇÅ, comm‚ÇÇ‚ü©, ‚ü®r‚ÇÅ,r‚ÇÇ‚ü©‚ü©,
    apply hF _ _ f.op,
    use [opposite.op Y', opposite.op X', f'.op, hf', b'.op, a'.op, b.op, a.op],
    split; split,
    { simp only [‚Üê op_comp, comm‚ÇÇ], },
    { simp only [‚Üê op_comp, comm‚ÇÅ], },
    { simpa only [‚Üê op_comp, r‚ÇÇ], },
    { simpa only [‚Üê op_comp, r‚ÇÅ], }, },
end

def left_lifting_property (G : hom_class C) := ‚àÄ (A B X Y : C) (i : A ‚ü∂ B) (p : X ‚ü∂ Y),
  i ‚àà F A B ‚Üí p ‚àà G X Y ‚Üí i.left_lifting_property p

def left_lifting_property_iff_op (G : hom_class C) :
  F.left_lifting_property G ‚Üî G.op.left_lifting_property F.op :=
begin
  split,
  { intro h,
    intros A B X Y i p hi hp,
    simpa only [p.unop.left_lifting_property_iff_op] using h _ _ _ _ p.unop i.unop hp hi, },
  { intro h,
    intros A B X Y i p hi hp,
    simpa only [i.left_lifting_property_iff_op] using h _ _ _ _ p.op i.op hp hi, }
end

end hom_class

variable {C}

namespace category_with_fib_cof_we

variables (data : category_with_fib_cof_we C) (data' : category_with_fib_cof_we C·µí·µñ)

def op : (category_with_fib_cof_we C·µí·µñ) :=
{ fibrations := data.cofibrations.op,
  cofibrations := data.fibrations.op,
  weak_equivalences := data.weak_equivalences.op }

def unop : category_with_fib_cof_we C :=
{ fibrations := data'.cofibrations.unop,
  cofibrations := data'.fibrations.unop,
  weak_equivalences := data'.weak_equivalences.unop }

lemma unop_op : data.op.unop = data :=
by { ext1; refl, }

lemma op_unop : data'.unop.op = data' :=
by { ext1; refl, }

def trivial_fibrations : hom_class C :=
  Œª X Y, data.fibrations X Y ‚à© data.weak_equivalences X Y

def trivial_cofibrations : hom_class C :=
  Œª X Y, data.cofibrations X Y ‚à© data.weak_equivalences X Y

variable (C)
def CM1 := has_finite_limits C ‚àß has_finite_colimits C

variable {C}

lemma CM1_op_of_CM1 (hC : CM1 C) : CM1 C·µí·µñ :=
begin
  haveI := hC.left,
  haveI := hC.right,
  split,
  { apply has_finite_limits_opposite, },
  { apply has_finite_colimits_opposite, },
end

def CM2 := data.weak_equivalences.three_of_two

lemma CM2_iff_op : data.CM2 ‚Üî data.op.CM2 :=
begin
  dsimp only [CM2],
  rw [hom_class.three_of_two_iff_op],
  reflexivity,
end

lemma CM2_iff_unop : data'.CM2 ‚Üî data'.unop.CM2 :=
by { rw [CM2_iff_op data'.unop, data'.op_unop], }

def CM3a := data.weak_equivalences.is_stable_by_retract
def CM3b := data.fibrations.is_stable_by_retract
def CM3c := data.cofibrations.is_stable_by_retract

def CM3 := data.CM3a ‚àß data.CM3b ‚àß data.CM3c

lemma CM3a_iff_op : data.CM3a ‚Üî data.op.CM3a :=
by { dsimp only [CM3a], erw hom_class.is_stable_by_retract_iff_op, finish, }

lemma CM3b_iff_op : data.CM3b ‚Üî data.op.CM3c :=
by { dsimp only [CM3b, CM3c], erw hom_class.is_stable_by_retract_iff_op, finish, }

lemma CM3c_iff_op : data.CM3c ‚Üî data.op.CM3b :=
by { dsimp only [CM3b, CM3c], erw hom_class.is_stable_by_retract_iff_op, finish, }

lemma CM3_iff_op : data.CM3 ‚Üî data.op.CM3 :=
begin
  dsimp only [CM3],
  rw [data.CM3a_iff_op, data.CM3b_iff_op, data.CM3c_iff_op],
  finish,
end

lemma CM3_iff_unop : data'.CM3 ‚Üî data'.unop.CM3 :=
by { rw [CM3_iff_op data'.unop, data'.op_unop], }

def CM4a := data.cofibrations.left_lifting_property data.trivial_fibrations

def CM4b := data.trivial_cofibrations.left_lifting_property data.fibrations

def CM4 := data.CM4a ‚àß data.CM4b

lemma CM4a_iff_op : data.CM4a ‚Üî data.op.CM4b := hom_class.left_lifting_property_iff_op _ _

lemma CM4b_iff_op : data.CM4b ‚Üî data.op.CM4a := hom_class.left_lifting_property_iff_op _ _

lemma CM4_iff_op : data.CM4 ‚Üî data.op.CM4 :=
by { dsimp only [CM4], rw [data.CM4a_iff_op, data.CM4b_iff_op], finish, }

lemma CM4_iff_unop : data'.CM4 ‚Üî data'.unop.CM4 :=
by { rw [CM4_iff_op data'.unop, data'.op_unop], }

def CM5a := ‚àÄ (X Y : C) (f : X ‚ü∂ Y), ‚àÉ (Z : C) (i : X ‚ü∂ Z) (p : Z ‚ü∂ Y),
  i ‚àà data.trivial_cofibrations X Z ‚àß p ‚àà data.fibrations Z Y ‚àß f = i ‚â´ p

def CM5b := ‚àÄ (X Y : C) (f : X ‚ü∂ Y), ‚àÉ (Z : C) (i : X ‚ü∂ Z) (p : Z ‚ü∂ Y),
  i ‚àà data.cofibrations X Z ‚àß p ‚àà data.trivial_fibrations Z Y ‚àß f = i ‚â´ p

def CM5 := data.CM5a ‚àß data.CM5b

lemma CM5a_iff_op : data.CM5a ‚Üî data.op.CM5b :=
begin
  split,
  { intros h X Y f,
    rcases h Y.unop X.unop f.unop with ‚ü®Z, i, p, hi, hp, fac‚ü©,
    use [opposite.op Z, p.op, i.op, hp, hi],
    rw [‚Üê quiver.hom.op_unop f, fac, op_comp], },
  { intros h X Y f,
    rcases h _ _ f.op with ‚ü®Z, i, p, hi, hp, fac‚ü©,
    use [Z.unop, p.unop, i.unop, hp, hi],
    rw [‚Üê quiver.hom.unop_op f, fac, unop_comp], }
end

lemma CM5b_iff_op : data.CM5b ‚Üî data.op.CM5a :=
begin
  split,
  { intros h X Y f,
    rcases h Y.unop X.unop f.unop with ‚ü®Z, i, p, hi, hp, fac‚ü©,
    use [opposite.op Z, p.op, i.op, hp, hi],
    rw [‚Üê quiver.hom.op_unop f, fac, op_comp], },
  { intros h X Y f,
    rcases h _ _ f.op with ‚ü®Z, i, p, hi, hp, fac‚ü©,
    use [Z.unop, p.unop, i.unop, hp, hi],
    rw [‚Üê quiver.hom.unop_op f, fac, unop_comp], }
end

lemma CM5_iff_op : data.CM5 ‚Üî data.op.CM5 :=
by { dsimp only [CM5], rw [data.CM5a_iff_op, data.CM5b_iff_op], finish, }

lemma CM5_iff_unop : data'.CM5 ‚Üî data'.unop.CM5 :=
by { rw [CM5_iff_op data'.unop, data'.op_unop], }

end category_with_fib_cof_we

variables (C) 

structure model_category
  extends category_with_fib_cof_we C :=
  (CM1 : category_with_fib_cof_we.CM1 C)
  (CM2 : to_category_with_fib_cof_we.CM2)
  (CM3 : to_category_with_fib_cof_we.CM3)
  (CM4 : to_category_with_fib_cof_we.CM4)
  (CM5 : to_category_with_fib_cof_we.CM5)

namespace model_category

variables (M : model_category C) {C}

def fibrations := M.1.fibrations
def cofibrations := M.1.cofibrations
def weak_equivalences := M.1.weak_equivalences
def trivial_fibrations := M.1.trivial_fibrations
def trivial_cofibrations := M.1.trivial_cofibrations

def op : model_category C·µí·µñ :=
{ to_category_with_fib_cof_we := M.to_category_with_fib_cof_we.op,
  CM1 := category_with_fib_cof_we.CM1_op_of_CM1 M.CM1,
  CM2 := by simpa only [‚Üê M.1.CM2_iff_op] using M.CM2,
  CM3 := by simpa only [‚Üê M.1.CM3_iff_op] using M.CM3,
  CM4 := by simpa only [‚Üê M.1.CM4_iff_op] using M.CM4,
  CM5 := by simpa only [‚Üê M.1.CM5_iff_op] using M.CM5, }

def unop [has_finite_limits C] [has_finite_colimits C]
  (M' : model_category C·µí·µñ) : model_category C :=
{ to_category_with_fib_cof_we := M'.to_category_with_fib_cof_we.unop,
  CM1 := ‚ü®infer_instance, infer_instance‚ü©,
  CM2 := by { simpa only [‚Üê M'.1.CM2_iff_unop] using M'.CM2, },
  CM3 := by { simpa only [‚Üê M'.1.CM3_iff_unop] using M'.CM3, },
  CM4 := by { simpa only [‚Üê M'.1.CM4_iff_unop] using M'.CM4, },
  CM5 := by { simpa only [‚Üê M'.1.CM5_iff_unop] using M'.CM5, }, }

#check 42

def Ho := localization M.weak_equivalences

instance : category (Ho M) := (infer_instance : category (localization M.weak_equivalences))

notation `Ho(`M`)` := Ho M

variable {M}

def Q : C ‚•§ Ho M := category_theory.localization.Q _

end model_category
